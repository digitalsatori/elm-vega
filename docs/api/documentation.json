[
  {
    "name": "Vega",
    "comment": " This module will allow you to create a full Vega specification in Elm. A\nspecification is stored as a JSON object and contains sufficient declarative detail\nto specify the graphical output. While this a 'pure' Elm library, to create the\ngraphical output you probably want to send a Vega specification generated by\n`toVega` via a port to some JavaScript that invokes the Vega runtime.\n\n\n# Creating A Vega Specification\n\nFuture development of this package will allow full Vega specifications to be provided.\nCurrently, only a very limited set of Vega options detailed below, is provided for\ntesting purposes only.\n\n@docs toVega\n@docs VProperty\n@docs Spec\n@docs combineSpecs\n\n\n# Creating the Data Specification\n\nFunctions and types for declaring the input data to the visualization.\n\n@docs dataSource\n@docs dataFromColumns\n@docs dataFromRows\n@docs data\n@docs dataColumn\n@docs dataRow\n@docs on\n@docs trigger\n@docs DataProperty\n@docs dUrl\n@docs dFormat\n@docs dSource\n@docs dValue\n@docs dOn\n@docs DataColumn\n@docs DataRow\n@docs DataTable\n@docs DataReference\n@docs dDataset\n@docs dField\n@docs dFields\n@docs dReferences\n@docs dSort\n@docs DataType\n@docs foBool\n@docs foNumber\n@docs foDate\n@docs foUtc\n@docs Format\n@docs csv\n@docs tsv\n@docs dsv\n@docs topojsonMesh\n@docs topojsonFeature\n@docs parse\n@docs SortProperty\n@docs op\n@docs byField\n@docs Source\n@docs Trigger\n@docs TriggerProperty\n\n\n## Transformations\n\n@docs Transform\n@docs FormulaUpdate\n@docs AggregateProperty\n@docs agGroupBy\n@docs agFields\n@docs agOps\n@docs agAs\n@docs agCross\n@docs agDrop\n@docs PackProperty\n@docs PieProperty\n@docs StackProperty\n@docs StackOffset\n\n@docs transform\n@docs Order\n@docs Comparator\n@docs coField\n@docs coOrder\n\n@docs argMax\n@docs argMin\n@docs average\n@docs ci0\n@docs ci1\n@docs count\n@docs distinct\n@docs maximum\n@docs mean\n@docs median\n@docs minimum\n@docs missing\n@docs q1\n@docs q3\n@docs stderr\n@docs stdev\n@docs stdevp\n@docs sum\n@docs valid\n@docs variance\n@docs variancep\n\n\n## Axes\n\n@docs axes\n@docs axis\n@docs AxisProperty\n@docs axDomain\n@docs axEncode\n@docs axFormat\n@docs axGrid\n@docs axGridScale\n@docs axLabels\n@docs axLabelBound\n@docs axLabelFlush\n@docs axLabelFlushOffset\n@docs axLabelPadding\n@docs axLabelOverlap\n@docs axMinExtent\n@docs axMaxExtent\n@docs axOffset\n@docs axPosition\n@docs axTicks\n@docs axTickCount\n@docs axTickSize\n@docs axTitle\n@docs axTitlePadding\n@docs axValues\n@docs axZIndex\n@docs AxisElement\n@docs Side\n@docs OverlapStrategy\n\n\n## Legends\n\n@docs legends\n@docs legend\n@docs LegendProperty\n@docs LegendType\n@docs LegendOrientation\n@docs LegendEncoding\n\n\n## Marks\n\n@docs marks\n@docs mark\n@docs Mark\n@docs TopMarkProperty\n@docs sData\n@docs Facet\n@docs sFacet\n@docs faField\n@docs faGroupBy\n@docs MarkProperty\n@docs EncodingProperty\n@docs enter\n@docs update\n@docs hover\n@docs exit\n@docs custom\n@docs MarkInterpolation\n@docs markInterpolationLabel\n@docs MarkOrientation\n@docs markOrientationLabel\n@docs Cursor\n@docs cursorLabel\n@docs HAlign\n@docs hAlignLabel\n@docs VAlign\n@docs vAlignLabel\n@docs Symbol\n@docs symbolLabel\n@docs StrokeCap\n@docs strokeCapLabel\n@docs StrokeJoin\n@docs strokeJoinLabel\n@docs TextDirection\n@docs dirLabel\n\n\n## Signals\n\n@docs signals\n@docs signal\n@docs sigHeight\n@docs sigWidth\n@docs sigPadding\n@docs SignalBool\n@docs SignalNumber\n@docs SignalString\n@docs SignalProperty\n@docs Bind\n@docs iCheckbox\n@docs iText\n@docs iNumber\n@docs iDate\n@docs iDateTimeLocal\n@docs iTime\n@docs iMonth\n@docs iWeek\n@docs iRadio\n@docs iRange\n@docs iSelect\n@docs iTel\n@docs iColor\n\n@docs InputProperty\n@docs EventHandler\n\n\n## Scaling\n\nThe mapping of data values to their visual expression.\n\n@docs scales\n@docs scale\n@docs RangeDefault\n@docs ScaleProperty\n@docs Scale\n@docs ScaleDomain\n@docs ScaleRange\n@docs ScaleNice\n@docs SchemeProperty\n@docs CInterpolate\n@docs cubeHelix\n@docs cubeHelixLong\n@docs hcl\n@docs hclLong\n@docs hsl\n@docs hslLong\n@docs lab\n@docs rgb\n\n\n## Aggregation\n\n@docs Operation\n\n\n# Global Configuration\n\nConfiguration options that affect the entire visualization. These are in addition\nto the data and transform options described above.\n\n@docs autosize\n@docs height\n@docs padding\n@docs width\n@docs Autosize\n@docs Padding\n\n\n# General Data types\n\nIn addition to more general data types like integers and strings, the following types\ncan carry data used in specifications.\n\n@docs TimeUnit\n@docs utc\n@docs ColorValue\n@docs cHCL\n@docs cHSL\n@docs cLAB\n@docs cRGB\n@docs Expr\n@docs Expression\n@docs Field\n@docs FieldValue\n@docs Value\n@docs Str\n@docs Num\n\n@docs vSignal\n@docs strSignal\n@docs vColor\n@docs vBand\n@docs vField\n@docs vNumber\n@docs vNumbers\n@docs dNumbers\n@docs str\n@docs strs\n@docs num\n@docs nums\n@docs vStr\n@docs vStrs\n@docs dStrs\n@docs vBool\n@docs vBools\n@docs vObject\n@docs keyValue\n@docs vValues\n@docs ifElse\n@docs vNull\n@docs vMultiply\n@docs vExponent\n@docs vOffset\n@docs vRound\n@docs vScale\n\n",
    "aliases": [
      {
        "name": "DataColumn",
        "comment": " Represents a single column of data. Used when generating inline data with\n`dataColumn`.\n",
        "args": [],
        "type": "List Vega.LabelledSpec"
      },
      {
        "name": "DataRow",
        "comment": " Represents a single row of data. Used when generating inline data with\n`dataRow`.\n",
        "args": [],
        "type": "Vega.Spec"
      },
      {
        "name": "DataTable",
        "comment": " Represents a single table of data (collection of `dataColumn`s).\n",
        "args": [],
        "type": "List Vega.LabelledSpec"
      },
      {
        "name": "Expression",
        "comment": " Represents an expression to enable custom calculations. This should be text\nin the Vega expression language. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/expressions).\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "Field",
        "comment": " Represents a field name. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/types/#Field)\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "Spec",
        "comment": " A Vega specification. Specs can be (and usually are) nested.\nThey can range from a single Boolean value up to the entire Vega specification.\n",
        "args": [],
        "type": "Json.Encode.Value"
      },
      {
        "name": "Trigger",
        "comment": " Represents a trigger enabling dynamic updates to data and marks. For details\nsee the [Vega documentation](https://vega.github.io/vega/docs/triggers/)\n",
        "args": [],
        "type": "Vega.Spec"
      }
    ],
    "types": [
      {
        "name": "AggregateProperty",
        "comment": " Properties of the aggregate transformation. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Autosize",
        "comment": " Indicates the auto-sizing characteristics of the visualization such as amount\nof padding, whether it should fill the parent container etc. For more details see the\n[Vega documentation](https://vega.github.io/vega/docs/specification/#autosize-types)\n",
        "args": [],
        "cases": [
          [
            "AContent",
            []
          ],
          [
            "AFit",
            []
          ],
          [
            "ANone",
            []
          ],
          [
            "APad",
            []
          ],
          [
            "APadding",
            []
          ],
          [
            "AResize",
            []
          ]
        ]
      },
      {
        "name": "AxisElement",
        "comment": " Encodable axis element. Used for customising some part of an axis. For details\nsee the [Vega documentation](https://vega.github.io/vega/docs/axes/#custom).\n",
        "args": [],
        "cases": [
          [
            "EAxis",
            []
          ],
          [
            "ETicks",
            []
          ],
          [
            "EGrid",
            []
          ],
          [
            "ELabels",
            []
          ],
          [
            "ETitle",
            []
          ],
          [
            "EDomain",
            []
          ]
        ]
      },
      {
        "name": "AxisProperty",
        "comment": " Indicates the characteristics of a chart axis such as its orientation, labels\nand ticks. For more details see the\n[Vega documentation](https://vega.github.io/vega/docs/axes)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Bind",
        "comment": " Describes a binding to some HTML input element such as a checkbox or radio button.\nFor details see the [Vega documentation](https://vega.github.io/vega/docs/signals/#bind).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "CInterpolate",
        "comment": " Indicates the type of color interpolation to apply, when mapping a data field\nonto a color scale. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#quantitative).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ColorValue",
        "comment": " Defines a custom colour value. Can use a variety of colour spaces such as RGB,\nHSL etc. For more details, see the\n[Vega documentation](https://vega.github.io/vega/docs/types/#ColorValue)}\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Comparator",
        "comment": " Defines how sorting should be applied. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/types/#Compare)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Cursor",
        "comment": " Represents the type of cursor to display. For an explanation of each type,\nsee the [CSS documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Keyword%20values)\n",
        "args": [],
        "cases": [
          [
            "CAuto",
            []
          ],
          [
            "CDefault",
            []
          ],
          [
            "CNone",
            []
          ],
          [
            "CContextMenu",
            []
          ],
          [
            "CHelp",
            []
          ],
          [
            "CPointer",
            []
          ],
          [
            "CProgress",
            []
          ],
          [
            "CWait",
            []
          ],
          [
            "CCell",
            []
          ],
          [
            "CCrosshair",
            []
          ],
          [
            "CText",
            []
          ],
          [
            "CVerticalText",
            []
          ],
          [
            "CAlias",
            []
          ],
          [
            "CCopy",
            []
          ],
          [
            "CMove",
            []
          ],
          [
            "CNoDrop",
            []
          ],
          [
            "CNotAllowed",
            []
          ],
          [
            "CAllScroll",
            []
          ],
          [
            "CColResize",
            []
          ],
          [
            "CRowResize",
            []
          ],
          [
            "CNResize",
            []
          ],
          [
            "CEResize",
            []
          ],
          [
            "CSResize",
            []
          ],
          [
            "CWResize",
            []
          ],
          [
            "CNEResize",
            []
          ],
          [
            "CNWResize",
            []
          ],
          [
            "CSEResize",
            []
          ],
          [
            "CSWResize",
            []
          ],
          [
            "CEWResize",
            []
          ],
          [
            "CNSResize",
            []
          ],
          [
            "CNESWResize",
            []
          ],
          [
            "CNWSEResize",
            []
          ],
          [
            "CZoomIn",
            []
          ],
          [
            "CZoomOut",
            []
          ],
          [
            "CGrab",
            []
          ],
          [
            "CGrabbing",
            []
          ]
        ]
      },
      {
        "name": "DataProperty",
        "comment": " Properties to customise data loading. For details, see the\n[Vega documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "DataReference",
        "comment": " Reference to one or more sources of data such as dataset, field name or collection\nof fields. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "DataType",
        "comment": " Indicates the type of data to be parsed when reading input data.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "EncodingProperty",
        "comment": " Indicates the charactersitcs of an encoding. For further\ndetails see the [Vega documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "EventHandler",
        "comment": " Specifies an event handler indicating which events to respond to and what to\nupdate or encode as a result. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/signals/#handlers).\n",
        "args": [],
        "cases": [
          [
            "EEvents",
            [
              "String"
            ]
          ],
          [
            "EUpdate",
            [
              "String"
            ]
          ],
          [
            "EEncode",
            [
              "String"
            ]
          ],
          [
            "EForce",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "Expr",
        "comment": " A vega [Expr](https://vega.github.io/vega/docs/types/#Expr) that can be either\na field lookup or a full expression that is evaluated once per datum.\n",
        "args": [],
        "cases": [
          [
            "EField",
            [
              "String"
            ]
          ],
          [
            "Expr",
            [
              "Vega.Expression"
            ]
          ]
        ]
      },
      {
        "name": "Facet",
        "comment": " Defines a facet directive. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#facet).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "FieldValue",
        "comment": " Represents a field value. Rather than a simple field name this can be used to\nevaluate a signal, group or parent to indirectly reference a field. For details\nsee the [Vega documentation](https://vega.github.io/vega/docs/types/#FieldValue).\n",
        "args": [],
        "cases": [
          [
            "FName",
            [
              "String"
            ]
          ],
          [
            "FSignal",
            [
              "String"
            ]
          ],
          [
            "FDatum",
            [
              "Vega.FieldValue"
            ]
          ],
          [
            "FGroup",
            [
              "Vega.FieldValue"
            ]
          ],
          [
            "FParent",
            [
              "Vega.FieldValue"
            ]
          ]
        ]
      },
      {
        "name": "Format",
        "comment": " Specifies the type of format a data source uses. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/data/#format).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "FormulaUpdate",
        "comment": " Defines whether a formula transformation is a one-off operation (`InitOnly`)\nor is applied whenever an upstream dependency changes. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/formula/).\n",
        "args": [],
        "cases": [
          [
            "InitOnly",
            []
          ],
          [
            "AlwaysUpdate",
            []
          ]
        ]
      },
      {
        "name": "HAlign",
        "comment": " Indicates the horizontal alignment of some text such as on an axis or legend.\n",
        "args": [],
        "cases": [
          [
            "AlignCenter",
            []
          ],
          [
            "AlignLeft",
            []
          ],
          [
            "AlignRight",
            []
          ]
        ]
      },
      {
        "name": "InputProperty",
        "comment": " GUI Input properties. The type of relevant proerty will depend on the type of\ninput element selected. For example an `InRange` (slider) can have numeric min,\nmax and step values; InSelect (selector) has a list of selection label options.\nFor details see the [Vega documentation](https://vega.github.io/vega/docs/signals/#bind).\nThe `debounce` property, available for all input types allows a delay in input event\nhandling to be added in order to avoid unnecessary event broadcasting. The `Element`\nproperty is an optional CSS selector indicating the parent element to which the\ninput element should be added. This allows the option of the input element to be\noutside the visualization container.\n",
        "args": [],
        "cases": [
          [
            "Debounce",
            [
              "Float"
            ]
          ],
          [
            "Element",
            [
              "String"
            ]
          ],
          [
            "InOptions",
            [
              "Vega.Value"
            ]
          ],
          [
            "InMin",
            [
              "Float"
            ]
          ],
          [
            "InMax",
            [
              "Float"
            ]
          ],
          [
            "InName",
            [
              "String"
            ]
          ],
          [
            "InStep",
            [
              "Float"
            ]
          ],
          [
            "InPlaceholder",
            [
              "String"
            ]
          ],
          [
            "InAutocomplete",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "LegendEncoding",
        "comment": " Type of custom legend encoding. For more details see the\n[Vega documentation](https://vega.github.io/vega/docs/legends/#custom)\n",
        "args": [],
        "cases": [
          [
            "EnLegend",
            [
              "List Vega.EncodingProperty"
            ]
          ],
          [
            "EnTitle",
            [
              "List Vega.EncodingProperty"
            ]
          ],
          [
            "EnLabels",
            [
              "List Vega.EncodingProperty"
            ]
          ],
          [
            "EnSymbols",
            [
              "List Vega.EncodingProperty"
            ]
          ],
          [
            "EnGradient",
            [
              "List Vega.EncodingProperty"
            ]
          ]
        ]
      },
      {
        "name": "LegendOrientation",
        "comment": " Indicates the position of a legend relative to the visualization it describes.\nFor details see the [Vega documentation](https://vega.github.io/vega/docs/legends/#orientation)\n",
        "args": [],
        "cases": [
          [
            "Left",
            []
          ],
          [
            "TopLeft",
            []
          ],
          [
            "Top",
            []
          ],
          [
            "TopRight",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "BottomRight",
            []
          ],
          [
            "Bottom",
            []
          ],
          [
            "BottomLeft",
            []
          ],
          [
            "None",
            []
          ]
        ]
      },
      {
        "name": "LegendProperty",
        "comment": " Indicates the characteristics of alegend such as its orientation and scaling\nto represent. For more details see the\n[Vega documentation](https://vega.github.io/vega/docs/legends/)\n",
        "args": [],
        "cases": [
          [
            "LeType",
            [
              "Vega.LegendType"
            ]
          ],
          [
            "LOrient",
            [
              "Vega.LegendOrientation"
            ]
          ],
          [
            "LFill",
            [
              "String"
            ]
          ],
          [
            "LOpacity",
            [
              "String"
            ]
          ],
          [
            "LShape",
            [
              "String"
            ]
          ],
          [
            "LSize",
            [
              "String"
            ]
          ],
          [
            "LStroke",
            [
              "String"
            ]
          ],
          [
            "LStrokeDash",
            [
              "String"
            ]
          ],
          [
            "LEncode",
            [
              "List Vega.LegendEncoding"
            ]
          ],
          [
            "LEntryPadding",
            [
              "Vega.Value"
            ]
          ],
          [
            "LFormat",
            [
              "String"
            ]
          ],
          [
            "LOffset",
            [
              "Vega.Value"
            ]
          ],
          [
            "LPadding",
            [
              "Vega.Value"
            ]
          ],
          [
            "LTickCount",
            [
              "Int"
            ]
          ],
          [
            "LTitlePadding",
            [
              "Vega.Value"
            ]
          ],
          [
            "LTitle",
            [
              "String"
            ]
          ],
          [
            "LValues",
            [
              "List Vega.Value"
            ]
          ],
          [
            "LZIndex",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "LegendType",
        "comment": " Type of legend. `LSymbol` representing legends with discrete items and `LGradient`\nfor those representing continuous data.\n",
        "args": [],
        "cases": [
          [
            "LSymbol",
            []
          ],
          [
            "LGradient",
            []
          ]
        ]
      },
      {
        "name": "Mark",
        "comment": " Type of visual mark used to represent data in the visualization. For further\ndetails see the [Vega documentation](https://vega.github.io/vega/docs/marks/#types).\n",
        "args": [],
        "cases": [
          [
            "Arc",
            []
          ],
          [
            "Area",
            []
          ],
          [
            "Image",
            []
          ],
          [
            "Group",
            []
          ],
          [
            "Line",
            []
          ],
          [
            "Path",
            []
          ],
          [
            "Rect",
            []
          ],
          [
            "Rule",
            []
          ],
          [
            "Shape",
            []
          ],
          [
            "Symbol",
            []
          ],
          [
            "Text",
            []
          ],
          [
            "Trail",
            []
          ]
        ]
      },
      {
        "name": "MarkInterpolation",
        "comment": " Indicates mark interpolation style.\n",
        "args": [],
        "cases": [
          [
            "Basis",
            []
          ],
          [
            "Cardinal",
            []
          ],
          [
            "CatmullRom",
            []
          ],
          [
            "Linear",
            []
          ],
          [
            "Monotone",
            []
          ],
          [
            "Natural",
            []
          ],
          [
            "Stepwise",
            []
          ],
          [
            "StepAfter",
            []
          ],
          [
            "StepBefore",
            []
          ]
        ]
      },
      {
        "name": "MarkOrientation",
        "comment": " Indicates desired orientation of a mark (e.g. horizontally or vertically\noriented bars.)\n",
        "args": [],
        "cases": [
          [
            "Horizontal",
            []
          ],
          [
            "Vertical",
            []
          ]
        ]
      },
      {
        "name": "MarkProperty",
        "comment": " Indicates an individual property of a mark when encoding. For further details\nsee the [Vega documentation](https://vega.github.io/vega/docs/marks/#encode).\n\nFor details of properties associated with specific mark types, see the Vega documentation\nfor [arcs](https://vega.github.io/vega/docs/marks/arc/),\n[areas](https://vega.github.io/vega/docs/marks/area/),\n[groups](https://vega.github.io/vega/docs/marks/group/),\n[images](https://vega.github.io/vega/docs/marks/image/),\n[lines](https://vega.github.io/vega/docs/marks/line/),\n[paths](https://vega.github.io/vega/docs/marks/path/),\n[rects](https://vega.github.io/vega/docs/marks/rect/),\n[rules](https://vega.github.io/vega/docs/marks/rule/),\n[shapes](https://vega.github.io/vega/docs/marks/shape/),\n[symbols](https://vega.github.io/vega/docs/marks/symbol/),\n[text](https://vega.github.io/vega/docs/marks/text/) and\n[trails](https://vega.github.io/vega/docs/marks/trail/).\n\n",
        "args": [],
        "cases": [
          [
            "MX",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MX2",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MXC",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MWidth",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MY",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MY2",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MYC",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MHeight",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MOpacity",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MFill",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MFillOpacity",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStroke",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStrokeOpacity",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStrokeWidth",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStrokeCap",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStrokeDash",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStrokeDashOffset",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStrokeJoin",
            [
              "Vega.StrokeJoin"
            ]
          ],
          [
            "MStrokeMiterLimit",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MCursor",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MHRef",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MTooltip",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MZIndex",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MAlign",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MBaseline",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MCornerRadius",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MInterpolate",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MTension",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MDefined",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MSize",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MStartAngle",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MEndAngle",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MPadAngle",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MInnerRadius",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MOuterRadius",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MOrient",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MGroupClip",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MUrl",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MAspect",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MPath",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MShape",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MSymbol",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MAngle",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MDir",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MdX",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MdY",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MEllipsis",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MFont",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MFontSize",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MFontWeight",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MFontStyle",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MLimit",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MRadius",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MText",
            [
              "List Vega.Value"
            ]
          ],
          [
            "MTheta",
            [
              "List Vega.Value"
            ]
          ]
        ]
      },
      {
        "name": "Num",
        "comment": " Represents number-related values such as a numeric literal, a list of numbers\nor a signal that generates a number.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Operation",
        "comment": " Type of aggregation operation. See the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/aggregate/#ops)\nfor more details.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Order",
        "comment": " Indicates whether an ascending or descending order is required (usually in sorting).\n",
        "args": [],
        "cases": [
          [
            "Ascend",
            []
          ],
          [
            "Descend",
            []
          ],
          [
            "OrderSignal",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "OverlapStrategy",
        "comment": " Type of overlap strategy to be applied when there is not space to show all\nitems on an axis. See the\n[Vega documentation](https://vega.github.io/vega/docs/axes)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "ONone",
            []
          ],
          [
            "OParity",
            []
          ],
          [
            "OGreedy",
            []
          ]
        ]
      },
      {
        "name": "PackProperty",
        "comment": " Properties of the packing transformation. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/pack)\n",
        "args": [],
        "cases": [
          [
            "PaField",
            [
              "Vega.Field"
            ]
          ],
          [
            "PaSort",
            [
              "List Vega.Comparator"
            ]
          ],
          [
            "PaSize",
            [
              "Vega.Value",
              "Vega.Value"
            ]
          ],
          [
            "PaRadius",
            [
              "Maybe.Maybe Vega.Field"
            ]
          ],
          [
            "PaPadding",
            [
              "Vega.SignalNumber"
            ]
          ],
          [
            "PaAs",
            [
              "String",
              "String",
              "String",
              "String",
              "String"
            ]
          ]
        ]
      },
      {
        "name": "Padding",
        "comment": " Represents padding dimensions in pixel units. `PSize` will set the same value\non all four edges of a rectangular container while `PEdges` can be used to specify\ndifferent sizes on each edge in order _left_, _top_, _right_, _bottom_.\n",
        "args": [],
        "cases": [
          [
            "PSize",
            [
              "Float"
            ]
          ],
          [
            "PEdges",
            [
              "Float",
              "Float",
              "Float",
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "PieProperty",
        "comment": " Properties of the pie chart transformation. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/pie/)\n",
        "args": [],
        "cases": [
          [
            "PiField",
            [
              "Vega.Field"
            ]
          ],
          [
            "PiStartAngle",
            [
              "Vega.SignalNumber"
            ]
          ],
          [
            "PiEndAngle",
            [
              "Vega.SignalNumber"
            ]
          ],
          [
            "PiSort",
            [
              "Vega.SignalBool"
            ]
          ],
          [
            "PiAs",
            [
              "String",
              "String"
            ]
          ]
        ]
      },
      {
        "name": "RangeDefault",
        "comment": " Type of scale range. Can be used to set the default type of range to use\nin a scale. The value of the default for each type can be set separately via\nconfig settings. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#range-defaults).\n",
        "args": [],
        "cases": [
          [
            "RWidth",
            []
          ],
          [
            "RHeight",
            []
          ],
          [
            "RSymbol",
            []
          ],
          [
            "RCategory",
            []
          ],
          [
            "RDiverging",
            []
          ],
          [
            "ROrdinal",
            []
          ],
          [
            "RRamp",
            []
          ],
          [
            "RHeatmap",
            []
          ]
        ]
      },
      {
        "name": "Scale",
        "comment": " Used to indicate the type of scale transformation to apply. See the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#types) for more details.\n",
        "args": [],
        "cases": [
          [
            "ScLinear",
            []
          ],
          [
            "ScPow",
            []
          ],
          [
            "ScSqrt",
            []
          ],
          [
            "ScLog",
            []
          ],
          [
            "ScTime",
            []
          ],
          [
            "ScUtc",
            []
          ],
          [
            "ScSequential",
            []
          ],
          [
            "ScOrdinal",
            []
          ],
          [
            "ScBand",
            []
          ],
          [
            "ScPoint",
            []
          ],
          [
            "ScQuantile",
            []
          ],
          [
            "ScQuantize",
            []
          ],
          [
            "ScBinLinear",
            []
          ],
          [
            "ScBinOrdinal",
            []
          ],
          [
            "ScCustom",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "ScaleDomain",
        "comment": " Describes the scale domain (type of data in scale). For full details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#domain).\n",
        "args": [],
        "cases": [
          [
            "DoNumbers",
            [
              "List Float"
            ]
          ],
          [
            "DoStrs",
            [
              "List String"
            ]
          ],
          [
            "DoSignal",
            [
              "String"
            ]
          ],
          [
            "DoData",
            [
              "List Vega.DataReference"
            ]
          ]
        ]
      },
      {
        "name": "ScaleNice",
        "comment": " Describes the way a scale can be rounded to 'nice' numbers. For full details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#quantitative).\n",
        "args": [],
        "cases": [
          [
            "NMillisecond",
            []
          ],
          [
            "NSecond",
            []
          ],
          [
            "NMinute",
            []
          ],
          [
            "NHour",
            []
          ],
          [
            "NDay",
            []
          ],
          [
            "NWeek",
            []
          ],
          [
            "NMonth",
            []
          ],
          [
            "NYear",
            []
          ],
          [
            "NInterval",
            [
              "Vega.TimeUnit",
              "Int"
            ]
          ],
          [
            "NTrue",
            []
          ],
          [
            "NFalse",
            []
          ],
          [
            "NTickCount",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "ScaleProperty",
        "comment": " Individual scale property. Scale properties are related, but not identical,\nto Vega-Lite's `ScaleProperty` which in Vega are more comprehensive and flexible.\nScale Properties characterise the fundamental data-to-visual transformations applied\nby the `scale` function. For more details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "args": [],
        "cases": [
          [
            "SType",
            [
              "Vega.Scale"
            ]
          ],
          [
            "SDomain",
            [
              "Vega.ScaleDomain"
            ]
          ],
          [
            "SDomainMax",
            [
              "Float"
            ]
          ],
          [
            "SDomainMin",
            [
              "Float"
            ]
          ],
          [
            "SDomainMid",
            [
              "Float"
            ]
          ],
          [
            "SRange",
            [
              "Vega.ScaleRange"
            ]
          ],
          [
            "SReverse",
            [
              "Bool"
            ]
          ],
          [
            "SRound",
            [
              "Bool"
            ]
          ],
          [
            "SClamp",
            [
              "Bool"
            ]
          ],
          [
            "SInterpolate",
            [
              "Vega.CInterpolate"
            ]
          ],
          [
            "SPadding",
            [
              "Float"
            ]
          ],
          [
            "SNice",
            [
              "Vega.ScaleNice"
            ]
          ],
          [
            "SZero",
            [
              "Bool"
            ]
          ],
          [
            "SExponent",
            [
              "Float"
            ]
          ],
          [
            "SBase",
            [
              "Float"
            ]
          ],
          [
            "SAlign",
            [
              "Float"
            ]
          ],
          [
            "SPaddingInner",
            [
              "Vega.Value"
            ]
          ],
          [
            "SPaddingOuter",
            [
              "Vega.Value"
            ]
          ],
          [
            "SRangeStep",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "ScaleRange",
        "comment": " Describes a scale range of scale output values. For full details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "args": [],
        "cases": [
          [
            "RNumbers",
            [
              "List Float"
            ]
          ],
          [
            "RStrs",
            [
              "List String"
            ]
          ],
          [
            "RValues",
            [
              "List Vega.Value"
            ]
          ],
          [
            "RSignal",
            [
              "String"
            ]
          ],
          [
            "RScheme",
            [
              "String",
              "List Vega.SchemeProperty"
            ]
          ],
          [
            "RData",
            [
              "Vega.DataReference"
            ]
          ],
          [
            "RStep",
            [
              "Vega.Value"
            ]
          ],
          [
            "RDefault",
            [
              "Vega.RangeDefault"
            ]
          ]
        ]
      },
      {
        "name": "SchemeProperty",
        "comment": " Describes a color scheme. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/schemes/).\n",
        "args": [],
        "cases": [
          [
            "SScheme",
            [
              "String"
            ]
          ],
          [
            "SCount",
            [
              "Float"
            ]
          ],
          [
            "SExtent",
            [
              "Float",
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Side",
        "comment": " Indicates a rectangular side. Can be used to specify an axis position.\n[Vega documentation](https://vega.github.io/vega/docs/axes/#orientation)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "SLeft",
            []
          ],
          [
            "SRight",
            []
          ],
          [
            "STop",
            []
          ],
          [
            "SBottom",
            []
          ]
        ]
      },
      {
        "name": "SignalBool",
        "comment": " Represents a boolean value that can either be a literal `SigBool` or signal that\nreferences a boolean value.\n",
        "args": [],
        "cases": [
          [
            "SigBool",
            [
              "Bool"
            ]
          ],
          [
            "SigBoolRef",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "SignalNumber",
        "comment": " Represents a numeric value that can either be a literal `SigNum` or signal that\nreferences a number.\n",
        "args": [],
        "cases": [
          [
            "SigNum",
            [
              "Float"
            ]
          ],
          [
            "SigNumRef",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "SignalProperty",
        "comment": " Individual signal property. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/signals).\n",
        "args": [],
        "cases": [
          [
            "SiName",
            [
              "String"
            ]
          ],
          [
            "SiBind",
            [
              "Vega.Bind"
            ]
          ],
          [
            "SiDescription",
            [
              "String"
            ]
          ],
          [
            "SiOn",
            [
              "List (List Vega.EventHandler)"
            ]
          ],
          [
            "SiUpdate",
            [
              "Vega.Expression"
            ]
          ],
          [
            "SiReact",
            [
              "Bool"
            ]
          ],
          [
            "SiValue",
            [
              "Vega.Value"
            ]
          ]
        ]
      },
      {
        "name": "SignalString",
        "comment": " Represents a string value that can either be a literal `SigStr` or signal that\nreferences a string.\n",
        "args": [],
        "cases": [
          [
            "SigStr",
            [
              "String"
            ]
          ],
          [
            "SigStrRef",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "SortProperty",
        "comment": " Allow type of sorting to be customised. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#sort).\n",
        "args": [],
        "cases": [
          [
            "Ascending",
            []
          ],
          [
            "Descending",
            []
          ]
        ]
      },
      {
        "name": "Source",
        "comment": " The data source for a set of marks. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#from).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "StackOffset",
        "comment": " Indicates the type of offsetting to apply when stacking. `OfZero` uses a baseline\nat the foot of a stack, `OfCenter` uses a central baseline with stacking both above\nand below it, while `OfNormalize` rescales stack to a common height while preserving\nthe relative size of stacked quantities. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/stack)\n",
        "args": [],
        "cases": [
          [
            "OfZero",
            []
          ],
          [
            "OfCenter",
            []
          ],
          [
            "OfNormalize",
            []
          ],
          [
            "OffsetSignal",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "StackProperty",
        "comment": " Properties of the stacking transformation. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/stack/)\n",
        "args": [],
        "cases": [
          [
            "StField",
            [
              "Vega.Field"
            ]
          ],
          [
            "StGroupBy",
            [
              "List Vega.Field"
            ]
          ],
          [
            "StSort",
            [
              "List Vega.Comparator"
            ]
          ],
          [
            "StOffset",
            [
              "Vega.StackOffset"
            ]
          ],
          [
            "StAs",
            [
              "String",
              "String"
            ]
          ]
        ]
      },
      {
        "name": "Str",
        "comment": " Represents string-related values such as a string literal, a list of strings\nor a signal that generates a string.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "StrokeCap",
        "comment": " Type of stroke cap.\n",
        "args": [],
        "cases": [
          [
            "CButt",
            []
          ],
          [
            "CRound",
            []
          ],
          [
            "CSquare",
            []
          ]
        ]
      },
      {
        "name": "StrokeJoin",
        "comment": " Type of stroke join.\n",
        "args": [],
        "cases": [
          [
            "JMiter",
            []
          ],
          [
            "JRound",
            []
          ],
          [
            "JBevel",
            []
          ]
        ]
      },
      {
        "name": "Symbol",
        "comment": " Identifies the type of symbol. The `Path` symbol is used to define custom shapes\nas an SVG path description.\n",
        "args": [],
        "cases": [
          [
            "SymCircle",
            []
          ],
          [
            "SymSquare",
            []
          ],
          [
            "Cross",
            []
          ],
          [
            "Diamond",
            []
          ],
          [
            "TriangleUp",
            []
          ],
          [
            "TriangleDown",
            []
          ],
          [
            "SymPath",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "TextDirection",
        "comment": " Direction text is rendered. This determines which end of a text string is\ntruncated if it cannot be displated within a restricted space.\n",
        "args": [],
        "cases": [
          [
            "LeftToRight",
            []
          ],
          [
            "RightToLeft",
            []
          ]
        ]
      },
      {
        "name": "TimeUnit",
        "comment": " Describes a unit of time. Useful for encoding and transformations. See the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#quantitative)\nfor further details.\n",
        "args": [],
        "cases": [
          [
            "Year",
            []
          ],
          [
            "YearQuarter",
            []
          ],
          [
            "YearQuarterMonth",
            []
          ],
          [
            "YearMonth",
            []
          ],
          [
            "YearMonthDate",
            []
          ],
          [
            "YearMonthDateHours",
            []
          ],
          [
            "YearMonthDateHoursMinutes",
            []
          ],
          [
            "YearMonthDateHoursMinutesSeconds",
            []
          ],
          [
            "Quarter",
            []
          ],
          [
            "QuarterMonth",
            []
          ],
          [
            "Month",
            []
          ],
          [
            "MonthDate",
            []
          ],
          [
            "Date",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Hours",
            []
          ],
          [
            "HoursMinutes",
            []
          ],
          [
            "HoursMinutesSeconds",
            []
          ],
          [
            "Minutes",
            []
          ],
          [
            "MinutesSeconds",
            []
          ],
          [
            "Seconds",
            []
          ],
          [
            "SecondsMilliseconds",
            []
          ],
          [
            "Milliseconds",
            []
          ]
        ]
      },
      {
        "name": "TopMarkProperty",
        "comment": " Indicates the charactersitcs of a mark. For further\ndetails see the [Vega documentation](https://vega.github.io/vega/docs/marks).\n\nWhole specifications can nested within the `Group` mark (including further nested\ngroup specifications) by specifying `MType Group` and suppyling the specification\nas a series of properties supplied to `MGroup`. For example,\n\n    TODO: XXX MGroup example\n\n",
        "args": [],
        "cases": [
          [
            "MType",
            [
              "Vega.Mark"
            ]
          ],
          [
            "MClip",
            [
              "Bool"
            ]
          ],
          [
            "MDescription",
            [
              "String"
            ]
          ],
          [
            "MEncode",
            [
              "List Vega.EncodingProperty"
            ]
          ],
          [
            "MFrom",
            [
              "List Vega.Source"
            ]
          ],
          [
            "MInteractive",
            [
              "Bool"
            ]
          ],
          [
            "MKey",
            [
              "String"
            ]
          ],
          [
            "MName",
            [
              "String"
            ]
          ],
          [
            "MOn",
            [
              "List Vega.Trigger"
            ]
          ],
          [
            "MSort",
            [
              "List Vega.Comparator"
            ]
          ],
          [
            "MRole",
            [
              "String"
            ]
          ],
          [
            "MStyle",
            [
              "List String"
            ]
          ],
          [
            "MGroup",
            [
              "List ( Vega.VProperty, Vega.Spec )"
            ]
          ]
        ]
      },
      {
        "name": "Transform",
        "comment": " Defines a transformation that may be applied to a data stream or mark.\nFor details see the [Vega documentation](https://vega.github.io/vega/docs/transforms).\n",
        "args": [],
        "cases": [
          [
            "TAggregate",
            [
              "List Vega.AggregateProperty"
            ]
          ],
          [
            "TBin",
            []
          ],
          [
            "TCollect",
            []
          ],
          [
            "TCountPattern",
            []
          ],
          [
            "TCross",
            []
          ],
          [
            "TDensity",
            []
          ],
          [
            "TExtent",
            [
              "Vega.Field"
            ]
          ],
          [
            "TExtentAsSignal",
            [
              "Vega.Field",
              "String"
            ]
          ],
          [
            "TFilter",
            [
              "Vega.Expr"
            ]
          ],
          [
            "TFold",
            []
          ],
          [
            "TFormula",
            [
              "Vega.Expression",
              "String",
              "Vega.FormulaUpdate"
            ]
          ],
          [
            "TIdentifier",
            []
          ],
          [
            "TImpute",
            []
          ],
          [
            "TJoinAggregate",
            []
          ],
          [
            "TLookup",
            []
          ],
          [
            "TProject",
            []
          ],
          [
            "TSample",
            []
          ],
          [
            "TSequence",
            []
          ],
          [
            "TWindow",
            []
          ],
          [
            "TContour",
            []
          ],
          [
            "TGeoJson",
            []
          ],
          [
            "TGeoPath",
            []
          ],
          [
            "TGeoPoint",
            []
          ],
          [
            "TGeoShape",
            []
          ],
          [
            "TGraticule",
            []
          ],
          [
            "TLinkpath",
            []
          ],
          [
            "TPie",
            [
              "List Vega.PieProperty"
            ]
          ],
          [
            "TStack",
            [
              "List Vega.StackProperty"
            ]
          ],
          [
            "TForce",
            []
          ],
          [
            "TVoronoi",
            []
          ],
          [
            "TWordCloud",
            []
          ],
          [
            "TNest",
            []
          ],
          [
            "TStratify",
            [
              "Vega.Field",
              "Vega.Field"
            ]
          ],
          [
            "TTreeLinks",
            []
          ],
          [
            "TPack",
            [
              "List Vega.PackProperty"
            ]
          ],
          [
            "TPartition",
            []
          ],
          [
            "TTree",
            []
          ],
          [
            "TTreeMap",
            []
          ],
          [
            "TCrossFilter",
            []
          ],
          [
            "TResolveFilter",
            []
          ]
        ]
      },
      {
        "name": "TriggerProperty",
        "comment": " Defines a trigger that can cause a data stream or mark to update.\nFor details see the [Vega documentation](https://vega.github.io/vega/docs/triggers).\n",
        "args": [],
        "cases": [
          [
            "TrTrigger",
            [
              "Vega.Expression"
            ]
          ],
          [
            "TrInsert",
            [
              "Vega.Expression"
            ]
          ],
          [
            "TrRemove",
            [
              "Vega.Expression"
            ]
          ],
          [
            "TrToggle",
            [
              "Vega.Expression"
            ]
          ],
          [
            "TrModifyValues",
            [
              "Vega.Expression",
              "Vega.Expression"
            ]
          ]
        ]
      },
      {
        "name": "VAlign",
        "comment": " Indicates the vertical alignment of some text or an image mark. Note that the\n`Alphabetic` type constructor applies only to text marks.\n",
        "args": [],
        "cases": [
          [
            "AlignTop",
            []
          ],
          [
            "AlignMiddle",
            []
          ],
          [
            "AlignBottom",
            []
          ],
          [
            "Alphabetic",
            []
          ]
        ]
      },
      {
        "name": "VProperty",
        "comment": " Top-level Vega properties.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Value",
        "comment": " Represents a value such as a number or reference to a value such as a field label\nor transformed value. For details, see the\n[Vega documentation](https://vega.github.io/vega/docs/types/#Value)\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "agAs",
        "comment": " The output field names generated when performing an aggregation transformation.\nThe list of field names should align with the fields operations provided by `agFields`\nand `agOps`. If not provided, automatic names are generated by appending `_field`\nto the operation name.\n",
        "type": "List String -> Vega.AggregateProperty"
      },
      {
        "name": "agCross",
        "comment": " Indicates if the full cross-product of all `groupby` values should be included\nin the aggregate output when performing an aggregation transformation. For details\nsee the [Vega documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "Bool -> Vega.AggregateProperty"
      },
      {
        "name": "agDrop",
        "comment": " Indicates if empty (zero count) groups should be dropped when performing an\naggregation transformation. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "Bool -> Vega.AggregateProperty"
      },
      {
        "name": "agFields",
        "comment": " The data fields for which to compute aggregate functions when performing an\naggregation transformation. The list of fields should align with the operations\nand field names provided by `agOps` and `agAs`. If no fields and operationss\nare specified, a count aggregation will be used by default. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "List Vega.Field -> Vega.AggregateProperty"
      },
      {
        "name": "agGroupBy",
        "comment": " The data fields to group by when performing an aggregation transformation.\nIf not specified, a single group containing all data objects will be used when\naggregating. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "List Vega.Field -> Vega.AggregateProperty"
      },
      {
        "name": "agOps",
        "comment": " The aggregation operations to apply to the fields when performing an\naggregation transformation. The list of operations should align with the fields\noutput field names provided by `agFields` and `agAs`. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "List Vega.Operation -> Vega.AggregateProperty"
      },
      {
        "name": "argMax",
        "comment": " An aggregating operation providing an input data object containing the\nmaximum field value.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "argMin",
        "comment": " An aggregating operation providing an input data object containing the\nminimum field value.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "autosize",
        "comment": " Declare the way the view is sized. See the\n[Vega documentation](https://vega.github.io/vega/docs/specification/#autosize-types)\nfor details.\n\n    TODO: XXX\n\n",
        "type": "List Vega.Autosize -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "average",
        "comment": " An aggregating operation to calculate the mean of a field. Synonymous with `mean`.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "axDomain",
        "comment": " Indicates if the domain (the axis baseline) should be included as part of\nthe axis\n",
        "type": "Bool -> Vega.AxisProperty"
      },
      {
        "name": "axEncode",
        "comment": " Mark encodings for custom axis styling. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/axes/#custom).\n",
        "type": "List ( Vega.AxisElement, List Vega.EncodingProperty ) -> Vega.AxisProperty"
      },
      {
        "name": "axFormat",
        "comment": " The format specifier pattern for axis labels. For numerical values, must be\na legal [d3-format specifier](https://github.com/d3/d3-format#locale_format).\nFor date-time values, must be a legal\n[d3-time-format](https://github.com/d3/d3-time-format#locale_format) specifier.\n",
        "type": "String -> Vega.AxisProperty"
      },
      {
        "name": "axGrid",
        "comment": " Indicates if grid lines should be included as part of the axis.\n",
        "type": "Bool -> Vega.AxisProperty"
      },
      {
        "name": "axGridScale",
        "comment": " Name of the scale to use for including grid lines. By default grid lines are\ndriven by the same scale as the ticks and labels.\n",
        "type": "String -> Vega.AxisProperty"
      },
      {
        "name": "axLabelBound",
        "comment": " Indicates if labels should be hidden if they exceed the axis range. If the\nparameter is `Nothing`, no check for label size is made. A `Just` value specifies\nthe permitted overlow in pixels that can be tolerated.\n",
        "type": "Maybe.Maybe Float -> Vega.AxisProperty"
      },
      {
        "name": "axLabelFlush",
        "comment": " Indicates if labels at the beginning or end of the axis should be aligned\nflush with the scale range. If `Just` a pixel distance threshold, labels with\nanchor coordinates within the threshold distance for an axis end-point will be\nflush-adjusted. If `Nothing`, no flush alignment will be applied.\n",
        "type": "Maybe.Maybe Float -> Vega.AxisProperty"
      },
      {
        "name": "axLabelFlushOffset",
        "comment": " Indicates the number of pixels by which to offset flush-adjusted labels\n(default 0). For example, a value of 2 will push flush-adjusted labels 2 pixels\noutward from the centre of the axis. Offsets can help the labels better visually\ngroup with corresponding axis ticks.\n",
        "type": "Float -> Vega.AxisProperty"
      },
      {
        "name": "axLabelOverlap",
        "comment": " The strategy to use for resolving overlap of axis labels.\n",
        "type": "Vega.OverlapStrategy -> Vega.AxisProperty"
      },
      {
        "name": "axLabelPadding",
        "comment": " The padding in pixels between labels and ticks.\n",
        "type": "Float -> Vega.AxisProperty"
      },
      {
        "name": "axLabels",
        "comment": " A boolean flag indicating if labels should be included as part of the axis.\n",
        "type": "Bool -> Vega.AxisProperty"
      },
      {
        "name": "axMaxExtent",
        "comment": " The maximum extent in pixels that axis ticks and labels should use. This\ndetermines a maximum offset value for axis titles.\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axMinExtent",
        "comment": " The minimum extent in pixels that axis ticks and labels should use. This\ndetermines a minimum offset value for axis titles.\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axOffset",
        "comment": " The orthogonal offset in pixels by which to displace the axis from its position\nalong the edge of the chart.\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axPosition",
        "comment": " The anchor position of the axis in pixels. For x-axes with top or bottom\norientation, this sets the axis group x coordinate. For y-axes with left or right\norientation, this sets the axis group y coordinate.\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTickCount",
        "comment": " A desired number of ticks, for axes visualizing quantitative scales. The\nresulting number may be different so that values are “nice” (multiples of 2, 5, 10)\nand lie within the underlying scale’s range.\n",
        "type": "Int -> Vega.AxisProperty"
      },
      {
        "name": "axTickSize",
        "comment": " The size in pixels of axis ticks.\n",
        "type": "Float -> Vega.AxisProperty"
      },
      {
        "name": "axTicks",
        "comment": " Indicates if ticks should be included as part of the axis.\n",
        "type": "Bool -> Vega.AxisProperty"
      },
      {
        "name": "axTitle",
        "comment": " A title for the axis.\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axTitlePadding",
        "comment": " The offset in pixels between the axis labels and axis title.\n",
        "type": "Float -> Vega.AxisProperty"
      },
      {
        "name": "axValues",
        "comment": " Explicitly set axis tick and label values.\n",
        "type": "List Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axZIndex",
        "comment": " The z-index indicating the layering of the axis group relative to other axis,\nmark and legend groups. The default value is 0 and axes and grid lines are drawn\nbehind any marks defined in the same specification level. Higher values (1) will\ncause axes and grid lines to be drawn on top of marks.\n",
        "type": "Int -> Vega.AxisProperty"
      },
      {
        "name": "axes",
        "comment": " Create the axes used to visualize spatial scale mappings.\n\n    TODO: XXX\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "axis",
        "comment": " Create a single axis used to visualize a spatial scale mapping.\n\n    TODO: XXX\n\n",
        "type": "String -> Vega.Side -> List Vega.AxisProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "byField",
        "comment": " The field to be used when sorting.\n",
        "type": "Vega.Str -> Vega.SortProperty"
      },
      {
        "name": "cHCL",
        "comment": " Define a colour in HCL space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "cHSL",
        "comment": " Define a colour in HSL space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "cLAB",
        "comment": " Define a colour in CIELab space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "cRGB",
        "comment": " Define a colour in RGB space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "ci0",
        "comment": " An aggregating operation to calculate the lower boundary of the bootstrapped\n95% confidence interval of the mean field value\n",
        "type": "Vega.Operation"
      },
      {
        "name": "ci1",
        "comment": " An aggregating operation to calculate the upper boundary of the bootstrapped\n95% confidence interval of the mean field value\n",
        "type": "Vega.Operation"
      },
      {
        "name": "coField",
        "comment": " The fields to sort when defining a sorting operation. For details, see the\n[Vega documentation](https://vega.github.io/vega/docs/types/#Compare)\n",
        "type": "List Vega.Field -> Vega.Comparator"
      },
      {
        "name": "coOrder",
        "comment": " The ordering of the fields in a sorting operation. For details, see the\n[Vega documentation](https://vega.github.io/vega/docs/types/#Compare)\n",
        "type": "List Vega.Order -> Vega.Comparator"
      },
      {
        "name": "combineSpecs",
        "comment": " Combines a list of labelled specifications into a single specification that\nmay be passed to JavaScript for rendering. This is useful when you wish to create\na single page with multiple visualizations.\n\n    combineSpecs\n        [ ( \"vis1\", myFirstVis )\n        , ( \"vis2\", mySecondVis )\n        , ( \"vis3\", myOtherVis )\n        ]\n\n",
        "type": "List Vega.LabelledSpec -> Vega.Spec"
      },
      {
        "name": "count",
        "comment": " An aggregating operation to calculate the total number of values in a group.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "csv",
        "comment": " Indicates a CSV (comma separated value) format. Typically used when\nspecifying a data url.\n",
        "type": "Vega.Format"
      },
      {
        "name": "cubeHelix",
        "comment": " Cube-helix color interpolation. The parameter is a gamma value to control the\nbrighness of the colour trajectory.\n",
        "type": "Float -> Vega.CInterpolate"
      },
      {
        "name": "cubeHelixLong",
        "comment": " A long path cube-helix color interpolation. The parameter is a gamma value to control the\nbrighness of the colour trajectory.\n",
        "type": "Float -> Vega.CInterpolate"
      },
      {
        "name": "cursorLabel",
        "comment": " A convenience function for generating a text string representing a given cursor\ntype. This can be used instead of specifying an cursor type as a literal string\nto avoid problems of mistyping its name.\n\n    TODO: XXX Provide example\n\n",
        "type": "Vega.Cursor -> String"
      },
      {
        "name": "custom",
        "comment": " The properties with a named custom encoding set. To envoke the custom set a\nsignal event handler with an `encode` directive should be defined. For further\ndetails see the [Vega documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "String -> List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "dDataset",
        "comment": " Reference a dataset with the given name. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "String -> Vega.DataReference"
      },
      {
        "name": "dField",
        "comment": " Reference a data field with the given value. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "Vega.Str -> Vega.DataReference"
      },
      {
        "name": "dFields",
        "comment": " Reference a collection of data fields with the given values. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "Vega.Str -> Vega.DataReference"
      },
      {
        "name": "dFormat",
        "comment": " Specify the data format when loading or generating a data set. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "Vega.Format -> Vega.DataProperty"
      },
      {
        "name": "dNumbers",
        "comment": " A data value representing a list of numbers.\n",
        "type": "List Float -> Vega.DataValues"
      },
      {
        "name": "dOn",
        "comment": " Specify updates to insert, remove, and toggle data values, or clear the data in a data set\nwhen trigger conditions are met. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "List Vega.Trigger -> Vega.DataProperty"
      },
      {
        "name": "dReferences",
        "comment": " Reference a collection of nested data references. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "List Vega.DataReference -> Vega.DataReference"
      },
      {
        "name": "dSort",
        "comment": " Sort a data reference. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "List Vega.SortProperty -> Vega.DataReference"
      },
      {
        "name": "dSource",
        "comment": " Specify a named data source when generating a data set. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "String -> Vega.DataProperty"
      },
      {
        "name": "dStrs",
        "comment": " A data value representing a list of strings.\n",
        "type": "List String -> Vega.DataValues"
      },
      {
        "name": "dUrl",
        "comment": " Specify the name of a data file to be loaded when generating a data set. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "String -> Vega.DataProperty"
      },
      {
        "name": "dValue",
        "comment": " Specify some inline data value(s) when generating a data set. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "Vega.Value -> Vega.DataProperty"
      },
      {
        "name": "data",
        "comment": " Declare a named data set. Depending on the properties provided this may be\nfrom an external file, from a named data source or inline literal values. See the\n[Vega documentation](https://vega.github.io/vega/docs/data/#propertiess) for details.\n\n      dataSource\n          [ data \"pop\" [ dUrl \"data/population.json\" ]\n          , data \"popYear\" [ dSource \"pop\" ] |> transform [ TFilter (Expr \"datum.year == year\") ]\n          ]\n\n",
        "type": "String -> List Vega.DataProperty -> Vega.DataTable"
      },
      {
        "name": "dataColumn",
        "comment": " Create a column of data. A column has a name and a list of values. The final\nparameter is the list of any other columns to which this is added.\n\n     dataColumn \"Animal\" (dStrs [ \"Cat\", \"Dog\", \"Mouse\"]) []\n\n",
        "type": "String -> Vega.DataValues -> List Vega.DataColumn -> List Vega.DataColumn"
      },
      {
        "name": "dataFromColumns",
        "comment": " Declare a data table from a provided list of column values. Each column contains\nvalues of the same type, but columns each with a different type are permitted.\nColumns should all contain the same number of items; if not the dataset will be\ntruncated to the length of the shortest column. The first parameter should be the\nname given to the data table for later reference. An optional list for field\nformatting instructions can be provided in the second parameter or an empty list\nto use the default formatting. See the\n[Vega documentation](https://vega.github.io/vega/docs/data/#format)\nfor details.\nThe columns themselves are most easily generated with `dataColumn`\n\n    dataTable =\n        dataFromColumns \"animals\" [ parse [ ( \"Year\", FDate \"%Y\" ) ] ]\n            << dataColumn \"Animal\" (dStrs [ \"Fish\", \"Dog\", \"Cat\" ])\n            << dataColumn \"Age\" (dNumbers [ 28, 12, 6 ])\n            << dataColumn \"Year\" (dStrs [ \"2010\", \"2014\", \"2015\" ])\n\n",
        "type": "String -> List Vega.Format -> List Vega.DataColumn -> Vega.DataTable"
      },
      {
        "name": "dataFromRows",
        "comment": " Declare a data source from a provided list of row values. Each row contains\na list of tuples where the first value is a string representing the column name, and the\nsecond the column value for that row. Each column can have a value of a different type\nbut you must ensure that when subsequent rows are added, they match the types of previous\nvalues with shared column names. An optional list for field formatting instructions can\nbe provided in the first parameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\nThe rows themselves are most easily generated with `dataRow`. Note though that generally\nif you are creating data inline (as opposed to reading from a file), adding data by column\nin more efficent and less error-prone.\n\n    dataTable =\n        dataFromRows \"animals\" [ parse [ ( \"Year\", FDate \"%Y\" ) ] ]\n            << dataRow [ ( \"Animal\", vStr \"Fish\" ), ( \"Age\", vNumber 28 ), ( \"Year\", vStr \"2010\" ) ]\n            << dataRow [ ( \"Animal\", vStr \"Dog\" ), ( \"Age\", vNumber 12 ), ( \"Year\", vStr \"2014\" ) ]\n            << dataRow [ ( \"Animal\", vStr \"Cat\" ), ( \"Age\", vNumber 6 ), ( \"Year\", vStr \"2015\" ) ]\n\n",
        "type": "String -> List Vega.Format -> List Vega.DataRow -> Vega.DataTable"
      },
      {
        "name": "dataRow",
        "comment": " Create a row of data. A row comprises a list of (columnName,value) pairs.\nThe final parameter is the list of any other rows to which this is added.\n\n    TODO: Check this is the current syntax:\n    dataRow [(\"Animal\", vStr \"Fish\"),(\"Age\", vNumber 28),(\"Year\", vStr \"2010\")] []\n\n",
        "type": "List ( String, Vega.Value ) -> List Vega.DataRow -> List Vega.DataRow"
      },
      {
        "name": "dataSource",
        "comment": " Specify a data source to be used in the visualization. A data source is a collection\nof data tables which themselves may be generated inline, loaded from a URL or the\nresult of a transformation. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/data).\n\n      dataSource\n          [ data \"pop\" [ dUrl \"data/population.json\" ]\n          , data \"popYear\" [ dSource \"pop\" ] |> transform [ TFilter (Expr \"datum.year == year\") ]\n          , data \"males\" [ dSource \"popYear\" ] |> transform [ TFilter (Expr \"datum.sex == 1\") ]\n          , data \"females\" [ dSource \"popYear\" ] |> transform [ TFilter (Expr \"datum.sex == 2\") ]\n          , data \"ageGroups\" [ dSource \"pop\" ] |> transform [ TAggregate [ AgGroupBy [ FieldName \"age\" ] ] ]\n          ]\n\n",
        "type": "List Vega.DataTable -> Vega.Data"
      },
      {
        "name": "dirLabel",
        "comment": " A convenience function for generating a text string representing a given text\ndirection type. This can be used instead of specifying an direction type as a\nliteral string to avoid problems of mistyping its name.\n\n    TODO: XXX Provide example\n\n",
        "type": "Vega.TextDirection -> String"
      },
      {
        "name": "distinct",
        "comment": " An aggregating operation to calculate the number of distinct values in a group.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "dsv",
        "comment": " Indicates a DSV (delimited separated value) format with a custom delimeter.\nTypically used when specifying a data url.\n",
        "type": "String -> Vega.Format"
      },
      {
        "name": "enter",
        "comment": " The properties to be encoded when a mark item is first instantiated or a\nvisualization is resized. For further details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "exit",
        "comment": " The properties to be encoded when the data backing a mark item is removed.\nFor further details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "faField",
        "comment": " For pre-faceted data, the name of the data field containing an array of data\nvalues to use as the local partition. This is required if using pre-faceted data.\n",
        "type": "String -> Vega.Facet"
      },
      {
        "name": "faGroupBy",
        "comment": " For data-driven facets, an array of field names by which to partition the data.\nThis is required if using pre-faceted data.\n",
        "type": "List String -> Vega.Facet"
      },
      {
        "name": "foBool",
        "comment": " Indicate a boolean format for parsing data.\n",
        "type": "Vega.DataType"
      },
      {
        "name": "foDate",
        "comment": " Indicate a date format for parsing data. For details of how to specify a date, see\n[D3's formatting specifiers](https://github.com/d3/d3-time-format#locale_format). An empty\nstring will indicate detault date formatting should be applied, but note that care should be\ntaken as different browsers may have different default date parsing. Being explicit about the\ndate format is usually safer.\n",
        "type": "String -> Vega.DataType"
      },
      {
        "name": "foNumber",
        "comment": " Indicate a numeric format for parsing data.\n",
        "type": "Vega.DataType"
      },
      {
        "name": "foUtc",
        "comment": " Indicate a utc date format for parsing data. For details of how to specify a date, see\n[D3's formatting specifiers](https://github.com/d3/d3-time-format#locale_format). An empty\nstring will indicate detault date formatting should be applied, but note that care should be\ntaken as different browsers may have different default date parsing. Being explicit about the\ndate format is usually safer.\n",
        "type": "String -> Vega.DataType"
      },
      {
        "name": "hAlignLabel",
        "comment": " A convenience function for generating a text string representing a horizontal\nalignment type. This can be used instead of specifying an alignment type as a\nliteral string to avoid problems of mistyping its name.\n\n      MEncode [ Enter [ MAlign [hAlignLabel AlignCenter |> VString ] ] ]\n\n",
        "type": "Vega.HAlign -> String"
      },
      {
        "name": "hcl",
        "comment": " Hue-chroma-luminance color interpolation.\n",
        "type": "Vega.CInterpolate"
      },
      {
        "name": "hclLong",
        "comment": " A long-path hue-chroma-luminance color interpolation.\n",
        "type": "Vega.CInterpolate"
      },
      {
        "name": "height",
        "comment": " Override the default width of the visualization. If not specified the width\nwill be calculated based on the content of the visualization.\n\n    TODO: XXX\n\n",
        "type": "Float -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "hover",
        "comment": " The properties to be encoded when a pointer hovers over a mark item.\nFor further details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "hsl",
        "comment": " Hue-saturation-lightness color interpolation.\n",
        "type": "Vega.CInterpolate"
      },
      {
        "name": "hslLong",
        "comment": " A long-path hue-saturation-lightness color interpolation.\n",
        "type": "Vega.CInterpolate"
      },
      {
        "name": "iCheckbox",
        "comment": " A checkbox input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iColor",
        "comment": " A color selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iDate",
        "comment": " A date selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iDateTimeLocal",
        "comment": " A local data time selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iMonth",
        "comment": " A month selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iNumber",
        "comment": " A numeric input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iRadio",
        "comment": " A radio buttons input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iRange",
        "comment": " A slider input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iSelect",
        "comment": " A drop-down list input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iTel",
        "comment": " A telephone number input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iText",
        "comment": " A free text input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iTime",
        "comment": " A time selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iWeek",
        "comment": " A week selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "ifElse",
        "comment": " A conditional list of values depending on whether an expression (first parameter)\nevaluates as true. The second and third parameters represent the 'then' and 'else'\nbranches of the test.\n",
        "type": "String -> List Vega.Value -> List Vega.Value -> Vega.Value"
      },
      {
        "name": "keyValue",
        "comment": " Represents a custom key-value pair to be stored in an object.\n",
        "type": "String -> Vega.Value -> Vega.Value"
      },
      {
        "name": "lab",
        "comment": " CIE Luminance 'a' 'b' perceptual color interpolation.\n",
        "type": "Vega.CInterpolate"
      },
      {
        "name": "legend",
        "comment": " Create a single legend used to visualize a colour, size or shape mapping.\n\n    TODO: XXX\n\n",
        "type": "List Vega.LegendProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "legends",
        "comment": " Create legends used to visualize color, size and shape mappings.\n\n    TODO: XXX\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "mark",
        "comment": " Create a single mark definition.\n\n    TODO: XXX\n\n",
        "type": "Vega.Mark -> List Vega.TopMarkProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "markInterpolationLabel",
        "comment": " A convenience function for generating a text string representing a given mark\ninterpolation type. This can be used instead of specifying an interpolation type\nas a literal string to avoid problems of mistyping the interpolation name.\n\n    signals\n       << signal \"interp\" [ SiValue (markInterpolationLabel Linear |> Str) ]\n\n",
        "type": "Vega.MarkInterpolation -> String"
      },
      {
        "name": "markOrientationLabel",
        "comment": " A convenience function for generating a text string representing a given mark\norientation type. This can be used instead of specifying an orientation type as\na literal string to avoid problems of mistyping its name.\n\n    TODO: XXX Add example\n\n",
        "type": "Vega.MarkOrientation -> String"
      },
      {
        "name": "marks",
        "comment": " Create the marks used in the visualization.\n\n    TODO: XXX\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "maximum",
        "comment": " An aggregating operation to calculate the maximum value in a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "mean",
        "comment": " An aggregating operation to calculate the mean of a field. Synonymous with `average`.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "median",
        "comment": " An aggregating operation to calculate the median of a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "minimum",
        "comment": " An aggregating operation to calculate the minimum value in a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "missing",
        "comment": " An aggregating operation to calculate the number of missing values in a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "num",
        "comment": " A numeric value. This can be a numeric literal or a signal that generates a number.\n",
        "type": "Float -> Vega.Num"
      },
      {
        "name": "nums",
        "comment": " A list of number values. These can be numeric literals or signals that generate numbers.\n",
        "type": "List Float -> Vega.Num"
      },
      {
        "name": "on",
        "comment": " Adds list of triggers to the given data table or mark.\nFor details see the [Vega documentation](https://vega.github.io/vega/docs/triggers).\n",
        "type": "List Vega.Spec -> Vega.DataTable -> Vega.DataTable"
      },
      {
        "name": "op",
        "comment": " A sorting operation.\n",
        "type": "Vega.Operation -> Vega.SortProperty"
      },
      {
        "name": "padding",
        "comment": " Set the padding around the visualization in pixel units. The way padding is\ninterpreted will depend on the `autosize` properties. See the\n[Vega documentation](https://vega.github.io/vega/docs/specification/)\nfor details.\n\n    TODO: XXX\n\n",
        "type": "Vega.Padding -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "parse",
        "comment": " Indicates the parsing rules when processing some data text. The parameter is\na list of tuples where each corresponds to a field name paired with its desired\ndata type. Typically used when specifying a data url.\n",
        "type": "List ( String, Vega.DataType ) -> Vega.Format"
      },
      {
        "name": "q1",
        "comment": " An aggregating operation to calculate the lower quartile boundary of field values.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "q3",
        "comment": " An aggregating operation to calculate the lower quartile boundary of field values.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "rgb",
        "comment": " RGB color interpolation. The parameter is a gamma value to control the\nbrighness of the colour trajectory.\n",
        "type": "Float -> Vega.CInterpolate"
      },
      {
        "name": "sData",
        "comment": " Name of the source for a set of marks. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#from)\n",
        "type": "Vega.Str -> Vega.Source"
      },
      {
        "name": "sFacet",
        "comment": " Create a facet directive for a set of marks. The first parameter is the name\nof the source data set from which the facet partitions are to be generated. The\nsecond parameter is the name to be given to the generated facet source. Marks\ndefined with the faceted `group` mark can reference this data source name to\nvisualizae the local data partition. For details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#from)\n",
        "type": "String -> String -> List Vega.Facet -> Vega.Source"
      },
      {
        "name": "scale",
        "comment": " Create a single scale used to map data values to visual properties.\n\n    TODO: XXX\n\n",
        "type": "String -> List Vega.ScaleProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "scales",
        "comment": " Create the scales used to map data values to visual properties.\n\n    TODO: XXX\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "sigHeight",
        "comment": " Preset signal representing the current height of the visualization.\n",
        "type": "Vega.Value"
      },
      {
        "name": "sigPadding",
        "comment": " Preset signal representing the current padding setting of the visualization.\n",
        "type": "Vega.Value"
      },
      {
        "name": "sigWidth",
        "comment": " Preset signal representing the current width of the visualization.\n",
        "type": "Vega.Value"
      },
      {
        "name": "signal",
        "comment": " Create a single signal used to add a dynamic component to a visualization.\nFor further details see the [Vega documentation](https://vega.github.io/vega/docs/signals)\n\n    TODO: XXX\n\n",
        "type": "String -> List Vega.SignalProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "signals",
        "comment": " Create the signals used to add dynamism to the visualization.\nFor further details see the [Vega documentation](https://vega.github.io/vega/docs/signals)\n\n    TODO: XXX\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "stderr",
        "comment": " An aggregating operation to calculate the standard error of the values in a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "stdev",
        "comment": " An aggregating operation to calculate the sample standard deviation of the\nvalues in a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "stdevp",
        "comment": " An aggregating operation to calculate the population standard deviation of the\nvalues in a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "str",
        "comment": " A string value. This can be a string literal or a signal that generates a string.\n",
        "type": "String -> Vega.Str"
      },
      {
        "name": "strSignal",
        "comment": " Specify the name of signal that generates strings.\n",
        "type": "String -> Vega.Str"
      },
      {
        "name": "strokeCapLabel",
        "comment": " A convenience function for generating a text string representing a given\nstroke cap type. This can be used instead of specifying an stroke cap type\nas a literal string to avoid problems of mistyping its name.\n\n    signal \"strokeCap\" [ SiValue (strokeCapLabel CRound |> Str)]\n\n",
        "type": "Vega.StrokeCap -> String"
      },
      {
        "name": "strokeJoinLabel",
        "comment": " A convenience function for generating a text string representing a given\nstroke join type. This can be used instead of specifying an stroke join type\nas a literal string to avoid problems of mistyping its name.\n\nTODO: XXX Example\n\n",
        "type": "Vega.StrokeJoin -> String"
      },
      {
        "name": "strs",
        "comment": " A list of string values. These can be string literals or signals that generate strings.\n",
        "type": "List String -> Vega.Str"
      },
      {
        "name": "sum",
        "comment": " An aggregating operation to calculate the sum of the values in a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "symbolLabel",
        "comment": " A convenience function for generating a text string representing a given\nsymbol type. This can be used instead of specifying an symbol type as a literal\nstring to avoid problems of mistyping its name.\n\n    TODO: XXX Example\n\n",
        "type": "Vega.Symbol -> String"
      },
      {
        "name": "toVega",
        "comment": " Convert a list of Vega specifications into a single JSON object that may be\npassed to Vega for graphics generation.\nCurrently this is a placeholder only and is not available for use.\n",
        "type": "List ( Vega.VProperty, Vega.Spec ) -> Vega.Spec"
      },
      {
        "name": "topojsonFeature",
        "comment": " Indicates a topoJSON feature format. The first parameter should be the name\nof the object set to extract. Typically used when specifying a data url.\n",
        "type": "String -> Vega.Format"
      },
      {
        "name": "topojsonMesh",
        "comment": " Indicates a topoJSON mesh format. The first parameter should be the name\nof the object set to extract. Unlike the `topojsonFeature`, the corresponding\ngeo data are returned as a single, unified mesh instance, not as individual\nGeoJSON features. Typically used when specifying a data url.\n",
        "type": "String -> Vega.Format"
      },
      {
        "name": "transform",
        "comment": " Applies the given ordered list of transforms to the given data table.\nFor details see the [Vega documentation](https://vega.github.io/vega/docs/transforms).\n\n      dataSource\n          [ data \"pop\" [ dUrl \"data/population.json\" ]\n          , data \"popYear\" [ dSource \"pop\" ] |> transform [ TFilter (Expr \"datum.year == year\") ]\n          , data \"ageGroups\" [ dSource \"pop\" ] |> transform [ TAggregate [ AgGroupBy [ FieldName \"age\" ] ] ]\n          ]\n\n",
        "type": "List Vega.Transform -> Vega.DataTable -> Vega.DataTable"
      },
      {
        "name": "trigger",
        "comment": " Creates a trigger that may be applied to a data table or mark.\nThe first parameter is the name of the trigger and the second\na list of trigger actions.\n",
        "type": "String -> List Vega.TriggerProperty -> Vega.Trigger"
      },
      {
        "name": "tsv",
        "comment": " Indicates a TSV (tab separated value) format. Typically used when specifying\na data url.\n",
        "type": "Vega.Format"
      },
      {
        "name": "update",
        "comment": " The properties to be encoded when a mark item is updated such as in response\nto a signal change. For further details see the\n[Vega documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "utc",
        "comment": " Provides a UTC version of a given a time (coordinated universal time, independent\nof local time zones or daylight saving).\nFor example,\n\n    TODO: Provide example\n\n",
        "type": "Vega.TimeUnit -> Vega.TimeUnit"
      },
      {
        "name": "vAlignLabel",
        "comment": " A convenience function for generating a text string representing a vertical\nalignment type. This can be used instead of specifying an alignment type as a\nliteral string to avoid problems of mistyping its name.\n\n      MEncode [ Enter [MBaseline [ vAlignLabel AlignBottom |> VString ] ] ]\n\n",
        "type": "Vega.VAlign -> String"
      },
      {
        "name": "vBand",
        "comment": " A value representing a band number.\n",
        "type": "Float -> Vega.Value"
      },
      {
        "name": "vBool",
        "comment": " A value representing either True or False.\n",
        "type": "Bool -> Vega.Value"
      },
      {
        "name": "vBools",
        "comment": " A list of Boolean values.\n",
        "type": "List Bool -> Vega.Value"
      },
      {
        "name": "vColor",
        "comment": " A value representing a color.\n",
        "type": "Vega.ColorValue -> Vega.Value"
      },
      {
        "name": "vExponent",
        "comment": " A value representing an exponential value modifier.\n",
        "type": "Vega.Value -> Vega.Value"
      },
      {
        "name": "vField",
        "comment": " A value representing a field either by its name or indirectly via a signal,\nparent etc.\n",
        "type": "Vega.FieldValue -> Vega.Value"
      },
      {
        "name": "vMultiply",
        "comment": " A value representing a multiplication value modifier.\n",
        "type": "Vega.Value -> Vega.Value"
      },
      {
        "name": "vNull",
        "comment": " A representation of a null value\n",
        "type": "Vega.Value"
      },
      {
        "name": "vNumber",
        "comment": " A numeric value.\n",
        "type": "Float -> Vega.Value"
      },
      {
        "name": "vNumbers",
        "comment": " A value representing a list of numbers.\n",
        "type": "List Float -> Vega.Value"
      },
      {
        "name": "vObject",
        "comment": " Represents an object containing a list of values.\n",
        "type": "List Vega.Value -> Vega.Value"
      },
      {
        "name": "vOffset",
        "comment": " A value representing an additive value modifier.\n",
        "type": "Vega.Value -> Vega.Value"
      },
      {
        "name": "vRound",
        "comment": " A value representing a rounding value modifier. Rounding is applied after\nall other modifiers.\n",
        "type": "Bool -> Vega.Value"
      },
      {
        "name": "vScale",
        "comment": " A value representing a scale either by its name or indirectly via a signal,\nparent etc.\n",
        "type": "Vega.FieldValue -> Vega.Value"
      },
      {
        "name": "vSignal",
        "comment": " Specify the name of a generic signal.\n",
        "type": "String -> Vega.Value"
      },
      {
        "name": "vStr",
        "comment": " A string value. Used for providing parameters that can be of any value type.\n",
        "type": "String -> Vega.Value"
      },
      {
        "name": "vStrs",
        "comment": " A list of string values. Used for providing parameters that can be of any value type.\n",
        "type": "List String -> Vega.Value"
      },
      {
        "name": "vValues",
        "comment": " Represents an a list of values. This can be used for nesting collections of\nvalues.\n",
        "type": "List Vega.Value -> Vega.Value"
      },
      {
        "name": "valid",
        "comment": " An aggregating operation to calculate the number of valid values in a group.\nA valid value is considered one that is not `null`, not `undefined` and not `NaN`.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "variance",
        "comment": " An aggregating operation to calculate the sample variance of the values in\na field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "variancep",
        "comment": " An aggregating operation to calculate the population variance of the values\nin a field.\n",
        "type": "Vega.Operation"
      },
      {
        "name": "width",
        "comment": " Override the default width of the visualization. If not specified the width\nwill be calculated based on the content of the visualization.\n\n    TODO: XXX\n\n",
        "type": "Float -> ( Vega.VProperty, Vega.Spec )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "VegaLite",
    "comment": " This module allows you to create Vega-Lite specifications in Elm. A specification\nis stored as a JSON object which can be sent to a Vega-Lite compiler to generate\nthe graphics. While this a 'pure' Elm library, to create the graphical output you\nprobably want to send a Vega-Lite specification generated by `toVegaLite` via a\nport to some JavaScript that invokes the Vega-Lite runtime.\n\n\n# Creating A Vega-Lite Specification\n\n@docs toVegaLite\n@docs VLProperty\n@docs Spec\n@docs LabelledSpec\n@docs combineSpecs\n\n\n# Creating the Data Specification\n\nFunctions and types for declaring the input data to the visualization.\n\n@docs dataFromUrl\n@docs dataFromColumns\n@docs dataFromRows\n@docs dataFromJson\n@docs dataFromSource\n@docs datasets\n@docs dataColumn\n@docs dataRow\n@docs geometry\n@docs geoFeatureCollection\n@docs geometryCollection\n@docs Data\n@docs DataColumn\n@docs DataRow\n@docs Format\n@docs Geometry\n@docs DataType\n\n\n# Creating the Transform Specification\n\nFunctions and types for declaring the transformation rules that are applied to\ndata fields or geospatial coordinates before they are encoded visually.\n\n@docs transform\n@docs projection\n@docs ProjectionProperty\n@docs Projection\n@docs ClipRect\n\n\n## Aggregation\n\n@docs aggregate\n@docs Operation\n@docs opAs\n@docs timeUnitAs\n\n\n## Binning\n\n@docs bin\n@docs binAs\n@docs BinProperty\n\n\n## Data Calculation\n\n@docs calculateAs\n\n\n## Filtering\n\n@docs filter\n@docs Filter\n@docs FilterRange\n\n\n## Relational Joining (lookup)\n\n@docs lookup\n@docs lookupAs\n\n\n# Creating the Mark Specification\n\nTypes and functions for declaring the type of visual marks used in the visualization.\n\n@docs mark\n@docs Mark\n@docs MarkProperty\n@docs MarkOrientation\n@docs MarkInterpolation\n@docs Symbol\n@docs Cursor\n\n\n# Creating the Encoding Specification\n\nTypes and functions for declaring which data fields are mapped to which channels.\nChannels can include position on screen (e.g. `X`,`Y`), visual mark properties\n(e.g. color, size, stroke, shape), text, hyperlinks, ordering, level of detail and facets\n(for composed visualizations). All can be further customised via a series of properties\nfor determining how that encoding is implemented (e.g. scaling, sorting, spacing).\n\n@docs encoding\n@docs Measurement\n\n\n## Position channel\n\nRelates to where something appears in the visualization.\n\n@docs position\n@docs PositionChannel\n@docs Position\n@docs SortProperty\n@docs StackProperty\n@docs AxisProperty\n@docs OverlapStrategy\n@docs Side\n@docs HAlign\n@docs VAlign\n@docs FontWeight\n@docs TimeUnit\n@docs utc\n\n\n## Mark channels\n\nRelate to the appearance of the visual marks in the visualization such as their\ncolor or size.\n\n@docs size\n@docs color\n@docs fill\n@docs stroke\n@docs opacity\n@docs shape\n@docs MarkChannel\n@docs LegendProperty\n@docs Legend\n@docs LegendOrientation\n@docs LegendValues\n\n\n## Text Channels\n\nRelate to the appearance of the text and tooltip elements of the visualization.\n\n@docs text\n@docs tooltip\n@docs TextChannel\n\n\n## Hyperlink Channel\n\nRelates to a clickable URL destination of a mark. Note that unlike most other\nchannels, the hyperlink channel has no direct visual expression other than the\noption of changing the cursor style when hovering, so an encoding will usually\npair hyperlinks with other visual channels such as marks or texts.\n\n@docs hyperlink\n@docs HyperlinkChannel\n\n\n## Order channels\n\nChannels that relate to the order of data fields such as for sorting stacking order\nor order of data points in a connected scatterplot. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#order)\nfor further details.\n\n@docs order\n@docs OrderChannel\n\n\n## Facet channels\n\nChannels for faceting single plots into small multiples. Can be used to create\ntrellis plots or other arrangements in rows and columns. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#facet)\nfor further details. See also, 'faceted view composition' for a more flexible (but\nmore verbose) way of defining faceted views.\n\n@docs row\n@docs column\n\n\n## Level of detail Channel\n\nUsed for grouping data but without changing the visual appearance of a mark. When,\nfor example, a field is encoded by color, all data items with the same value for\nthat field are given the same color. When a detail channel encodes a field, all\ndata items with the same value are placed in the same group. This allows, for example\na line chart with multiple lines to be created – one for each group. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#detail)\nfor more information.\n\n@docs detail\n@docs DetailChannel\n\n\n## Scaling\n\nUsed to specify how the encoding of a data field should be applied.\n\n@docs ScaleProperty\n@docs Scale\n@docs categoricalDomainMap\n@docs domainRangeMap\n@docs ScaleDomain\n@docs ScaleRange\n@docs ScaleNice\n@docs CInterpolate\n\n\n# Creating view compositions\n\nViews can be combined to create more complex multiview displays. This may involve\nlayering views on top of each other (superposition) or laying them out in adjacent\nspaces (juxtaposition using `repeat`, `facet`, `hConcat` or `vConcat`). Where different\nviews have potentially conflicting channels (for example, two position scales in\na layered visualization) the rules for resolving them can be defined with `resolve`.\nFor details of creating composite views see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/composition.html)\n\n@docs layer\n@docs hConcat\n@docs vConcat\n@docs resolve\n@docs resolution\n@docs Resolve\n@docs Channel\n@docs Resolution\n\n\n## Faceted views\n\nThese are small multiples each of which show subsets of the same dataset. The specification\ndetermines which field should be used to determine subsets along with their spatial\narrangement (in rows or columns). For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html)\n\n@docs repeat\n@docs RepeatFields\n@docs facet\n@docs FacetMapping\n@docs FacetChannel\n@docs asSpec\n@docs specification\n@docs Arrangement\n@docs HeaderProperty\n\n\n# Creating Selections for Interaction\n\nSelections are the way in which interactions (such as clicking or dragging) can be\nresponded to in a visualization. They transform interactions into data queries.\nFor details, see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html).\n\n@docs selection\n@docs select\n@docs Selection\n@docs SelectionProperty\n@docs Binding\n@docs InputProperty\n@docs SelectionResolution\n@docs SelectionMarkProperty\n\n\n## Making conditional channel encodings\n\nSometimes it is useful to make channel encoding conditional on something. For example,\non the result of some interaction such as clicking or dragging or some data property\nsuch whether null or an outlier. `MSelectionCondition` (and `TSelectionCondition`) will\nencode a mark (or text) dependent on an interactive selection. `MDataCondition`\n(and `TDataCondition`) will encode it dependening on some data property.\n\nFor interaction, once a selection has been defined and named, supplying a set of\n`MSelectionCondition` encodings allow mark encodings to become dependent on that selection.\n`MSelectionCondition` is followed firstly by a Boolean expression relating to the\nselection upon which it is dependent, then an 'if' and an 'else' clause. Each clause\nis a list of mark field encodings that should be applied when the selection is true\n(the 'if clause') and when it is false (the 'else clause'). The color encoding below\nis saying \"whenever data marks are selected with an interval mouse drag, encode\nthe cylinder field with an ordinal color scheme, else make them grey\".\n\n      sel =\n          selection << select \"myBrush\" Interval []\n\n      enc =\n          encoding\n              << position X [ PName \"Horsepower\", PmType Quantitative ]\n              << position Y [ PName \"Miles_per_Gallon\", PmType Quantitative ]\n              << color\n                  [ MSelectionCondition (SelectionName \"myBrush\")\n                      [ MName \"Cylinders\", MmType Ordinal ]\n                      [ MString \"grey\" ]\n                  ]\n\nIn a similar way, `MDataCondition` will encocode a mark in one of two ways depending\non whether a predicate test is satisfied.\n\n      enc =\n          encoding\n              << position X [ PName \"IMDB_Rating\", PmType Quantitative ]\n              << position Y [ PName \"Rotten_Tomatoes_Rating\", PmType Quantitative ]\n                << color\n                    [ MDataCondition\n                        (Or (Expr \"datum.IMDB_Rating === null\")\n                            (Expr \"datum.Rotten_Tomatoes_Rating === null\")\n                        )\n                        [ MString \"#ddd\" ]\n                        [ MString \"#0099ee\" ]\n                    ]\n\nFor details, see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/condition.html).\n\n@docs BooleanOp\n\n\n# Global Configuration\n\nConfiguration options that affect the entire visualization. These are in addition\nto the data and transform options described above.\n\n@docs name\n@docs title\n@docs description\n@docs height\n@docs width\n@docs padding\n@docs autosize\n@docs background\n@docs configure\n@docs configuration\n@docs ConfigurationProperty\n@docs Autosize\n@docs Padding\n@docs AxisConfig\n@docs LegendConfig\n@docs ScaleConfig\n@docs TitleConfig\n@docs APosition\n@docs ViewConfig\n@docs RangeConfig\n\n\n# General Data types\n\nIn addition to more general data types like integers and string, the following types\ncan carry data used in specifications.\n\n@docs DataValue\n@docs DataValues\n@docs DateTime\n@docs MonthName\n@docs DayName\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Convenience type annotation label for use with data generation functions.\n\n    myRegion : List DataColumn -> Data\n    myRegion =\n        dataFromColumns []\n            << dataColumn \"easting\" (Numbers [ -3, 4, 4, -3, -3 ])\n            << dataColumn \"northing\" (Numbers [ 52, 52, 45, 45, 52 ])\n\n",
        "args": [],
        "type": "( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "DataColumn",
        "comment": " Represents a single column of data. Used when generating inline data with\n`dataColumn`.\n",
        "args": [],
        "type": "List VegaLite.LabelledSpec"
      },
      {
        "name": "DataRow",
        "comment": " Represents a single row of data. Used when generating inline data with\n`dataRow`.\n",
        "args": [],
        "type": "VegaLite.Spec"
      },
      {
        "name": "LabelledSpec",
        "comment": " Represents a named Vega-Lite specification, usually generated by an elm-vega\nfunction. You shouldn't need to create `LabelledSpec` tuples directly, but they\ncan be useful for type annotations.\n",
        "args": [],
        "type": "( String, VegaLite.Spec )"
      },
      {
        "name": "Spec",
        "comment": " Represents part or all of Vega-Lite specification. Specs can be (and usually\nare) nested. They can range from a single Boolean value up to the entire Vega-Lite\nspecification.\n",
        "args": [],
        "type": "Json.Encode.Value"
      }
    ],
    "types": [
      {
        "name": "APosition",
        "comment": " Indicates the anchor position for some text.\n",
        "args": [],
        "cases": [
          [
            "AStart",
            []
          ],
          [
            "AMiddle",
            []
          ],
          [
            "AEnd",
            []
          ]
        ]
      },
      {
        "name": "Arrangement",
        "comment": " Idenfies whether a repeated/faceted view is arranged in rows or columns.\n",
        "args": [],
        "cases": [
          [
            "Column",
            []
          ],
          [
            "Row",
            []
          ]
        ]
      },
      {
        "name": "Autosize",
        "comment": " Indicates the auto-sizing characteristics of the visualization such as amount\nof padding, whether it should fill the parent container etc. For more details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/size.html#autosize)\n",
        "args": [],
        "cases": [
          [
            "AContent",
            []
          ],
          [
            "AFit",
            []
          ],
          [
            "ANone",
            []
          ],
          [
            "APad",
            []
          ],
          [
            "APadding",
            []
          ],
          [
            "AResize",
            []
          ]
        ]
      },
      {
        "name": "AxisConfig",
        "comment": " Axis configuration options for customising all axes. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/axis.html#general-config)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "BandPosition",
            [
              "Float"
            ]
          ],
          [
            "Domain",
            [
              "Bool"
            ]
          ],
          [
            "DomainColor",
            [
              "String"
            ]
          ],
          [
            "DomainWidth",
            [
              "Float"
            ]
          ],
          [
            "MaxExtent",
            [
              "Float"
            ]
          ],
          [
            "MinExtent",
            [
              "Float"
            ]
          ],
          [
            "Grid",
            [
              "Bool"
            ]
          ],
          [
            "GridColor",
            [
              "String"
            ]
          ],
          [
            "GridDash",
            [
              "List Float"
            ]
          ],
          [
            "GridOpacity",
            [
              "Float"
            ]
          ],
          [
            "GridWidth",
            [
              "Float"
            ]
          ],
          [
            "Labels",
            [
              "Bool"
            ]
          ],
          [
            "LabelAngle",
            [
              "Float"
            ]
          ],
          [
            "LabelColor",
            [
              "String"
            ]
          ],
          [
            "LabelFont",
            [
              "String"
            ]
          ],
          [
            "LabelFontSize",
            [
              "Float"
            ]
          ],
          [
            "LabelLimit",
            [
              "Float"
            ]
          ],
          [
            "LabelOverlap",
            [
              "VegaLite.OverlapStrategy"
            ]
          ],
          [
            "LabelPadding",
            [
              "Float"
            ]
          ],
          [
            "ShortTimeLabels",
            [
              "Bool"
            ]
          ],
          [
            "Ticks",
            [
              "Bool"
            ]
          ],
          [
            "TickColor",
            [
              "String"
            ]
          ],
          [
            "TickRound",
            [
              "Bool"
            ]
          ],
          [
            "TickSize",
            [
              "Float"
            ]
          ],
          [
            "TickWidth",
            [
              "Float"
            ]
          ],
          [
            "TitleAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "TitleAngle",
            [
              "Float"
            ]
          ],
          [
            "TitleBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "TitleColor",
            [
              "String"
            ]
          ],
          [
            "TitleFont",
            [
              "String"
            ]
          ],
          [
            "TitleFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "TitleFontSize",
            [
              "Float"
            ]
          ],
          [
            "TitleLimit",
            [
              "Float"
            ]
          ],
          [
            "TitleMaxLength",
            [
              "Float"
            ]
          ],
          [
            "TitlePadding",
            [
              "Float"
            ]
          ],
          [
            "TitleX",
            [
              "Float"
            ]
          ],
          [
            "TitleY",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "AxisProperty",
        "comment": " Axis customisation properties. These are used for customising individual axes.\nTo configure all axes, use `AxisConfig` with a `configuration` instead. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/axis.html#axis-properties)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "AxDomain",
            [
              "Bool"
            ]
          ],
          [
            "AxFormat",
            [
              "String"
            ]
          ],
          [
            "AxGrid",
            [
              "Bool"
            ]
          ],
          [
            "AxLabelAngle",
            [
              "Float"
            ]
          ],
          [
            "AxLabelOverlap",
            [
              "VegaLite.OverlapStrategy"
            ]
          ],
          [
            "AxLabelPadding",
            [
              "Float"
            ]
          ],
          [
            "AxLabels",
            [
              "Bool"
            ]
          ],
          [
            "AxMaxExtent",
            [
              "Float"
            ]
          ],
          [
            "AxMinExtent",
            [
              "Float"
            ]
          ],
          [
            "AxOffset",
            [
              "Float"
            ]
          ],
          [
            "AxOrient",
            [
              "VegaLite.Side"
            ]
          ],
          [
            "AxPosition",
            [
              "Float"
            ]
          ],
          [
            "AxTicks",
            [
              "Bool"
            ]
          ],
          [
            "AxTickCount",
            [
              "Int"
            ]
          ],
          [
            "AxTickSize",
            [
              "Float"
            ]
          ],
          [
            "AxTitle",
            [
              "String"
            ]
          ],
          [
            "AxTitleAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "AxTitleAngle",
            [
              "Float"
            ]
          ],
          [
            "AxTitleMaxLength",
            [
              "Float"
            ]
          ],
          [
            "AxTitlePadding",
            [
              "Float"
            ]
          ],
          [
            "AxValues",
            [
              "List Float"
            ]
          ],
          [
            "AxDates",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "AxZIndex",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "BinProperty",
        "comment": " Type of binning property to customise. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bin.html) for\nmore details.\n",
        "args": [],
        "cases": [
          [
            "Base",
            [
              "Float"
            ]
          ],
          [
            "Divide",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "Extent",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "MaxBins",
            [
              "Int"
            ]
          ],
          [
            "MinStep",
            [
              "Float"
            ]
          ],
          [
            "Nice",
            [
              "Bool"
            ]
          ],
          [
            "Step",
            [
              "Float"
            ]
          ],
          [
            "Steps",
            [
              "List Float"
            ]
          ]
        ]
      },
      {
        "name": "Binding",
        "comment": " Describes the binding property of a selection based on some HTML input element\nsuch as a checkbox or radio button. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bind.html#scale-binding)\nand the [Vega input binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "args": [],
        "cases": [
          [
            "IRange",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ICheckbox",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IRadio",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ISelect",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IText",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "INumber",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IDate",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ITime",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IMonth",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IWeek",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IDateTimeLocal",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ITel",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IColor",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ]
        ]
      },
      {
        "name": "BooleanOp",
        "comment": " Used for creating logical compositions. For example\n\n    color\n        [ MSelectionCondition (Or (SelectionName \"alex\") (SelectionName \"morgan\"))\n            [ MAggregate Count, MName \"*\", MmType Quantitative ]\n            [ MString \"gray\" ]\n        ]\n\nLogical compositions can be nested to any level. For example\n\n    Not (And (Expr \"datum.IMDB_Rating === null\") (Expr \"datum.Rotten_Tomatoes_Rating === null\") )\n\n",
        "args": [],
        "cases": [
          [
            "Expr",
            [
              "String"
            ]
          ],
          [
            "Selection",
            [
              "String"
            ]
          ],
          [
            "SelectionName",
            [
              "String"
            ]
          ],
          [
            "And",
            [
              "VegaLite.BooleanOp",
              "VegaLite.BooleanOp"
            ]
          ],
          [
            "Or",
            [
              "VegaLite.BooleanOp",
              "VegaLite.BooleanOp"
            ]
          ],
          [
            "Not",
            [
              "VegaLite.BooleanOp"
            ]
          ]
        ]
      },
      {
        "name": "CInterpolate",
        "comment": " Indicates the type of color interpolation to apply, when mapping a data field\nonto a color scale. Note that color interpolation cannot be applied with the default\n`sequential` color scale, so additionally, you should set the `SType` to another\ncontinuous scale such as `linear`, `pow` etc.\n\nOf the interpolation options below `Rgb`, `CubeHelix` and `CubeHelixLong` also require\na `gamma` value (with 1 being a recommended default to provide). For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#continuous).\n\n",
        "args": [],
        "cases": [
          [
            "CubeHelix",
            [
              "Float"
            ]
          ],
          [
            "CubeHelixLong",
            [
              "Float"
            ]
          ],
          [
            "Hcl",
            []
          ],
          [
            "HclLong",
            []
          ],
          [
            "Hsl",
            []
          ],
          [
            "HslLong",
            []
          ],
          [
            "Lab",
            []
          ],
          [
            "Rgb",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Channel",
        "comment": " Indicates a channel type to be used in a resolution specification.\n",
        "args": [],
        "cases": [
          [
            "ChX",
            []
          ],
          [
            "ChY",
            []
          ],
          [
            "ChX2",
            []
          ],
          [
            "ChY2",
            []
          ],
          [
            "ChColor",
            []
          ],
          [
            "ChOpacity",
            []
          ],
          [
            "ChShape",
            []
          ],
          [
            "ChSize",
            []
          ]
        ]
      },
      {
        "name": "ClipRect",
        "comment": " Specifies a clipping rectangle in pixel units. In `LTRB` the order of the four\nnumbers that follow are 'left', 'top', 'right' then 'bottom'. Used when defining\nthe clip extent of a map projection.\n",
        "args": [],
        "cases": [
          [
            "NoClip",
            []
          ],
          [
            "LTRB",
            [
              "Float",
              "Float",
              "Float",
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "ConfigurationProperty",
        "comment": " Type of configuration property to customise. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/config.html)\nfor details.\n",
        "args": [],
        "cases": [
          [
            "AreaStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Autosize",
            [
              "List VegaLite.Autosize"
            ]
          ],
          [
            "Axis",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisX",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisY",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisLeft",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisRight",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisTop",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisBottom",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisBand",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "Background",
            [
              "String"
            ]
          ],
          [
            "BarStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "CircleStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "CountTitle",
            [
              "String"
            ]
          ],
          [
            "FieldTitle",
            [
              "VegaLite.FieldTitleProperty"
            ]
          ],
          [
            "Legend",
            [
              "List VegaLite.LegendConfig"
            ]
          ],
          [
            "LineStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "MarkStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "NamedStyle",
            [
              "String",
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "NumberFormat",
            [
              "String"
            ]
          ],
          [
            "Padding",
            [
              "VegaLite.Padding"
            ]
          ],
          [
            "PointStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Projection",
            [
              "List VegaLite.ProjectionProperty"
            ]
          ],
          [
            "Range",
            [
              "List VegaLite.RangeConfig"
            ]
          ],
          [
            "RectStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "RemoveInvalid",
            [
              "Bool"
            ]
          ],
          [
            "RuleStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Scale",
            [
              "List VegaLite.ScaleConfig"
            ]
          ],
          [
            "SelectionStyle",
            [
              "List ( VegaLite.Selection, List VegaLite.SelectionProperty )"
            ]
          ],
          [
            "SquareStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Stack",
            [
              "VegaLite.StackProperty"
            ]
          ],
          [
            "TextStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "TickStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "TitleStyle",
            [
              "List VegaLite.TitleConfig"
            ]
          ],
          [
            "TimeFormat",
            [
              "String"
            ]
          ],
          [
            "View",
            [
              "List VegaLite.ViewConfig"
            ]
          ]
        ]
      },
      {
        "name": "Cursor",
        "comment": " Represents the type of cursor to display. For an explanation of each type,\nsee the [CSS documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Keyword%20values)\n",
        "args": [],
        "cases": [
          [
            "CAuto",
            []
          ],
          [
            "CDefault",
            []
          ],
          [
            "CNone",
            []
          ],
          [
            "CContextMenu",
            []
          ],
          [
            "CHelp",
            []
          ],
          [
            "CPointer",
            []
          ],
          [
            "CProgress",
            []
          ],
          [
            "CWait",
            []
          ],
          [
            "CCell",
            []
          ],
          [
            "CCrosshair",
            []
          ],
          [
            "CText",
            []
          ],
          [
            "CVerticalText",
            []
          ],
          [
            "CAlias",
            []
          ],
          [
            "CCopy",
            []
          ],
          [
            "CMove",
            []
          ],
          [
            "CNoDrop",
            []
          ],
          [
            "CNotAllowed",
            []
          ],
          [
            "CAllScroll",
            []
          ],
          [
            "CColResize",
            []
          ],
          [
            "CRowResize",
            []
          ],
          [
            "CNResize",
            []
          ],
          [
            "CEResize",
            []
          ],
          [
            "CSResize",
            []
          ],
          [
            "CWResize",
            []
          ],
          [
            "CNEResize",
            []
          ],
          [
            "CNWResize",
            []
          ],
          [
            "CSEResize",
            []
          ],
          [
            "CSWResize",
            []
          ],
          [
            "CEWResize",
            []
          ],
          [
            "CNSResize",
            []
          ],
          [
            "CNESWResize",
            []
          ],
          [
            "CNWSEResize",
            []
          ],
          [
            "CZoomIn",
            []
          ],
          [
            "CZoomOut",
            []
          ],
          [
            "CGrab",
            []
          ],
          [
            "CGrabbing",
            []
          ]
        ]
      },
      {
        "name": "DataType",
        "comment": " Indicates the type of data to be parsed when reading input data. For `FoDate`\nand `FoUtc`, the formatting specification can be specified using\n[D3's formatting specifiers](https://vega.github.io/vega-lite/docs/data.html#format)\nor left as an empty string if default date formatting is to be applied. Care should\nbe taken when assuming default parsing of dates because different browsers can\nparse dates differently. Being explicit about the date format is usually safer.\n",
        "args": [],
        "cases": [
          [
            "FoNumber",
            []
          ],
          [
            "FoBoolean",
            []
          ],
          [
            "FoDate",
            [
              "String"
            ]
          ],
          [
            "FoUtc",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "DataValue",
        "comment": " A single data value. This is used when a function can accept values of different\ntypes (e.g. either a number or a string).\n",
        "args": [],
        "cases": [
          [
            "Boolean",
            [
              "Bool"
            ]
          ],
          [
            "DateTime",
            [
              "List VegaLite.DateTime"
            ]
          ],
          [
            "Number",
            [
              "Float"
            ]
          ],
          [
            "Str",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "DataValues",
        "comment": " A list of data values. This is used when a function can accept lists of\ndifferent types (e.g. either a list of numbers or a list of strings).\n",
        "args": [],
        "cases": [
          [
            "Booleans",
            [
              "List Bool"
            ]
          ],
          [
            "DateTimes",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "Numbers",
            [
              "List Float"
            ]
          ],
          [
            "Strings",
            [
              "List String"
            ]
          ]
        ]
      },
      {
        "name": "DateTime",
        "comment": " Allows a date or time to be represented. This is typically part of a list of\n`DateTime` items to provide a specific point in time. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/types.html#datetime).\n",
        "args": [],
        "cases": [
          [
            "DTYear",
            [
              "Int"
            ]
          ],
          [
            "DTQuarter",
            [
              "Int"
            ]
          ],
          [
            "DTMonth",
            [
              "VegaLite.MonthName"
            ]
          ],
          [
            "DTDate",
            [
              "Int"
            ]
          ],
          [
            "DTDay",
            [
              "VegaLite.DayName"
            ]
          ],
          [
            "DTHours",
            [
              "Int"
            ]
          ],
          [
            "DTMinutes",
            [
              "Int"
            ]
          ],
          [
            "DTSeconds",
            [
              "Int"
            ]
          ],
          [
            "DTMilliseconds",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "DayName",
        "comment": " Identifies the day of the week.\n",
        "args": [],
        "cases": [
          [
            "Mon",
            []
          ],
          [
            "Tue",
            []
          ],
          [
            "Wed",
            []
          ],
          [
            "Thu",
            []
          ],
          [
            "Fri",
            []
          ],
          [
            "Sat",
            []
          ],
          [
            "Sun",
            []
          ]
        ]
      },
      {
        "name": "DetailChannel",
        "comment": " Level of detail channel properties used for creating a grouped channel encoding.\n",
        "args": [],
        "cases": [
          [
            "DName",
            [
              "String"
            ]
          ],
          [
            "DmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "DBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "DTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "DAggregate",
            [
              "VegaLite.Operation"
            ]
          ]
        ]
      },
      {
        "name": "FacetChannel",
        "comment": " Types of facet channel property used for creating a composed facet view of small\nmultiples.\n",
        "args": [],
        "cases": [
          [
            "FName",
            [
              "String"
            ]
          ],
          [
            "FmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "FBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "FAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "FTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "FHeader",
            [
              "List VegaLite.HeaderProperty"
            ]
          ]
        ]
      },
      {
        "name": "FacetMapping",
        "comment": " Provides details of the mapping between a row or column and its field\ndefinitions in a set of faceted small multiples. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html#mapping)\n",
        "args": [],
        "cases": [
          [
            "ColumnBy",
            [
              "List VegaLite.FacetChannel"
            ]
          ],
          [
            "RowBy",
            [
              "List VegaLite.FacetChannel"
            ]
          ]
        ]
      },
      {
        "name": "Filter",
        "comment": " Type of filtering operation. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/filter.html)\nfor details.\n",
        "args": [],
        "cases": [
          [
            "FEqual",
            [
              "String",
              "VegaLite.DataValue"
            ]
          ],
          [
            "FExpr",
            [
              "String"
            ]
          ],
          [
            "FCompose",
            [
              "VegaLite.BooleanOp"
            ]
          ],
          [
            "FSelection",
            [
              "String"
            ]
          ],
          [
            "FOneOf",
            [
              "String",
              "VegaLite.DataValues"
            ]
          ],
          [
            "FRange",
            [
              "String",
              "VegaLite.FilterRange"
            ]
          ]
        ]
      },
      {
        "name": "FilterRange",
        "comment": " A pair of filter range data values. The first argument is the inclusive minimum\nvale to accept and the second the inclusive maximum.\n",
        "args": [],
        "cases": [
          [
            "NumberRange",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "DateRange",
            [
              "List VegaLite.DateTime",
              "List VegaLite.DateTime"
            ]
          ]
        ]
      },
      {
        "name": "FontWeight",
        "comment": " Indicates the weight options for a font.\n",
        "args": [],
        "cases": [
          [
            "Bold",
            []
          ],
          [
            "Bolder",
            []
          ],
          [
            "Lighter",
            []
          ],
          [
            "Normal",
            []
          ],
          [
            "W100",
            []
          ],
          [
            "W200",
            []
          ],
          [
            "W300",
            []
          ],
          [
            "W400",
            []
          ],
          [
            "W500",
            []
          ],
          [
            "W600",
            []
          ],
          [
            "W700",
            []
          ],
          [
            "W800",
            []
          ],
          [
            "W900",
            []
          ]
        ]
      },
      {
        "name": "Format",
        "comment": " Specifies the type of format a data source uses. If the format is indicated by\nthe file name extension (`.tsv`, `.csv`, `.json`) there is no need to indicate the\nformat explicitly. However this can be useful if (a) the filename extension does not\nindicate type (e.g. `.txt`) or you wish to customise the parsing of a file. For\nexample, when specifying the `JSON` format, its parameter indicates the name of\nproperty field containing the attribute data to extract. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format).\n",
        "args": [],
        "cases": [
          [
            "JSON",
            [
              "String"
            ]
          ],
          [
            "CSV",
            []
          ],
          [
            "TSV",
            []
          ],
          [
            "TopojsonFeature",
            [
              "String"
            ]
          ],
          [
            "TopojsonMesh",
            [
              "String"
            ]
          ],
          [
            "Parse",
            [
              "List ( String, VegaLite.DataType )"
            ]
          ]
        ]
      },
      {
        "name": "Geometry",
        "comment": " Specifies the type and content of geometry specifications for programatically\ncreating GeoShapes. These can be mapped to the\n[GeoJson geometry object types](https://tools.ietf.org/html/rfc7946#section-3.1)\nwhere the pluralised type names refer to their `Multi` prefixed equivalent in the\nGeoJSON specification.\n",
        "args": [],
        "cases": [
          [
            "GeoPoint",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "GeoPoints",
            [
              "List ( Float, Float )"
            ]
          ],
          [
            "GeoLine",
            [
              "List ( Float, Float )"
            ]
          ],
          [
            "GeoLines",
            [
              "List (List ( Float, Float ))"
            ]
          ],
          [
            "GeoPolygon",
            [
              "List (List ( Float, Float ))"
            ]
          ],
          [
            "GeoPolygons",
            [
              "List (List (List ( Float, Float )))"
            ]
          ]
        ]
      },
      {
        "name": "HAlign",
        "comment": " Indicates the horizontal alignment of some text such as on an axis or legend.\n",
        "args": [],
        "cases": [
          [
            "AlignCenter",
            []
          ],
          [
            "AlignLeft",
            []
          ],
          [
            "AlignRight",
            []
          ]
        ]
      },
      {
        "name": "HeaderProperty",
        "comment": " Represents a facet header property. For details, see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html#header)\n",
        "args": [],
        "cases": [
          [
            "HFormat",
            [
              "String"
            ]
          ],
          [
            "HTitle",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "HyperlinkChannel",
        "comment": " Types of hyperlink channel property used for linking marks or text to URLs.\n",
        "args": [],
        "cases": [
          [
            "HName",
            [
              "String"
            ]
          ],
          [
            "HRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "HmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "HBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "HAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "HTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "HSelectionCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.HyperlinkChannel",
              "List VegaLite.HyperlinkChannel"
            ]
          ],
          [
            "HDataCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.HyperlinkChannel",
              "List VegaLite.HyperlinkChannel"
            ]
          ],
          [
            "HString",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "InputProperty",
        "comment": " GUI Input properties. The type of relevant property will depend on the type of\ninput element selected. For example an `InRange` (slider) can have numeric min,\nmax and step values; InSelect (selector) has a list of selection label options.\nFor details see the\n[Vega input element binding documentation](https://vega.github.io/vega/docs/signals/#bind).\nThe `debounce` property, available for all input types allows a delay in input event\nhandling to be added in order to avoid unnecessary event broadcasting. The `Element`\nproperty is an optional CSS selector indicating the parent element to which the\ninput element should be added. This allows the option of the input element to be\noutside the visualization container.\n",
        "args": [],
        "cases": [
          [
            "Debounce",
            [
              "Float"
            ]
          ],
          [
            "Element",
            [
              "String"
            ]
          ],
          [
            "InOptions",
            [
              "List String"
            ]
          ],
          [
            "InMin",
            [
              "Float"
            ]
          ],
          [
            "InMax",
            [
              "Float"
            ]
          ],
          [
            "InName",
            [
              "String"
            ]
          ],
          [
            "InStep",
            [
              "Float"
            ]
          ],
          [
            "InPlaceholder",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "Legend",
        "comment": " Indicates the type of legend to create. Gradient legends are usually used for\ncontinuous quantitative data while symbol legends used for categorical data.\n",
        "args": [],
        "cases": [
          [
            "Gradient",
            []
          ],
          [
            "Symbol",
            []
          ]
        ]
      },
      {
        "name": "LegendConfig",
        "comment": " Legend configuration options. For more detail see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/legend.html#config).\n",
        "args": [],
        "cases": [
          [
            "CornerRadius",
            [
              "Float"
            ]
          ],
          [
            "FillColor",
            [
              "String"
            ]
          ],
          [
            "Orient",
            [
              "VegaLite.LegendOrientation"
            ]
          ],
          [
            "Offset",
            [
              "Float"
            ]
          ],
          [
            "StrokeColor",
            [
              "String"
            ]
          ],
          [
            "LeStrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "LeStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "LePadding",
            [
              "Float"
            ]
          ],
          [
            "GradientLabelBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "GradientLabelLimit",
            [
              "Float"
            ]
          ],
          [
            "GradientLabelOffset",
            [
              "Float"
            ]
          ],
          [
            "GradientStrokeColor",
            [
              "String"
            ]
          ],
          [
            "GradientStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "GradientHeight",
            [
              "Float"
            ]
          ],
          [
            "GradientWidth",
            [
              "Float"
            ]
          ],
          [
            "LeLabelAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "LeLabelBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "LeLabelColor",
            [
              "String"
            ]
          ],
          [
            "LeLabelFont",
            [
              "String"
            ]
          ],
          [
            "LeLabelFontSize",
            [
              "Float"
            ]
          ],
          [
            "LeLabelLimit",
            [
              "Float"
            ]
          ],
          [
            "LeLabelOffset",
            [
              "Float"
            ]
          ],
          [
            "LeShortTimeLabels",
            [
              "Bool"
            ]
          ],
          [
            "EntryPadding",
            [
              "Float"
            ]
          ],
          [
            "SymbolColor",
            [
              "String"
            ]
          ],
          [
            "SymbolType",
            [
              "VegaLite.Symbol"
            ]
          ],
          [
            "SymbolSize",
            [
              "Float"
            ]
          ],
          [
            "SymbolStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "LeTitleAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "LeTitleBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "LeTitleColor",
            [
              "String"
            ]
          ],
          [
            "LeTitleFont",
            [
              "String"
            ]
          ],
          [
            "LeTitleFontSize",
            [
              "Float"
            ]
          ],
          [
            "LeTitleFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "LeTitleLimit",
            [
              "Float"
            ]
          ],
          [
            "LeTitlePadding",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "LegendOrientation",
        "comment": " Indicates the legend orientation. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/legend.html#config)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "BottomLeft",
            []
          ],
          [
            "BottomRight",
            []
          ],
          [
            "Left",
            []
          ],
          [
            "None",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "TopLeft",
            []
          ],
          [
            "TopRight",
            []
          ]
        ]
      },
      {
        "name": "LegendProperty",
        "comment": " Legend properties. For more detail see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/legend.html#legend-properties).\n",
        "args": [],
        "cases": [
          [
            "LEntryPadding",
            [
              "Float"
            ]
          ],
          [
            "LFormat",
            [
              "String"
            ]
          ],
          [
            "LOffset",
            [
              "Float"
            ]
          ],
          [
            "LOrient",
            [
              "VegaLite.LegendOrientation"
            ]
          ],
          [
            "LPadding",
            [
              "Float"
            ]
          ],
          [
            "LTickCount",
            [
              "Float"
            ]
          ],
          [
            "LTitle",
            [
              "String"
            ]
          ],
          [
            "LType",
            [
              "VegaLite.Legend"
            ]
          ],
          [
            "LValues",
            [
              "VegaLite.LegendValues"
            ]
          ],
          [
            "LZIndex",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "LegendValues",
        "comment": " A list of data values suitable for setting legend values.\n",
        "args": [],
        "cases": [
          [
            "LDateTimes",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "LNumbers",
            [
              "List Float"
            ]
          ],
          [
            "LStrings",
            [
              "List String"
            ]
          ]
        ]
      },
      {
        "name": "Mark",
        "comment": " Type of visual mark used to represent data in the visualization.\n",
        "args": [],
        "cases": [
          [
            "Area",
            []
          ],
          [
            "Bar",
            []
          ],
          [
            "Circle",
            []
          ],
          [
            "Geoshape",
            []
          ],
          [
            "Line",
            []
          ],
          [
            "Point",
            []
          ],
          [
            "Rect",
            []
          ],
          [
            "Rule",
            []
          ],
          [
            "Square",
            []
          ],
          [
            "Text",
            []
          ],
          [
            "Tick",
            []
          ]
        ]
      },
      {
        "name": "MarkChannel",
        "comment": " Mark channel properties used for creating a mark channel encoding. Providing\nan empty list to `MScale`, or `MLegend` removes the scaling and legend respectively.\n",
        "args": [],
        "cases": [
          [
            "MName",
            [
              "String"
            ]
          ],
          [
            "MRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "MmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "MScale",
            [
              "List VegaLite.ScaleProperty"
            ]
          ],
          [
            "MBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "MTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "MAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "MLegend",
            [
              "List VegaLite.LegendProperty"
            ]
          ],
          [
            "MSelectionCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.MarkChannel",
              "List VegaLite.MarkChannel"
            ]
          ],
          [
            "MDataCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.MarkChannel",
              "List VegaLite.MarkChannel"
            ]
          ],
          [
            "MPath",
            [
              "String"
            ]
          ],
          [
            "MNumber",
            [
              "Float"
            ]
          ],
          [
            "MString",
            [
              "String"
            ]
          ],
          [
            "MBoolean",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "MarkInterpolation",
        "comment": " Indicates mark interpolation style. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/mark.html#mark-def)\nfor details.\n",
        "args": [],
        "cases": [
          [
            "Basis",
            []
          ],
          [
            "BasisClosed",
            []
          ],
          [
            "BasisOpen",
            []
          ],
          [
            "Bundle",
            []
          ],
          [
            "Cardinal",
            []
          ],
          [
            "CardinalClosed",
            []
          ],
          [
            "CardinalOpen",
            []
          ],
          [
            "Linear",
            []
          ],
          [
            "LinearClosed",
            []
          ],
          [
            "Monotone",
            []
          ],
          [
            "StepAfter",
            []
          ],
          [
            "StepBefore",
            []
          ],
          [
            "Stepwise",
            []
          ]
        ]
      },
      {
        "name": "MarkOrientation",
        "comment": " Indicates desired orientation of a mark (e.g. horizontally or vertically\noriented bars.)\n",
        "args": [],
        "cases": [
          [
            "Horizontal",
            []
          ],
          [
            "Vertical",
            []
          ]
        ]
      },
      {
        "name": "MarkProperty",
        "comment": " Properties for customising the appearance of a mark. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/mark.html#config).\n",
        "args": [],
        "cases": [
          [
            "MAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "MAngle",
            [
              "Float"
            ]
          ],
          [
            "MBandSize",
            [
              "Float"
            ]
          ],
          [
            "MBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "MBinSpacing",
            [
              "Float"
            ]
          ],
          [
            "MClip",
            [
              "Bool"
            ]
          ],
          [
            "MColor",
            [
              "String"
            ]
          ],
          [
            "MCursor",
            [
              "VegaLite.Cursor"
            ]
          ],
          [
            "MContinuousBandSize",
            [
              "Float"
            ]
          ],
          [
            "MDiscreteBandSize",
            [
              "Float"
            ]
          ],
          [
            "MdX",
            [
              "Float"
            ]
          ],
          [
            "MdY",
            [
              "Float"
            ]
          ],
          [
            "MFill",
            [
              "String"
            ]
          ],
          [
            "MFilled",
            [
              "Bool"
            ]
          ],
          [
            "MFillOpacity",
            [
              "Float"
            ]
          ],
          [
            "MFont",
            [
              "String"
            ]
          ],
          [
            "MFontSize",
            [
              "Float"
            ]
          ],
          [
            "MFontStyle",
            [
              "String"
            ]
          ],
          [
            "MFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "MInterpolate",
            [
              "VegaLite.MarkInterpolation"
            ]
          ],
          [
            "MOpacity",
            [
              "Float"
            ]
          ],
          [
            "MOrient",
            [
              "VegaLite.MarkOrientation"
            ]
          ],
          [
            "MRadius",
            [
              "Float"
            ]
          ],
          [
            "MShape",
            [
              "VegaLite.Symbol"
            ]
          ],
          [
            "MShortTimeLabels",
            [
              "Bool"
            ]
          ],
          [
            "MSize",
            [
              "Float"
            ]
          ],
          [
            "MStroke",
            [
              "String"
            ]
          ],
          [
            "MStrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "MStrokeDashOffset",
            [
              "Float"
            ]
          ],
          [
            "MStrokeOpacity",
            [
              "Float"
            ]
          ],
          [
            "MStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "MStyle",
            [
              "List String"
            ]
          ],
          [
            "MTension",
            [
              "Float"
            ]
          ],
          [
            "MText",
            [
              "String"
            ]
          ],
          [
            "MTheta",
            [
              "Float"
            ]
          ],
          [
            "MThickness",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Measurement",
        "comment": " Type of measurement to be associated with some channel. `Nominal` data are\ncategories identified by name alone and which have no intrinsic order. `Ordinal`\ndata are also categories, but ones which have some natural order. `Quantitative`\ndata are numeric measurements typically on a continuous scale. `Temporal` data\ndescribe time.\n\nGeospatial position encoding (`Longitude` and `Latitude`) should specify the `PmType`\nas `Quantitative`. Geographically referenced features encoded as `shape` marks\nshould specify `MmType` as `GeoFeature` (Vega-Lite currently refers to this type\nas [geojson](https://vega.github.io/vega-lite/docs/encoding.html)).\n\n",
        "args": [],
        "cases": [
          [
            "Nominal",
            []
          ],
          [
            "Ordinal",
            []
          ],
          [
            "Quantitative",
            []
          ],
          [
            "Temporal",
            []
          ],
          [
            "GeoFeature",
            []
          ]
        ]
      },
      {
        "name": "MonthName",
        "comment": " Idntifies a month of the year.\n",
        "args": [],
        "cases": [
          [
            "Jan",
            []
          ],
          [
            "Feb",
            []
          ],
          [
            "Mar",
            []
          ],
          [
            "Apr",
            []
          ],
          [
            "May",
            []
          ],
          [
            "Jun",
            []
          ],
          [
            "Jul",
            []
          ],
          [
            "Aug",
            []
          ],
          [
            "Sep",
            []
          ],
          [
            "Oct",
            []
          ],
          [
            "Nov",
            []
          ],
          [
            "Dec",
            []
          ]
        ]
      },
      {
        "name": "Operation",
        "comment": " Type of aggregation operation. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/aggregate.html#ops)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "ArgMax",
            []
          ],
          [
            "ArgMin",
            []
          ],
          [
            "Average",
            []
          ],
          [
            "CI0",
            []
          ],
          [
            "CI1",
            []
          ],
          [
            "Count",
            []
          ],
          [
            "Distinct",
            []
          ],
          [
            "Max",
            []
          ],
          [
            "Mean",
            []
          ],
          [
            "Median",
            []
          ],
          [
            "Min",
            []
          ],
          [
            "Missing",
            []
          ],
          [
            "Q1",
            []
          ],
          [
            "Q3",
            []
          ],
          [
            "Stderr",
            []
          ],
          [
            "Stdev",
            []
          ],
          [
            "StdevP",
            []
          ],
          [
            "Sum",
            []
          ],
          [
            "Valid",
            []
          ],
          [
            "Variance",
            []
          ],
          [
            "VarianceP",
            []
          ]
        ]
      },
      {
        "name": "OrderChannel",
        "comment": " Properties of an ordering channel used for sorting data fields.\n",
        "args": [],
        "cases": [
          [
            "OName",
            [
              "String"
            ]
          ],
          [
            "ORepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "OmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "OBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "OAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "OTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "OSort",
            [
              "List VegaLite.SortProperty"
            ]
          ]
        ]
      },
      {
        "name": "OverlapStrategy",
        "comment": " Type of overlap strategy to be applied when there is not space to show all items\non an axis. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/axis.html#labels)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "ONone",
            []
          ],
          [
            "OParity",
            []
          ],
          [
            "OGreedy",
            []
          ]
        ]
      },
      {
        "name": "Padding",
        "comment": " Represents padding dimensions in pixel units. `PSize` will set the same value\non all four edges of a rectangular container while `PEdges` can be used to specify\ndifferent sizes on each edge in order _left_, _top_, _right_, _bottom_.\n",
        "args": [],
        "cases": [
          [
            "PSize",
            [
              "Float"
            ]
          ],
          [
            "PEdges",
            [
              "Float",
              "Float",
              "Float",
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Position",
        "comment": " Type of position channel, `X` and `Y` represent horizontal and vertical axis\ndimensions on a plane and `X2` and `Y2` represent secondary axis dimensions where\ntwo scales are overlaid in the same space. Geographic positions represented by\nlongitude and latiutude values are identified with `Longitude`, `Latitude` and\ntheir respective secondary equivalents. Such geographic position channels are\nsubject to a map projection before being placed graphically.\n",
        "args": [],
        "cases": [
          [
            "X",
            []
          ],
          [
            "Y",
            []
          ],
          [
            "X2",
            []
          ],
          [
            "Y2",
            []
          ],
          [
            "Longitude",
            []
          ],
          [
            "Latitude",
            []
          ],
          [
            "Longitude2",
            []
          ],
          [
            "Latitude2",
            []
          ]
        ]
      },
      {
        "name": "PositionChannel",
        "comment": " Position channel properties used for creating a position channel encoding.\n",
        "args": [],
        "cases": [
          [
            "PName",
            [
              "String"
            ]
          ],
          [
            "PRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "PmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "PBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "PTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "PAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "PScale",
            [
              "List VegaLite.ScaleProperty"
            ]
          ],
          [
            "PAxis",
            [
              "List VegaLite.AxisProperty"
            ]
          ],
          [
            "PSort",
            [
              "List VegaLite.SortProperty"
            ]
          ],
          [
            "PStack",
            [
              "VegaLite.StackProperty"
            ]
          ]
        ]
      },
      {
        "name": "Projection",
        "comment": " Types of geographic map projection. These are based on a subset of those provided\nby the [d3-geo library](https://github.com/d3/d3-geo). For details of available\nprojections see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\nAdditional custom projections from d3 can be defined via the\n[Vega API](https://vega.github.io/vega/docs/projections/#register) and called from\nwithin Elm-Vega setting the projection to `Custom proj` where `proj` is the name\nof the D3 projection to use (e.g. `winkel3`).\n",
        "args": [],
        "cases": [
          [
            "Albers",
            []
          ],
          [
            "AlbersUsa",
            []
          ],
          [
            "AzimuthalEqualArea",
            []
          ],
          [
            "AzimuthalEquidistant",
            []
          ],
          [
            "ConicConformal",
            []
          ],
          [
            "ConicEqualArea",
            []
          ],
          [
            "ConicEquidistant",
            []
          ],
          [
            "Custom",
            [
              "String"
            ]
          ],
          [
            "Equirectangular",
            []
          ],
          [
            "Gnomonic",
            []
          ],
          [
            "Mercator",
            []
          ],
          [
            "Orthographic",
            []
          ],
          [
            "Stereographic",
            []
          ],
          [
            "TransverseMercator",
            []
          ]
        ]
      },
      {
        "name": "ProjectionProperty",
        "comment": " Properties for customising a geospatial projection that converts longitude/latitude\npairs into planar (x,y) coordinate pairs for rendering and query. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/projection.html).\n",
        "args": [],
        "cases": [
          [
            "PType",
            [
              "VegaLite.Projection"
            ]
          ],
          [
            "PClipAngle",
            [
              "Maybe.Maybe Float"
            ]
          ],
          [
            "PClipExtent",
            [
              "VegaLite.ClipRect"
            ]
          ],
          [
            "PCenter",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "PRotate",
            [
              "Float",
              "Float",
              "Float"
            ]
          ],
          [
            "PPrecision",
            [
              "Float"
            ]
          ],
          [
            "PCoefficient",
            [
              "Float"
            ]
          ],
          [
            "PDistance",
            [
              "Float"
            ]
          ],
          [
            "PFraction",
            [
              "Float"
            ]
          ],
          [
            "PLobes",
            [
              "Int"
            ]
          ],
          [
            "PParallel",
            [
              "Float"
            ]
          ],
          [
            "PRadius",
            [
              "Float"
            ]
          ],
          [
            "PRatio",
            [
              "Float"
            ]
          ],
          [
            "PSpacing",
            [
              "Float"
            ]
          ],
          [
            "PTilt",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "RangeConfig",
        "comment": " Properties for customising the colors of a range. The parameter should be a\nnamed color scheme such as `accent` or `purpleorange-11`. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega/docs/schemes/#scheme-properties).\n",
        "args": [],
        "cases": [
          [
            "RCategory",
            [
              "String"
            ]
          ],
          [
            "RDiverging",
            [
              "String"
            ]
          ],
          [
            "RHeatmap",
            [
              "String"
            ]
          ],
          [
            "ROrdinal",
            [
              "String"
            ]
          ],
          [
            "RRamp",
            [
              "String"
            ]
          ],
          [
            "RSymbol",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "RepeatFields",
        "comment": " Create a list of fields to use in set of repeated small multiples. The list of\nfields named here can be referenced in an encoding with `PRepeat Column`, `PRepeat Row`\netc.\n",
        "args": [],
        "cases": [
          [
            "RowFields",
            [
              "List String"
            ]
          ],
          [
            "ColumnFields",
            [
              "List String"
            ]
          ]
        ]
      },
      {
        "name": "Resolution",
        "comment": " Indicated whether or not a scale domain should be independent of others in a\ncomposite visualization. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/resolve.html) for\ndetails.\n",
        "args": [],
        "cases": [
          [
            "Shared",
            []
          ],
          [
            "Independent",
            []
          ]
        ]
      },
      {
        "name": "Resolve",
        "comment": " Used to determine how a channel's axis, scale or legend domains should be resolved\nif defined in more than one view in a composite visualization. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/resolve.html) for\ndetails.\n",
        "args": [],
        "cases": [
          [
            "RAxis",
            [
              "List ( VegaLite.Channel, VegaLite.Resolution )"
            ]
          ],
          [
            "RLegend",
            [
              "List ( VegaLite.Channel, VegaLite.Resolution )"
            ]
          ],
          [
            "RScale",
            [
              "List ( VegaLite.Channel, VegaLite.Resolution )"
            ]
          ]
        ]
      },
      {
        "name": "Scale",
        "comment": " Used to indicate the type of scale transformation to apply.\n",
        "args": [],
        "cases": [
          [
            "ScLinear",
            []
          ],
          [
            "ScPow",
            []
          ],
          [
            "ScSqrt",
            []
          ],
          [
            "ScLog",
            []
          ],
          [
            "ScTime",
            []
          ],
          [
            "ScUtc",
            []
          ],
          [
            "ScSequential",
            []
          ],
          [
            "ScOrdinal",
            []
          ],
          [
            "ScBand",
            []
          ],
          [
            "ScPoint",
            []
          ],
          [
            "ScBinLinear",
            []
          ],
          [
            "ScBinOrdinal",
            []
          ]
        ]
      },
      {
        "name": "ScaleConfig",
        "comment": " Scale configuration property. These are used to configure all scales.\nFor more details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#scale-config)\n",
        "args": [],
        "cases": [
          [
            "SCBandPaddingInner",
            [
              "Float"
            ]
          ],
          [
            "SCBandPaddingOuter",
            [
              "Float"
            ]
          ],
          [
            "SCClamp",
            [
              "Bool"
            ]
          ],
          [
            "SCMaxBandSize",
            [
              "Float"
            ]
          ],
          [
            "SCMinBandSize",
            [
              "Float"
            ]
          ],
          [
            "SCMaxFontSize",
            [
              "Float"
            ]
          ],
          [
            "SCMinFontSize",
            [
              "Float"
            ]
          ],
          [
            "SCMaxOpacity",
            [
              "Float"
            ]
          ],
          [
            "SCMinOpacity",
            [
              "Float"
            ]
          ],
          [
            "SCMaxSize",
            [
              "Float"
            ]
          ],
          [
            "SCMinSize",
            [
              "Float"
            ]
          ],
          [
            "SCMaxStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "SCMinStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "SCPointPadding",
            [
              "Float"
            ]
          ],
          [
            "SCRangeStep",
            [
              "Maybe.Maybe Float"
            ]
          ],
          [
            "SCRound",
            [
              "Bool"
            ]
          ],
          [
            "SCTextXRangeStep",
            [
              "Float"
            ]
          ],
          [
            "SCUseUnaggregatedDomain",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "ScaleDomain",
        "comment": " Describes the scale domain (type of data in scale). For full details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#domain).\n",
        "args": [],
        "cases": [
          [
            "DNumbers",
            [
              "List Float"
            ]
          ],
          [
            "DStrings",
            [
              "List String"
            ]
          ],
          [
            "DDateTimes",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "DSelection",
            [
              "String"
            ]
          ],
          [
            "Unaggregated",
            []
          ]
        ]
      },
      {
        "name": "ScaleNice",
        "comment": " Describes the way a scale can be rounded to 'nice' numbers. For full details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#continuous).\n",
        "args": [],
        "cases": [
          [
            "NMillisecond",
            []
          ],
          [
            "NSecond",
            []
          ],
          [
            "NMinute",
            []
          ],
          [
            "NHour",
            []
          ],
          [
            "NDay",
            []
          ],
          [
            "NWeek",
            []
          ],
          [
            "NMonth",
            []
          ],
          [
            "NYear",
            []
          ],
          [
            "NInterval",
            [
              "VegaLite.TimeUnit",
              "Int"
            ]
          ],
          [
            "IsNice",
            [
              "Bool"
            ]
          ],
          [
            "NTickCount",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "ScaleProperty",
        "comment": " Individual scale property. These are used to customise an individual scale\ntransformation. To customise all scales use `config` and supply relevant\n`ScaleConfig` values. For more details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html)\n",
        "args": [],
        "cases": [
          [
            "SType",
            [
              "VegaLite.Scale"
            ]
          ],
          [
            "SDomain",
            [
              "VegaLite.ScaleDomain"
            ]
          ],
          [
            "SRange",
            [
              "VegaLite.ScaleRange"
            ]
          ],
          [
            "SScheme",
            [
              "String",
              "List Float"
            ]
          ],
          [
            "SPadding",
            [
              "Float"
            ]
          ],
          [
            "SPaddingInner",
            [
              "Float"
            ]
          ],
          [
            "SPaddingOuter",
            [
              "Float"
            ]
          ],
          [
            "SRangeStep",
            [
              "Maybe.Maybe Float"
            ]
          ],
          [
            "SRound",
            [
              "Bool"
            ]
          ],
          [
            "SClamp",
            [
              "Bool"
            ]
          ],
          [
            "SInterpolate",
            [
              "VegaLite.CInterpolate"
            ]
          ],
          [
            "SNice",
            [
              "VegaLite.ScaleNice"
            ]
          ],
          [
            "SZero",
            [
              "Bool"
            ]
          ],
          [
            "SReverse",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "ScaleRange",
        "comment": " Describes a scale range of scale output values. For full details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#range).\n",
        "args": [],
        "cases": [
          [
            "RNumbers",
            [
              "List Float"
            ]
          ],
          [
            "RStrings",
            [
              "List String"
            ]
          ],
          [
            "RName",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "Selection",
        "comment": " Indicates the type of selection to be generated by the user. `Single` allows\none mark at a time to be selected. 'Multi' allows multiple items to be selected\n(e.g. with shift-click). 'Interval' allows a bounding rectangle to be dragged by\nuser to select all items intersecting with it.\n",
        "args": [],
        "cases": [
          [
            "Single",
            []
          ],
          [
            "Multi",
            []
          ],
          [
            "Interval",
            []
          ]
        ]
      },
      {
        "name": "SelectionMarkProperty",
        "comment": " Properties for customising the appearance of an interval selection mark (dragged\nrectangle). For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html#interval-mark).\n",
        "args": [],
        "cases": [
          [
            "SMFill",
            [
              "String"
            ]
          ],
          [
            "SMFillOpacity",
            [
              "Float"
            ]
          ],
          [
            "SMStroke",
            [
              "String"
            ]
          ],
          [
            "SMStrokeOpacity",
            [
              "Float"
            ]
          ],
          [
            "SMStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "SMStrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "SMStrokeDashOffset",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "SelectionProperty",
        "comment": " Properties for customising the nature of the selection. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html#selection-properties)\nfor details. When linking a selection property to an event stream with `On`, `Translate`\nor `Zoom`, a String should be provided describing the event stream as detailed in the\n[Vega event stream documentation](https://vega.github.io/vega/docs/event-streams).\nIf an empty string is provided, the property is set to `false`. The `Toggle` option\nexpects a [Vega expression](https://vega.github.io/vega/docs/expressions) that evaluates\nto either true or false.\n",
        "args": [],
        "cases": [
          [
            "On",
            [
              "String"
            ]
          ],
          [
            "Translate",
            [
              "String"
            ]
          ],
          [
            "Zoom",
            [
              "String"
            ]
          ],
          [
            "Fields",
            [
              "List String"
            ]
          ],
          [
            "Encodings",
            [
              "List VegaLite.Channel"
            ]
          ],
          [
            "Empty",
            []
          ],
          [
            "ResolveSelections",
            [
              "VegaLite.SelectionResolution"
            ]
          ],
          [
            "SelectionMark",
            [
              "List VegaLite.SelectionMarkProperty"
            ]
          ],
          [
            "BindScales",
            []
          ],
          [
            "Bind",
            [
              "List VegaLite.Binding"
            ]
          ],
          [
            "Nearest",
            [
              "Bool"
            ]
          ],
          [
            "Toggle",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "SelectionResolution",
        "comment": " Determines how selections in faceted or repeated views are resolved. See the\n[Vege-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html#resolve)\nfor details\n",
        "args": [],
        "cases": [
          [
            "Global",
            []
          ],
          [
            "Union",
            []
          ],
          [
            "Intersection",
            []
          ]
        ]
      },
      {
        "name": "Side",
        "comment": " Represents one side of a rectangular space.\n",
        "args": [],
        "cases": [
          [
            "STop",
            []
          ],
          [
            "SBottom",
            []
          ],
          [
            "SLeft",
            []
          ],
          [
            "SRight",
            []
          ]
        ]
      },
      {
        "name": "SortProperty",
        "comment": " Allow type of sorting to be customised. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/sort.html).\n",
        "args": [],
        "cases": [
          [
            "Ascending",
            []
          ],
          [
            "Descending",
            []
          ],
          [
            "Op",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "ByField",
            [
              "String"
            ]
          ],
          [
            "ByRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ]
        ]
      },
      {
        "name": "StackProperty",
        "comment": " Describes the type of stacking to apply to a bar chart.\n",
        "args": [],
        "cases": [
          [
            "StZero",
            []
          ],
          [
            "StNormalize",
            []
          ],
          [
            "StCenter",
            []
          ],
          [
            "NoStack",
            []
          ]
        ]
      },
      {
        "name": "Symbol",
        "comment": " Identifies the type of symbol. The `Path` symbol is used to define custom shapes\nas an SVG path description.\n",
        "args": [],
        "cases": [
          [
            "SymCircle",
            []
          ],
          [
            "SymSquare",
            []
          ],
          [
            "Cross",
            []
          ],
          [
            "Diamond",
            []
          ],
          [
            "TriangleUp",
            []
          ],
          [
            "TriangleDown",
            []
          ],
          [
            "Path",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "TextChannel",
        "comment": " Types of text channel property used for displaying text as part of the visualization.\n",
        "args": [],
        "cases": [
          [
            "TName",
            [
              "String"
            ]
          ],
          [
            "TRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "TmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "TBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "TAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "TTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "TSelectionCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.TextChannel",
              "List VegaLite.TextChannel"
            ]
          ],
          [
            "TDataCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.TextChannel",
              "List VegaLite.TextChannel"
            ]
          ],
          [
            "TFormat",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "TimeUnit",
        "comment": " Describes a unit of time. Useful for encoding and transformations. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/timeunit.html)\nfor further details.\n\nTo encode a time as UTC (coordinated universal time, independent of local time\nzones or daylight saving), provide a time unit to the `utc` function.\nFor example,\n\n    encoding\n        << position X [ PName \"date\", PmType Temporal, PTimeUnit (utc YearMonthDateHours) ]\n\n",
        "args": [],
        "cases": [
          [
            "Year",
            []
          ],
          [
            "YearQuarter",
            []
          ],
          [
            "YearQuarterMonth",
            []
          ],
          [
            "YearMonth",
            []
          ],
          [
            "YearMonthDate",
            []
          ],
          [
            "YearMonthDateHours",
            []
          ],
          [
            "YearMonthDateHoursMinutes",
            []
          ],
          [
            "YearMonthDateHoursMinutesSeconds",
            []
          ],
          [
            "Quarter",
            []
          ],
          [
            "QuarterMonth",
            []
          ],
          [
            "Month",
            []
          ],
          [
            "MonthDate",
            []
          ],
          [
            "Date",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Hours",
            []
          ],
          [
            "HoursMinutes",
            []
          ],
          [
            "HoursMinutesSeconds",
            []
          ],
          [
            "Minutes",
            []
          ],
          [
            "MinutesSeconds",
            []
          ],
          [
            "Seconds",
            []
          ],
          [
            "SecondsMilliseconds",
            []
          ],
          [
            "Milliseconds",
            []
          ]
        ]
      },
      {
        "name": "TitleConfig",
        "comment": " Title configuration properties. These are used to configure the default style\nof all titles within a visualization.\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/title.html#config)\n",
        "args": [],
        "cases": [
          [
            "TAnchor",
            [
              "VegaLite.APosition"
            ]
          ],
          [
            "TAngle",
            [
              "Float"
            ]
          ],
          [
            "TBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "TColor",
            [
              "String"
            ]
          ],
          [
            "TFont",
            [
              "String"
            ]
          ],
          [
            "TFontSize",
            [
              "Float"
            ]
          ],
          [
            "TFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "TLimit",
            [
              "Float"
            ]
          ],
          [
            "TOffset",
            [
              "Float"
            ]
          ],
          [
            "TOrient",
            [
              "VegaLite.Side"
            ]
          ]
        ]
      },
      {
        "name": "VAlign",
        "comment": " Indicates the vertical alignment of some text that may be attached to a mark.\n",
        "args": [],
        "cases": [
          [
            "AlignTop",
            []
          ],
          [
            "AlignMiddle",
            []
          ],
          [
            "AlignBottom",
            []
          ]
        ]
      },
      {
        "name": "VLProperty",
        "comment": " Top-level Vega-Lite properties. These are the ones that define the core of the\nvisualization grammar. All `VLProperties` are created by functions which can be\narranged into seven broad groups.\n\n**Data Properties** relate to the input data to be visualized. Generated by\n[`dataFromColumns`](#dataFromColumns), [`dataFromRows`](#dataFromRows),\n[`dataFromUrl`](#dataFromUrl), [`dataFromSource`](#dataFromSource) and\n[`dataFromJson`](#dataFromJson).\n\n**Transform Properties** indicate that some transformation of input data should\nbe applied before encoding them visually. Generated by [`transform`](#transform)\nand [`projection`](#projection) they can include data transformations such as `filter`,\n`binAs` and `calculateAs` and geo transformations of longitude, latitude coordinates\nused by marks such as `Geoshape`, `Point` and `Line`.\n\n**Mark Properties** relate to the symbols used to visualize data items. Generated by [`mark`](#mark)\nthey include types such as `Circle`, `Bar` and `Line`.\n\n**Encoding Properties** specify which data elements are mapped to which mark characteristics\n(known as _channels_). Generated by [`encoding`](#encoding) they include encodings\nsuch as `position`, `color`, `size`, `shape` `text` and `hyperlink`.\n\n**Composition Properties** allow visualization views to be combined to form more\ncomplex visualizations. Generated by [`layer`](#layer), [`repeat`](#repeat),\n[`facet`](#facet), [`hConcat`](#hConcat), [`vConcat`](#vConcat), [`spec`](#spec)\nand [`resolve`](#resolve).\n\n**Interaction Properties** allow interactions such as clicking, dragging and others\ngenerated via a GUI or data stream to influence the visualization. Generated by\n[`selection`](#selection).\n\n**Supplementary and Configuration Properties** provide a means to add metadata and\nstyling to one or more visualizations. Generated by [`name`](#name), [`title`](#title),\n[`description`](#description), [`background`](#background), [`width`](#width),\n[`height`](#height), [`padding`](#padding), [`autosize`](#autosize) and\n[`configure`](#configure).\n\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ViewConfig",
        "comment": " View configuration property. These are used to configure the style of a single\nview within a visualization such as its size and default fill and stroke colors.\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/spec.html#config)\n",
        "args": [],
        "cases": [
          [
            "ViewWidth",
            [
              "Float"
            ]
          ],
          [
            "ViewHeight",
            [
              "Float"
            ]
          ],
          [
            "Clip",
            [
              "Bool"
            ]
          ],
          [
            "Fill",
            [
              "Maybe.Maybe String"
            ]
          ],
          [
            "FillOpacity",
            [
              "Float"
            ]
          ],
          [
            "Stroke",
            [
              "Maybe.Maybe String"
            ]
          ],
          [
            "StrokeOpacity",
            [
              "Float"
            ]
          ],
          [
            "StrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "StrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "StrokeDashOffset",
            [
              "Float"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "aggregate",
        "comment": " Defines a set of named aggregation transformations to be used when encoding\nchannels. This is useful when, for example, you wish to apply the same transformation\nto a number of channels but do not want to define it each time. The first parameter is\na list of the named aggregation operations to apply. The second parameter is a list\nof 'group by' fields. The third parameter is the list of transformations to which\nthis is to be added. For further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/aggregate.html#aggregate-op-def).\n\n    trans =\n        transform\n            << aggregate\n                [ opAs Min \"people\" \"lowerBound\", opAs Max \"people\" \"upperBound\" ]\n                [ \"age\" ]\n\n",
        "type": "List VegaLite.Spec -> List String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "asSpec",
        "comment": " Create a specification sufficient to define an element in a composed visualization\nsuch as a superposed layer or juxtaposed facet. Typically a layer will contain a\nfull set of specifications that define a visualization with\nthe exception of the data specification which is usually defined outside of any one\nlayer. Whereas for repeated and faceted specs, the entire specification is provided.\n\n    enc1 = ...\n    spec1 =\n        asSpec [ enc1, mark Line [] ]\n\n",
        "type": "List ( VegaLite.VLProperty, VegaLite.Spec ) -> VegaLite.Spec"
      },
      {
        "name": "autosize",
        "comment": " Declare the way the view is sized. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/size.html#autosize)\nfor details.\n\n    enc = ...\n    toVegaLite\n        [ width 250\n        , height 300\n        , autosize [ AFit, APadding, AResize ]\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "List VegaLite.Autosize -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "background",
        "comment": " Set the background color of the visualization. Should be specified with a CSS\nstring such as `#ffe` or `rgb(200,20,150)`. If not specified the background will\nbe transparent.\n\n    enc = ...\n    toVegaLite\n        [ background \"rgb(251,247,238)\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "bin",
        "comment": " Create a binning transformation to be applied directly to a channel. The type\nof binning can be customised with a list of `BinProperty` or an empty list to use\nthe default binning. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bin.html) for\nmore details.\n\n    position X [ PName \"IMDB_Rating\", PmType Quantitative , PBin [] ]\n\n",
        "type": "List VegaLite.BinProperty -> VegaLite.LabelledSpec"
      },
      {
        "name": "binAs",
        "comment": " Create a named binning transformation that may be referenced in other Transformations\nor encodings. This works in a similar way to `bin` but requires the name of the field\nto bin and an additional label so it may be referenced in other expressions. The\ntype of binning can be customised with a list of `BinProperty` or an empty list\nto use the default binning. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bin.html) for\nmore details. Note that usually, direct binning within an encoding is preferred\nover this form of bin transformation.\n\n    trans =\n        transform\n            << binAs [ MaxBins 3 ] \"IMDB_Rating\" \"ratingGroup\"\n\n",
        "type": "List VegaLite.BinProperty -> String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "calculateAs",
        "comment": " Creates a new data field based on calculations from existing fields.\nThe first parameter is an expression representing the calculation and the second\nis the name to give the newly calculated field. This third parameter is a list of\nany previous calculations to which this is to be added. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/calculate.html)\nfor further details.\n\n    trans =\n        transform << calculateAs \"datum.sex == 2 ? 'F' : 'M'\" \"gender\"\n\n",
        "type": "String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "categoricalDomainMap",
        "comment": " Create a set of discrete domain to color mappings suitable for customising categorical\nscales. The first item in each tuple should be a domain value and the second the\ncolor value with which it should be associated. It is a convenience function equivalent\nto specifying separate `SDomain` and `SRange` lists and is safer as it guarantees\na one-to-one correspondence between domain and range values.\n\n    color\n        [ MName \"weather\"\n        , MmType Nominal\n        , MScale <|\n            categoricalDomainMap\n                [ ( \"sun\", \"yellow\" )\n                , ( \"rain\", \"blue\" )\n                , ( \"fog\", \"grey\" )\n                ]\n        ]\n\n",
        "type": "List ( String, String ) -> List VegaLite.ScaleProperty"
      },
      {
        "name": "color",
        "comment": " Encode a color channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by color. The second parameter\nis a list of any previous channels to which this color channel should be added.\n\n    color [ MName \"Species\", MmType Nominal ] []\n\nEncoding a color channel will generate a legend by default. To stop the legend\nappearing, just supply an empty list of legend properties to `MLegend` :\n\n    color [ MName \"Species\", MmType Nominal, MLegend [] ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "column",
        "comment": " Encodes a new facet to be arranged in columns. The first parameter is a list\nof properties that define the faceting channel. This should include at least the\nname of the data field and its measurement type. The final parameter is a list of\nany previous channels to which this is to be added. This is usually implicit when\nchaining encodings using functional composition\n\n    enc =\n        encoding\n            << position X [ PName \"people\", PmType Quantitative ]\n            << position Y [ PName \"gender\", PmType Nominal ]\n            << column [ FName \"age\", FmType Ordinal ]\n\n",
        "type": "List VegaLite.FacetChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "combineSpecs",
        "comment": " Combines a list of labelled specifications into a single specification that\nmay be passed to JavaScript for rendering. This is useful when you wish to create\na single page with multiple visulizualizations.\n\n    combineSpecs\n        [ ( \"vis1\", myFirstVis )\n        , ( \"vis2\", mySecondVis )\n        , ( \"vis3\", myOtherVis )\n        ]\n\n",
        "type": "List VegaLite.LabelledSpec -> VegaLite.Spec"
      },
      {
        "name": "configuration",
        "comment": " Defines a single configuration option to be applied globally across the visualization.\nThe first parameter identifies the type of configuration, the second a list of previous\nconfigurations to which this one may be added.\n\n    configuration (Axis [ DomainWidth 4 ]) []\n\n",
        "type": "VegaLite.ConfigurationProperty -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "configure",
        "comment": " Create a single global configuration from a list of configuration specifications.\nConfigurations are applied to all relevant items in the specification. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/config.html) for\nmore details.\n\n    config =\n        configure\n            << configuration (Axis [ DomainWidth 1 ])\n            << configuration (View [ Stroke (Just \"transparent\") ])\n            << configuration (SelectionStyle [ ( Single, [ On \"dblclick\" ] ) ])\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "dataColumn",
        "comment": " Create a column of data. A column has a name and a list of values. The final\nparameter is the list of any other columns to which this is added.\n\n    dataColumn \"Animal\" (Strings [ \"Cat\", \"Dog\", \"Mouse\"]) []\n\n",
        "type": "String -> VegaLite.DataValues -> List VegaLite.DataColumn -> List VegaLite.DataColumn"
      },
      {
        "name": "dataFromColumns",
        "comment": " Declare a data source from a provided list of column values. Each column contains\nvalues of the same type, but columns each with a different type are permitted.\nColumns should all contain the same number of items; if not the dataset will be\ntruncated to the length of the shortest column. An optional list of field formatting\ninstructions can be provided as the first parameter or an empty list to use the\ndefault formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\nThe columns themselves are most easily generated with `dataColumn`\n\n    data =\n        dataFromColumns [ Parse [ ( \"Year\", FoDate \"%Y\" ) ] ]\n            << dataColumn \"Animal\" (Strings [ \"Fish\", \"Dog\", \"Cat\" ])\n            << dataColumn \"Age\" (Numbers [ 28, 12, 6 ])\n            << dataColumn \"Year\" (Strings [ \"2010\", \"2014\", \"2015\" ])\n\n",
        "type": "List VegaLite.Format -> List VegaLite.DataColumn -> VegaLite.Data"
      },
      {
        "name": "dataFromJson",
        "comment": " Declare a data source from a provided json specification. The most likely use-case\nfor specifying json inline is when creating [geojson](http://geojson.org) objects,\nwhen [`geometry`](#geometry), [`geometryCollection`](#geometryCollection) and\n[`geoFeatureCollection`](#geoFeatureCollection) functions may be used. For more\ngeneral cases of json creation, consider\n[`Json.Encode`](http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Encode).\n\n    let\n        geojson =\n            geometry (GeoPolygon [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []\n    in\n    toVegaLite\n        [ width 200\n        , height 200\n        , dataFromJson geojson []\n        , projection [ PType Orthographic ]\n        , mark Geoshape []\n        ]\n\n",
        "type": "VegaLite.Spec -> List VegaLite.Format -> VegaLite.Data"
      },
      {
        "name": "dataFromRows",
        "comment": " Declare a data source from a provided list of row values. Each row contains\na list of tuples where the first value is a string representing the column name, and the\nsecond the column value for that row. Each column can have a value of a different type\nbut you must ensure that when subsequent rows are added, they match the types of previous\nvalues with shared column names. An optional list of field formatting instructions can\nbe provided as the first parameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\nThe rows themselves are most easily generated with `dataRow`. Note though that generally\nif you are creating data inline (as opposed to reading from a file), adding data by column\nis more efficient and less error-prone.\n\n    data =\n        dataFromRows [ Parse [ ( \"Year\", FoDate \"%Y\" ) ] ]\n            << dataRow [ ( \"Animal\", Str \"Fish\" ), ( \"Age\", Number 28 ), ( \"Year\", Str \"2010\" ) ]\n            << dataRow [ ( \"Animal\", Str \"Dog\" ), ( \"Age\", Number 12 ), ( \"Year\", Str \"2014\" ) ]\n            << dataRow [ ( \"Animal\", Str \"Cat\" ), ( \"Age\", Number 6 ), ( \"Year\", Str \"2015\" ) ]\n\n",
        "type": "List VegaLite.Format -> List VegaLite.DataRow -> VegaLite.Data"
      },
      {
        "name": "dataFromSource",
        "comment": " Declare data from a named source. The source may be from named `datasets` within\na specification or a named data source created via the\n[Vega View API](https://vega.github.io/vega/docs/api/view/#data).\nAn optional list of field formatting instructions can be provided as the second\nparameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#named)\nfor details.\n\n    data = ...\n    json = ...\n    enc = ...\n    toVegaLite\n        [ datasets [ ( \"myData\", data [] ),  ( \"myJson\", dataFromJson json [] ) ]\n        , dataFromSource \"myData\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> List VegaLite.Format -> VegaLite.Data"
      },
      {
        "name": "dataFromUrl",
        "comment": " Declare data source from a url. The url can be a local path on a web server\nor an external http(s) url. Used to create a data ( property, specification ) pair.\nAn optional list of field formatting instructions can be provided as the second\nparameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\n\n    enc = ...\n    toVegaLite\n        [ dataFromUrl \"data/weather.csv\" [ Parse [ ( \"date\", FoDate \"%Y-%m-%d %H:%M\" ) ] ]\n        , mark Line []\n        , enc []\n        ]\n\n",
        "type": "String -> List VegaLite.Format -> VegaLite.Data"
      },
      {
        "name": "dataRow",
        "comment": " Create a row of data. A row comprises a list of (columnName,value) pairs.\nThe final parameter is the list of any other rows to which this is added.\n\n    dataRow [(\"Animal\", Str \"Fish\"),(\"Age\",Number 28),(\"Year\", Str \"2010\")] []\n\n",
        "type": "List ( String, VegaLite.DataValue ) -> List VegaLite.DataRow -> List VegaLite.DataRow"
      },
      {
        "name": "datasets",
        "comment": " Create a dataset comprising a collection of named `Data` items. Each data item\ncan be created with normal data generating functions such as `dataFromRows` or\n`dataFromJson`. These can be later referred to using `dataFromSource`.\n\n    let\n        data =\n            dataFromRows []\n                << dataRow [ ( \"cat\", Str \"a\" ), ( \"val\", Number 10 ) ]\n                << dataRow [ ( \"cat\", Str \"b\" ), ( \"val\", Number 18 ) ]\n        json =\n            JE.list\n                [ JE.object [ ( \"cat\", JE.string \"a\" ), ( \"val\", JE.float 120 ) ]\n                , JE.object [ ( \"cat\", JE.string \"b\" ), ( \"val\", JE.float 180 ) ]\n                ]\n\n        enc = ...\n\n    in\n    toVegaLite\n        [ datasets [ ( \"myData\", data [] ),  ( \"myJson\", dataFromJson json [] ) ]\n        , dataFromSource \"myData\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "List ( String, VegaLite.Data ) -> VegaLite.Data"
      },
      {
        "name": "description",
        "comment": " Provides an optional description to be associated with the visualization.\n\n    enc = ...\n    toVegaLite\n        [ description \"Population change of key regions since 1900\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "detail",
        "comment": " Encode a 'level of detail' channel. This provides a way of grouping by a field\nbut unlike, say `color`, all groups have the same visual properties. The first\nparameter is a list of the field characteristics to be grouped. The second parameter\nis a list of any previous channels to which this detail channel should be added. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#detail)\nfor details.\n\n    detail [ DName \"Species\", DmType Nominal ] []\n\n",
        "type": "List VegaLite.DetailChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "domainRangeMap",
        "comment": " Create a pair of continuous domain to color mappings suitable for customising\nordered scales. The first parameter is a tuple representing the mapping of the lowest\nnumeric value in the domain to its equivalent color; the second tuple the mapping\nof the highest numeric value to color. If the domain contains any values between\nthese lower and upper bounds they are interpolated according to the scale's interpolation\nfunction. This is a convenience function equivalent to specifying separate `SDomain`\nand `SRange` lists and is safer as it guarantees a one-to-one correspondence between\ndomain and range values.\n\n    color\n        [ MName \"year\"\n        , MmType Ordinal\n        , MScale (domainRangeMap ( 1955, \"#e6959c\" ) ( 2000, \"#911a24\" ))\n        ]\n\n",
        "type": "( Float, String ) -> ( Float, String ) -> List VegaLite.ScaleProperty"
      },
      {
        "name": "encoding",
        "comment": " Create an encoding specification from a list of channel encodings.\n\n    enc =\n        encoding\n            << position X [ PName \"Animal\", PmType Ordinal ]\n            << position Y [ PName \"Age\", PmType Quantitative ]\n            << shape [ MName \"Species\", MmType Nominal ]\n            << size [ MName \"Population\", MmType Quantitative ]\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "facet",
        "comment": " Defines the fields that will be used to facet a view in rows or columns to create\na set of small multiples. This is used where the encoding of the visualization in small\nmultiples is identical, but data for each is grouped by the given fields. When\ncreating a faceted view in this way you also need to define a full specification\nto apply to each of those facets using `asSpec`.\n\n    spec = ...\n    toVegaLite\n        [ facet [ RowBy [ FName \"Origin\", FmType Nominal ] ]\n        , specifcation spec\n        ]\n\nSee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html)\nfor further details.\n\n",
        "type": "List VegaLite.FacetMapping -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "fill",
        "comment": " Encode a fill channel. This acts in a similar way to encoding by `color` but\nonly affects the interior of closed shapes. The first parameter is a list of mark\nchannel properties that characterise the way a data field is encoded by fill.\nThe second parameter is a list of any previous channels to which this fill channel\nshould be added.\n\n    fill [ MName \"Species\", MmType Nominal ] []\n\nNote that if both `fill` and `color` encodings are specified, `fill` takes precedence.\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "filter",
        "comment": " Adds the given filter operation a list of transformations that may be applied\nto a channel or field. The first parameter is the filter operation and the second,\noften implicit, parameter is the list of other filter operations to which this\nshould be added in sequence.\n\n    trans =\n        transform\n            << filter (FEqual \"Animal\" (Str \"Cat\"))\n\nFilter operations can combine selections and data predicates with `BooleanOp` expressions:\n\n    trans =\n        transform\n            << filter (FCompose (And (Expr \"datum.Weight_in_lbs > 3000\") (Selection \"brush\")))\n\n",
        "type": "VegaLite.Filter -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "geoFeatureCollection",
        "comment": " Specifies a list of geo features to be used in a geoShape specification.\nEach feature object in this collection can be created with the `geometry` function.\n\n    geojson =\n        geoFeatureCollection\n            [ geometry (GeoPolygon [ [ ( -3, 59 ), ( -3, 52 ), ( 4, 52 ), ( -3, 59 ) ] ])\n                [ ( \"myRegionName\", Str \"Northern region\" ) ]\n            , geometry (GeoPolygon [ [ ( -3, 52 ), ( 4, 52 ), ( 4, 45 ), ( -3, 52 ) ] ])\n                [ ( \"myRegionName\", Str \"Southern region\" ) ]\n            ]\n\n",
        "type": "List VegaLite.Spec -> VegaLite.Spec"
      },
      {
        "name": "geometry",
        "comment": " Specifies a geometric object to be used in a geoShape specification. The first\nparameter is the geometric type, the second an optional list of properties to be\nassociated with the object.\n\n      geojson =\n          geometry (GeoPolygon [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []\n\n",
        "type": "VegaLite.Geometry -> List ( String, VegaLite.DataValue ) -> VegaLite.Spec"
      },
      {
        "name": "geometryCollection",
        "comment": " Specifies a list of geometry objects to be used in a geoShape specification.\nEach geometry object in this collection can be created with the `geometry` function.\n\n    geojson =\n        geometryCollection\n            [ geometry (GeoPolygon [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []\n            , geometry (GeoPoint -3.5 55.5) []\n            ]\n\n",
        "type": "List VegaLite.Spec -> VegaLite.Spec"
      },
      {
        "name": "hConcat",
        "comment": " Assigns a list of specifications to be juxtaposed horizontally in a visualization.\n\n    let\n        spec1 = ...\n        spec2 = ...\n    in\n    toVegaLite\n        [ dataFromUrl \"data/driving.json\" []\n        , hConcat [ spec1, spec2 ]\n        ]\n\n",
        "type": "List VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "height",
        "comment": " Overrides the default height of the visualization. If not specified the height\nwill be calculated based on the content of the visualization.\n\n    enc = ...\n    toVegaLite\n        [ height 300\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "Float -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "hyperlink",
        "comment": " Encode a hyperlink channel. The first parameter is a list of hyperlink channel\nproperties that characterise the hyperlinking such as the destination url and cursor\ntype. The second parameter is a list of any previous encoding channels to which\nthis hyperlink channel should be added.\n\n    hyperlink [ HName \"Species\", HmType Nominal ] []\n\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#href)\n\n",
        "type": "List VegaLite.HyperlinkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "layer",
        "comment": " Assigns a list of specifications to superposed layers in a visualization.\n\n    let\n        spec1 = ...\n        spec2 = ...\n    in\n    toVegaLite\n        [ dataFromUrl \"data/driving.json\" []\n        , layer [ spec1, spec2 ]\n        ]\n\n",
        "type": "List VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "lookup",
        "comment": " Perform a lookup of named fields between two data sources. This allows you to\nfind values in one data source based on the values in another (like a relational\njoin). The first parameter is the field in the primary data source to act as key,\nthe second is the secondary data source which can be specified with a call to `dataFromUrl`\nor other data generating function. The third is the name of the field in the secondary\ndata source to match values with the primary key. The fourth parameter is the list\nof fields to be stored when the keys match. As with other transformation functions,\nthe final implicit parameter is a list of any other transformations to which this\nis to be added.\n\nUnlike `lookupAs`, this function will only return the specific fields named in the\nfourth parameter. If you wish to return the entire set of fields in the secondary\ndata source as a single object, use `lookupAs`.\n\nSee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/lookup.html)\nfor further details.\n\nThe following would return the values in the `age` and `height` fields from\n`lookup_people.csv` for all rows where the value in the `name` column in that\nfile matches the value of `person` in the primary data source.\n\n    data =\n        dataFromUrl \"data/lookup_groups.csv\" []\n\n    trans =\n        transform\n            << lookup \"person\" (dataFromUrl \"data/lookup_people.csv\" []) \"name\" [ \"age\", \"height\" ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec ) -> String -> List String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "lookupAs",
        "comment": " Perform an object lookup between two data sources. This allows you to find\nvalues in one data source based on the values in another (like a relational\njoin). The first parameter is the field in the primary data source to act as key,\nthe second is the secondary data source which can be specified with a call to\n`dataFromUrl` or other data generating function. The third is the name of the field\nin the secondary data source to match values with the primary key. The fourth\nparameter is the name to be given to the object storing matched values. As with\nother transformation functions, the final implicit parameter is a list of any other\ntransformations to which this is to be added.\n\nUnlike `lookup`, this function returns the entire set of field values from the\nsecondary data source when keys match. Those fields are stored as an object with\nthe name provided in the fourth parameter.\n\nSee the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/lookup.html)\nfor further details.\n\nIn the following example, `personDetails` would reference all the field values in\n`lookup_people.csv` for each row where the value in the `name` column in that\nfile matches the value of `person` in the primary data source.\n\n    data =\n        dataFromUrl \"data/lookup_groups.csv\" []\n\n    trans =\n        transform\n            << lookupAs \"person\" (dataFromUrl \"data/lookup_people.csv\" []) \"name\" \"personDetails\"\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec ) -> String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "mark",
        "comment": " Create a mark specification. All marks must have a type (first parameter) and\ncan optionally be customised with a list of mark properties such as interpolation\nstyle for lines. To keep the default style for the mark, just provide an empty list\nfor the second parameter.\n\n    mark Circle []\n    mark Line [ MInterpolate StepAfter ]\n\n",
        "type": "VegaLite.Mark -> List VegaLite.MarkProperty -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "name",
        "comment": " Provides an optional name to be associated with the visualization.\n\n    enc = ...\n    toVegaLite\n        [ name \"PopGrowth\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "opAs",
        "comment": " Create a named aggregation operation on a field that can be added to a transformation.\nThe first parameter is the aggregation operation to use; the second the name of\nthe field in which to apply it and the third the name to be given to this transformation.\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/aggregate.html#aggregate-op-def).\n\n    trans =\n        transform\n            << aggregate\n                [ opAs Min \"people\" \"lowerBound\"\n                , opAs Max \"people\" \"upperBound\"\n                ]\n                [ \"age\" ]\n\n",
        "type": "VegaLite.Operation -> String -> String -> VegaLite.Spec"
      },
      {
        "name": "opacity",
        "comment": " Encode an opacity channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by opacity. The second parameter\nis a list of any previous channels to which this opacity channel should be added.\n\n    opacity [ MName \"Age\", MmType Quantitative ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "order",
        "comment": " Encode an order channel. The first parameter is a list of order field definitions\nto define the channel. The second parameter is a list of any previous channels to\nwhich this order channel is to be added.\n\n    enc =\n        encoding\n            << position X [ PName \"miles\", PmType Quantitative ]\n            << position Y [ PName \"gas\", PmType Quantitative ]\n            << order [ OName \"year\", OmType Temporal ]\n\n",
        "type": "List VegaLite.OrderChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "padding",
        "comment": " Set the padding around the visualization in pixel units. The way padding is\ninterpreted will depend on the `autosize` properties. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/spec.html#top-level-specifications)\nfor details.\n\n    enc = ...\n    toVegaLite\n        [ width 500\n        , padding (PEdges 20 10 5 15)\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "VegaLite.Padding -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "position",
        "comment": " Encode a position channel. The first parameter identifies the channel,\nthe second a list of qualifying options. Usually these will include at least the\nname of the data field associated with it and its measurement type (either the field\nname directly, or a reference to a row / column repeat field). The final parameter\nis a list of any previous channels to which this position channel should be added.\nThis is often implicit when chaining a series of encodings using functional composition.\n\n      enc =\n          encoding\n            << position X [ PName \"Animal\", PmType Ordinal ]\n\nEncoding by position will generate an axis by default. To prevent the axis from\nappearing, simply provide an empty list of axis properties to `PAxis` :\n\n     enc =\n         encoding\n           << position X [ PName \"Animal\", PmType Ordinal, PAxis [] ]\n\n",
        "type": "VegaLite.Position -> List VegaLite.PositionChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "projection",
        "comment": " Sets the cartographic projection used for geospatial coordinates. A projection\ndefines the mapping from _(longitude,latitude)_ to an _(x,y)_ plane used for rendering.\nThis is useful when using the `Geoshape` mark. For further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/projection.html).\n\n    proj =\n        projection [ PType Orthographic, PRotate -40 0 0 ]\n\n",
        "type": "List VegaLite.ProjectionProperty -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "repeat",
        "comment": " Define the fields that will be used to compose rows and columns of a set of\nsmall multiples. This is used where the encoding of the visualization in small\nmultiples is largely identical, but the data field used in each might vary. When\na list of fields is identified with `repeat` you also need to define a full specification\nto apply to each of those fields using `asSpec`.\n\n    spec = ...\n    toVegaLite\n        [ repeat [ ColumnFields [ \"Cat\", \"Dog\", \"Fish\" ] ]\n        , ( Spec, asSpec spec )\n        ]\n\nSee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/repeat.html)\nfor further details.\n\n",
        "type": "List VegaLite.RepeatFields -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "resolution",
        "comment": " Define a single resolution option to be applied when scales, axes or legends\nin composite views share channel encodings. This allows, for example, two different\ncolor encodings to be created in a layered view, which otherwise by default would\nshare color channels between layers. Each resolution rule should be in a tuple\npairing the channel to which it applies and the rule type.\nThe first parameter identifies the type of resolution, the second a list of previous\nresolutions to which this one may be added.\n\n    resolve\n        << resolution (RScale [ ( ChY, Independent ) ])\n\n",
        "type": "VegaLite.Resolve -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "resolve",
        "comment": " Determine whether scales, axes or legends in composite views should share channel\nencodings. This allows, for example, two different color encodings to be created\nin a layered view, which otherwise by default would share color channels between\nlayers. Each resolution rule should be in a tuple pairing the channel to which it\napplies and the rule type.\n\n    let\n        res =\n            resolve\n                << resolution (RLegend [ ( ChColor, Independent ) ])\n    in\n    toVegaLite\n        [ dataFromUrl \"data/movies.json\" []\n        , vConcat [ heatSpec, barSpec ]\n        , res []\n        ]\n\nFor more information see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/resolve.html).\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "row",
        "comment": " Encode a new facet to be arranged in rows. The first parameter is a list of\nfacet properties that define the faceting channel. This should include at least\nthe name of data the field and its measurement type. The final parameter is a list\nof any previous channels to which this is to be added. This is usually implicit\nwhen chaining encodings using functional composition\n\n    enc =\n        encoding\n            << position X [ PName \"people\", PmType Quantitative ]\n            << position Y [ PName \"gender\", PmType Nominal ]\n            << row [ FName \"age\", FmType Ordinal ]\n\n",
        "type": "List VegaLite.FacetChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "select",
        "comment": " Create a single named selection that may be applied to a data query or transformation.\nThe first two parameters specify the name to be given to the selection for later reference\nand the type of selection made. The third allows additional selection options to\nbe specified. The fourth is a list of selections to which this is added, which is\ncommonly implicit when chaining a series of selections together with functional\ncomposition.\n\n    sel =\n        selection\n            << select \"view\" Interval [ Bind Scales ] []\n            << select \"myBrush\" Interval []\n            << select \"myPaintbrush\" Multi [ On \"mouseover\", Nearest True ]\n\n",
        "type": "String -> VegaLite.Selection -> List VegaLite.SelectionProperty -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "selection",
        "comment": " Create a full selection specification from a list of selections. For details\nsee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html).\n\n    selection =\n        selection << select \"view\" Interval [ Bind Scales ]\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "shape",
        "comment": " Encode a shape channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by shape. The second parameter\nis a list of any previous channels to which this shape channel should be added.\n\n    shape [ MName \"Species\", MmType Nominal ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "size",
        "comment": " Encode a size channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by size. The second parameter\nis a list of any previous channels to which this size channel should be added.\n\n    size [ MName \"Age\", MmType Quantitative ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "specification",
        "comment": " Defines a specification object for use with faceted and repeated small multiples.\n\n    spec = ...\n    toVegaLite\n        [ facet [ RowBy [ FName \"Origin\", FmType Nominal ] ]\n        , specifcation spec\n        ]\n\n",
        "type": "VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "stroke",
        "comment": " Encode a stroke channel. This acts in a similar way to encoding by `color` but\nonly affects the exterior boundary of marks. The first parameter is a list of mark\nchannel properties that characterise the way a data field is encoded by stroke.\nThe second parameter is a list of any previous channels to which this stroke channel\nshould be added.\n\n    stroke [ MName \"Species\", MmType Nominal ] []\n\nNote that if both `stroke` and `color` encodings are specified, `stroke` takes\nprecedence.\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "text",
        "comment": " Encode a text channel. The first parameter is a list of text channel properties\nthat define the channel. The second parameter is a list of any previous channels to\nwhich this channel is to be added. This is usually implicit when chaining a set\nof encodings together with functional composition. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#text)\nfor further details on the text and tooltip channels and\n[Vega-Lite formatting documentation](https://vega.github.io/vega-lite/docs/format.html)\nfor formatting the appearance of the text.\n\n    enc =\n        encoding\n            << position X [ PName \"miles\", PmType Quantitative ]\n            << position Y [ PName \"gas\", PmType Quantitative ]\n            << text [ TName \"miles\", TmType Quantitative ]\n\n",
        "type": "List VegaLite.TextChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "timeUnitAs",
        "comment": " Creates a new data field based on the given temporal binning. Unlike the\ndirect encoding binning, this transformation is named and so can be referred\nto in multiple encodings. The first parameter is the 'width' of each temporal bin,\nthe second is the field to bin and the third is name to give the newly binned\nfield. The final often implicit parameter is a list of previous transformations\nto which this is added. Note though that usually it is easer to apply the temporal\nbinning directly as part of the encoding as this will automatically format the\ntemporal axis. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/timeunit.html#transform)\nfor further details.\n\nThe following example takes a temporal dataset and encodes daily totals from it\ngrouping by month.\n\n    trans =\n        transform << timeUnitAs Month \"date\" \"monthly\"\n\n    enc =\n        encoding\n            << position X [ PName \"date\", PmType Temporal, PTimeUnit Day ]\n            << position Y [ PAggregate Sum, PmType Quantitative ]\n            << detail [ DName \"monthly\", DmType Temporal ]\n\n",
        "type": "VegaLite.TimeUnit -> String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "title",
        "comment": " Provide an optional title to be displayed in the visualization.\n\n    enc = ...\n    toVegaLite\n        [ title \"Population Growth\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "toVegaLite",
        "comment": " Convert a list of Vega-Lite specifications into a single JSON object that may be\npassed to Vega-Lite for graphics generation. Commonly these will include at least\na data, mark and encoding specification.\n\nWhile simple properties like `mark` may be provided directly, it is usually clearer\nto label more complex ones such as encodings as separate expressions. This becomes\nincreasingly helpful for visualizations that involve composition of layers, repeats\nand facets.\n\nSpecifications can be built up by chaining a series of functions (such as `dataColumn`\nor `position` in the example below). Functional composition using the `<<` operator\nallows this to be done compactly.\n\n    let\n        data =\n            dataFromColumns []\n                << dataColumn \"a\" (Strings [ \"C\", \"C\", \"D\", \"D\", \"E\", \"E\" ])\n                << dataColumn \"b\" (Numbers [ 2, 7, 1, 2, 6, 8 ])\n\n        enc =\n            encoding\n                << position X [ PName \"a\", PmType Nominal ]\n                << position Y [ PName \"b\", PmType Quantitative, PAggregate Mean ]\n    in\n    toVegaLite [ data [], mark Bar [], enc [] ]\n\n",
        "type": "List ( VegaLite.VLProperty, VegaLite.Spec ) -> VegaLite.Spec"
      },
      {
        "name": "tooltip",
        "comment": " Encode a tooltip channel. The first parameter is a list of text channel properties\nthat define the channel. The second parameter is a list of any previous channels to\nwhich this channel is to be added. This is usually implicit when chaining a\nset of encodings together with functional composition. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#text)\nfor further details on the text and tooltip channels and\n[Vega-Lite formatting documentation](https://vega.github.io/vega-lite/docs/format.html)\nfor formatting the appearance of the text.\n\n      enc =\n          encoding\n              << position X [ PName \"Horsepower\", PmType Quantitative ]\n              << position Y [ PName \"Miles_per_Gallon\", PmType Quantitative ]\n              << tooltip [ TName \"Year\", TmType Temporal, TFormat \"%Y\" ]\n\n",
        "type": "List VegaLite.TextChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "transform",
        "comment": " Create a single transform from a list of transformation specifications. Note\nthat the order of transformations can be important, especially if labels created\nwith `calculateAs`, `timeUnitAs` and `binAs` are used in other transformations.\nUsing the functional composition pipeline idiom (as example below) allows you to\nprovide the transformations in the order intended in a clear manner.\n\n    trans =\n        transform\n            << filter (FExpr \"datum.year == 2010\")\n            << calculateAs \"datum.sex == 2 ? 'Female' : 'Male'\" \"gender\"\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "utc",
        "comment": " Provides a UTC version of a given a time (coordinated universal time, independent\nof local time zones or daylight saving).\nFor example,\n\n    encoding\n        << position X [ PName \"date\", PmType Temporal, PTimeUnit (utc YearMonthDateHours) ]\n\n",
        "type": "VegaLite.TimeUnit -> VegaLite.TimeUnit"
      },
      {
        "name": "vConcat",
        "comment": " Assigns a list of specifications to be juxtaposed vertically in a visualization.\n\n    let\n        spec1 = ...\n        spec2 = ...\n    in\n    toVegaLite\n        [ dataFromUrl \"data/driving.json\" []\n        , vConcat [ spec1, spec2 ]\n        ]\n\n",
        "type": "List VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "width",
        "comment": " Override the default width of the visualization. If not specified the width\nwill be calculated based on the content of the visualization.\n\n    enc = ...\n    toVegaLite\n        [ width 500\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "Float -> ( VegaLite.VLProperty, VegaLite.Spec )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]