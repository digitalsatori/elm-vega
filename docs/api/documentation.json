[
  {
    "name": "VegaLite",
    "comment": " This module allows you to create Vega-Lite specifications in Elm. A specification\nis stored as a JSON object which can be sent to a Vega-Lite compiler to generate\nthe graphics. While this a 'pure' Elm library, to create the graphical output you\nprobably want to send a Vega-Lite specification generated by `toVegaLite` via a\nport to some JavaScript that invokes the Vega-Lite runtime.\n\n\n# Creating A Vega-Lite Specification\n\n@docs toVegaLite\n@docs VLProperty\n@docs Spec\n@docs LabelledSpec\n@docs combineSpecs\n\n\n# Creating the Data Specification\n\nFunctions and types for declaring the input data to the visualization.\n\n@docs dataFromUrl\n@docs dataFromColumns\n@docs dataFromRows\n@docs dataFromJson\n@docs dataFromSource\n@docs datasets\n@docs dataColumn\n@docs dataRow\n@docs geometry\n@docs geoFeatureCollection\n@docs geometryCollection\n@docs Data\n@docs DataColumn\n@docs DataRow\n@docs Format\n@docs Geometry\n@docs DataType\n\n\n# Creating the Transform Specification\n\nFunctions and types for declaring the transformation rules that are applied to\ndata fields or geospatial coordinates before they are encoded visually.\n\n@docs transform\n@docs projection\n@docs ProjectionProperty\n@docs Projection\n@docs ClipRect\n\n\n## Aggregation\n\n@docs aggregate\n@docs Operation\n@docs opAs\n@docs timeUnitAs\n\n\n## Binning\n\n@docs bin\n@docs binAs\n@docs BinProperty\n\n\n## Data Calculation\n\n@docs calculateAs\n\n\n## Filtering\n\n@docs filter\n@docs Filter\n@docs FilterRange\n\n\n## Relational Joining (lookup)\n\n@docs lookup\n@docs lookupAs\n\n\n# Creating the Mark Specification\n\nTypes and functions for declaring the type of visual marks used in the visualization.\n\n@docs mark\n@docs Mark\n@docs MarkProperty\n@docs MarkOrientation\n@docs MarkInterpolation\n@docs Symbol\n@docs Cursor\n\n\n# Creating the Encoding Specification\n\nTypes and functions for declaring which data fields are mapped to which channels.\nChannels can include position on screen (e.g. `X`,`Y`), visual mark properties\n(e.g. color, size, stroke, shape), text, hyperlinks, ordering, level of detail and facets\n(for composed visualizations). All can be further customised via a series of properties\nfor determining how that encoding is implemented (e.g. scaling, sorting, spacing).\n\n@docs encoding\n@docs Measurement\n\n\n## Position channel\n\nRelates to where something appears in the visualization.\n\n@docs position\n@docs PositionChannel\n@docs Position\n@docs SortProperty\n@docs StackProperty\n@docs AxisProperty\n@docs OverlapStrategy\n@docs Side\n@docs HAlign\n@docs VAlign\n@docs FontWeight\n@docs TimeUnit\n@docs utc\n\n\n## Mark channels\n\nRelate to the appearance of the visual marks in the visualization such as their\ncolor or size.\n\n@docs size\n@docs color\n@docs fill\n@docs stroke\n@docs opacity\n@docs shape\n@docs MarkChannel\n@docs LegendProperty\n@docs Legend\n@docs LegendOrientation\n@docs LegendValues\n\n\n## Text Channels\n\nRelate to the appearance of the text and tooltip elements of the visualization.\n\n@docs text\n@docs tooltip\n@docs TextChannel\n\n\n## Hyperlink Channel\n\nRelates to a clickable URL destination of a mark. Note that unlike most other\nchannels, the hyperlink channel has no direct visual expression other than the\noption of changing the cursor style when hovering, so an encoding will usually\npair hyperlinks with other visual channels such as marks or texts.\n\n@docs hyperlink\n@docs HyperlinkChannel\n\n\n## Order channels\n\nChannels that relate to the order of data fields such as for sorting stacking order\nor order of data points in a connected scatterplot. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#order)\nfor further details.\n\n@docs order\n@docs OrderChannel\n\n\n## Facet channels\n\nChannels for faceting single plots into small multiples. Can be used to create\ntrellis plots or other arrangements in rows and columns. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#facet)\nfor further details. See also, 'faceted view composition' for a more flexible (but\nmore verbose) way of defining faceted views.\n\n@docs row\n@docs column\n\n\n## Level of detail Channel\n\nUsed for grouping data but without changing the visual appearance of a mark. When,\nfor example, a field is encoded by color, all data items with the same value for\nthat field are given the same color. When a detail channel encodes a field, all\ndata items with the same value are placed in the same group. This allows, for example\na line chart with multiple lines to be created – one for each group. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#detail)\nfor more information.\n\n@docs detail\n@docs DetailChannel\n\n\n## Scaling\n\nUsed to specify how the encoding of a data field should be applied.\n\n@docs ScaleProperty\n@docs Scale\n@docs categoricalDomainMap\n@docs domainRangeMap\n@docs ScaleDomain\n@docs ScaleRange\n@docs ScaleNice\n@docs CInterpolate\n\n\n# Creating view compositions\n\nViews can be combined to create more complex multiview displays. This may involve\nlayering views on top of each other (superposition) or laying them out in adjacent\nspaces (juxtaposition using `repeat`, `facet`, `hConcat` or `vConcat`). Where different\nviews have potentially conflicting channels (for example, two position scales in\na layered visualization) the rules for resolving them can be defined with `resolve`.\nFor details of creating composite views see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/composition.html)\n\n@docs layer\n@docs hConcat\n@docs vConcat\n@docs resolve\n@docs resolution\n@docs Resolve\n@docs Channel\n@docs Resolution\n\n\n## Faceted views\n\nThese are small multiples each of which show subsets of the same dataset. The specification\ndetermines which field should be used to determine subsets along with their spatial\narrangement (in rows or columns). For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html)\n\n@docs repeat\n@docs RepeatFields\n@docs facet\n@docs FacetMapping\n@docs FacetChannel\n@docs asSpec\n@docs specification\n@docs Arrangement\n@docs HeaderProperty\n\n\n# Creating Selections for Interaction\n\nSelections are the way in which interactions (such as clicking or dragging) can be\nresponded to in a visualization. They transform interactions into data queries.\nFor details, see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html).\n\n@docs selection\n@docs select\n@docs Selection\n@docs SelectionProperty\n@docs Binding\n@docs InputProperty\n@docs SelectionResolution\n@docs SelectionMarkProperty\n\n\n## Making conditional channel encodings\n\nSometimes it is useful to make channel encoding conditional on something. For example,\non the result of some interaction such as clicking or dragging or some data property\nsuch whether null or an outlier. `MSelectionCondition` (and `TSelectionCondition`) will\nencode a mark (or text) dependent on an interactive selection. `MDataCondition`\n(and `TDataCondition`) will encode it dependening on some data property.\n\nFor interaction, once a selection has been defined and named, supplying a set of\n`MSelectionCondition` encodings allow mark encodings to become dependent on that selection.\n`MSelectionCondition` is followed firstly by a Boolean expression relating to the\nselection upon which it is dependent, then an 'if' and an 'else' clause. Each clause\nis a list of mark field encodings that should be applied when the selection is true\n(the 'if clause') and when it is false (the 'else clause'). The color encoding below\nis saying \"whenever data marks are selected with an interval mouse drag, encode\nthe cylinder field with an ordinal color scheme, else make them grey\".\n\n      sel =\n          selection << select \"myBrush\" Interval []\n\n      enc =\n          encoding\n              << position X [ PName \"Horsepower\", PmType Quantitative ]\n              << position Y [ PName \"Miles_per_Gallon\", PmType Quantitative ]\n              << color\n                  [ MSelectionCondition (SelectionName \"myBrush\")\n                      [ MName \"Cylinders\", MmType Ordinal ]\n                      [ MString \"grey\" ]\n                  ]\n\nIn a similar way, `MDataCondition` will encocode a mark in one of two ways depending\non whether a predicate test is satisfied.\n\n      enc =\n          encoding\n              << position X [ PName \"IMDB_Rating\", PmType Quantitative ]\n              << position Y [ PName \"Rotten_Tomatoes_Rating\", PmType Quantitative ]\n                << color\n                    [ MDataCondition\n                        (Or (Expr \"datum.IMDB_Rating === null\")\n                            (Expr \"datum.Rotten_Tomatoes_Rating === null\")\n                        )\n                        [ MString \"#ddd\" ]\n                        [ MString \"#0099ee\" ]\n                    ]\n\nFor details, see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/condition.html).\n\n@docs BooleanOp\n\n\n# Global Configuration\n\nConfiguration options that affect the entire visualization. These are in addition\nto the data and transform options described above.\n\n@docs name\n@docs title\n@docs description\n@docs height\n@docs width\n@docs padding\n@docs autosize\n@docs background\n@docs configure\n@docs configuration\n@docs ConfigurationProperty\n@docs Autosize\n@docs Padding\n@docs AxisConfig\n@docs LegendConfig\n@docs ScaleConfig\n@docs TitleConfig\n@docs APosition\n@docs ViewConfig\n@docs RangeConfig\n\n\n# General Data types\n\nIn addition to more general data types like integers and string, the following types\ncan carry data used in specifications.\n\n@docs DataValue\n@docs DataValues\n@docs DateTime\n@docs MonthName\n@docs DayName\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Convenience type annotation label for use with data generation functions.\n\n    myRegion : List DataColumn -> Data\n    myRegion =\n        dataFromColumns []\n            << dataColumn \"easting\" (Numbers [ -3, 4, 4, -3, -3 ])\n            << dataColumn \"northing\" (Numbers [ 52, 52, 45, 45, 52 ])\n\n",
        "args": [],
        "type": "( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "DataColumn",
        "comment": " Represents a single column of data. Used when generating inline data with\n`dataColumn`.\n",
        "args": [],
        "type": "List VegaLite.LabelledSpec"
      },
      {
        "name": "DataRow",
        "comment": " Represents a single row of data. Used when generating inline data with\n`dataRow`.\n",
        "args": [],
        "type": "VegaLite.Spec"
      },
      {
        "name": "LabelledSpec",
        "comment": " Represents a named Vega-Lite specification, usually generated by an elm-vega\nfunction. You shouldn't need to create `LabelledSpec` tuples directly, but they\ncan be useful for type annotations.\n",
        "args": [],
        "type": "( String, VegaLite.Spec )"
      },
      {
        "name": "Spec",
        "comment": " Represents part or all of Vega-Lite specification. Specs can be (and usually\nare) nested. They can range from a single Boolean value up to the entire Vega-Lite\nspecification.\n",
        "args": [],
        "type": "Json.Encode.Value"
      }
    ],
    "types": [
      {
        "name": "APosition",
        "comment": " Indicates the anchor position for some text.\n",
        "args": [],
        "cases": [
          [
            "AStart",
            []
          ],
          [
            "AMiddle",
            []
          ],
          [
            "AEnd",
            []
          ]
        ]
      },
      {
        "name": "Arrangement",
        "comment": " Idenfies whether a repeated/faceted view is arranged in rows or columns.\n",
        "args": [],
        "cases": [
          [
            "Column",
            []
          ],
          [
            "Row",
            []
          ]
        ]
      },
      {
        "name": "Autosize",
        "comment": " Indicates the auto-sizing characteristics of the visualization such as amount\nof padding, whether it should fill the parent container etc. For more details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/size.html#autosize)\n",
        "args": [],
        "cases": [
          [
            "AContent",
            []
          ],
          [
            "AFit",
            []
          ],
          [
            "ANone",
            []
          ],
          [
            "APad",
            []
          ],
          [
            "APadding",
            []
          ],
          [
            "AResize",
            []
          ]
        ]
      },
      {
        "name": "AxisConfig",
        "comment": " Axis configuration options for customising all axes. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/axis.html#general-config)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "BandPosition",
            [
              "Float"
            ]
          ],
          [
            "Domain",
            [
              "Bool"
            ]
          ],
          [
            "DomainColor",
            [
              "String"
            ]
          ],
          [
            "DomainWidth",
            [
              "Float"
            ]
          ],
          [
            "MaxExtent",
            [
              "Float"
            ]
          ],
          [
            "MinExtent",
            [
              "Float"
            ]
          ],
          [
            "Grid",
            [
              "Bool"
            ]
          ],
          [
            "GridColor",
            [
              "String"
            ]
          ],
          [
            "GridDash",
            [
              "List Float"
            ]
          ],
          [
            "GridOpacity",
            [
              "Float"
            ]
          ],
          [
            "GridWidth",
            [
              "Float"
            ]
          ],
          [
            "Labels",
            [
              "Bool"
            ]
          ],
          [
            "LabelAngle",
            [
              "Float"
            ]
          ],
          [
            "LabelColor",
            [
              "String"
            ]
          ],
          [
            "LabelFont",
            [
              "String"
            ]
          ],
          [
            "LabelFontSize",
            [
              "Float"
            ]
          ],
          [
            "LabelLimit",
            [
              "Float"
            ]
          ],
          [
            "LabelOverlap",
            [
              "VegaLite.OverlapStrategy"
            ]
          ],
          [
            "LabelPadding",
            [
              "Float"
            ]
          ],
          [
            "ShortTimeLabels",
            [
              "Bool"
            ]
          ],
          [
            "Ticks",
            [
              "Bool"
            ]
          ],
          [
            "TickColor",
            [
              "String"
            ]
          ],
          [
            "TickRound",
            [
              "Bool"
            ]
          ],
          [
            "TickSize",
            [
              "Float"
            ]
          ],
          [
            "TickWidth",
            [
              "Float"
            ]
          ],
          [
            "TitleAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "TitleAngle",
            [
              "Float"
            ]
          ],
          [
            "TitleBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "TitleColor",
            [
              "String"
            ]
          ],
          [
            "TitleFont",
            [
              "String"
            ]
          ],
          [
            "TitleFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "TitleFontSize",
            [
              "Float"
            ]
          ],
          [
            "TitleLimit",
            [
              "Float"
            ]
          ],
          [
            "TitleMaxLength",
            [
              "Float"
            ]
          ],
          [
            "TitlePadding",
            [
              "Float"
            ]
          ],
          [
            "TitleX",
            [
              "Float"
            ]
          ],
          [
            "TitleY",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "AxisProperty",
        "comment": " Axis customisation properties. These are used for customising individual axes.\nTo configure all axes, use `AxisConfig` with a `configuration` instead. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/axis.html#axis-properties)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "AxDomain",
            [
              "Bool"
            ]
          ],
          [
            "AxFormat",
            [
              "String"
            ]
          ],
          [
            "AxGrid",
            [
              "Bool"
            ]
          ],
          [
            "AxLabelAngle",
            [
              "Float"
            ]
          ],
          [
            "AxLabelOverlap",
            [
              "VegaLite.OverlapStrategy"
            ]
          ],
          [
            "AxLabelPadding",
            [
              "Float"
            ]
          ],
          [
            "AxLabels",
            [
              "Bool"
            ]
          ],
          [
            "AxMaxExtent",
            [
              "Float"
            ]
          ],
          [
            "AxMinExtent",
            [
              "Float"
            ]
          ],
          [
            "AxOffset",
            [
              "Float"
            ]
          ],
          [
            "AxOrient",
            [
              "VegaLite.Side"
            ]
          ],
          [
            "AxPosition",
            [
              "Float"
            ]
          ],
          [
            "AxTicks",
            [
              "Bool"
            ]
          ],
          [
            "AxTickCount",
            [
              "Int"
            ]
          ],
          [
            "AxTickSize",
            [
              "Float"
            ]
          ],
          [
            "AxTitle",
            [
              "String"
            ]
          ],
          [
            "AxTitleAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "AxTitleAngle",
            [
              "Float"
            ]
          ],
          [
            "AxTitleMaxLength",
            [
              "Float"
            ]
          ],
          [
            "AxTitlePadding",
            [
              "Float"
            ]
          ],
          [
            "AxValues",
            [
              "List Float"
            ]
          ],
          [
            "AxDates",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "AxZIndex",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "BinProperty",
        "comment": " Type of binning property to customise. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bin.html) for\nmore details.\n",
        "args": [],
        "cases": [
          [
            "Base",
            [
              "Float"
            ]
          ],
          [
            "Divide",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "Extent",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "MaxBins",
            [
              "Int"
            ]
          ],
          [
            "MinStep",
            [
              "Float"
            ]
          ],
          [
            "Nice",
            [
              "Bool"
            ]
          ],
          [
            "Step",
            [
              "Float"
            ]
          ],
          [
            "Steps",
            [
              "List Float"
            ]
          ]
        ]
      },
      {
        "name": "Binding",
        "comment": " Describes the binding property of a selection based on some HTML input element\nsuch as a checkbox or radio button. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bind.html#scale-binding)\nand the [Vega input binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "args": [],
        "cases": [
          [
            "IRange",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ICheckbox",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IRadio",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ISelect",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IText",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "INumber",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IDate",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ITime",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IMonth",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IWeek",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IDateTimeLocal",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "ITel",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ],
          [
            "IColor",
            [
              "String",
              "List VegaLite.InputProperty"
            ]
          ]
        ]
      },
      {
        "name": "BooleanOp",
        "comment": " Used for creating logical compositions. For example\n\n    color\n        [ MSelectionCondition (Or (SelectionName \"alex\") (SelectionName \"morgan\"))\n            [ MAggregate Count, MName \"*\", MmType Quantitative ]\n            [ MString \"gray\" ]\n        ]\n\nLogical compositions can be nested to any level. For example\n\n    Not (And (Expr \"datum.IMDB_Rating === null\") (Expr \"datum.Rotten_Tomatoes_Rating === null\") )\n\n",
        "args": [],
        "cases": [
          [
            "Expr",
            [
              "String"
            ]
          ],
          [
            "Selection",
            [
              "String"
            ]
          ],
          [
            "SelectionName",
            [
              "String"
            ]
          ],
          [
            "And",
            [
              "VegaLite.BooleanOp",
              "VegaLite.BooleanOp"
            ]
          ],
          [
            "Or",
            [
              "VegaLite.BooleanOp",
              "VegaLite.BooleanOp"
            ]
          ],
          [
            "Not",
            [
              "VegaLite.BooleanOp"
            ]
          ]
        ]
      },
      {
        "name": "CInterpolate",
        "comment": " Indicates the type of color interpolation to apply, when mapping a data field\nonto a color scale. Note that color interpolation cannot be applied with the default\n`sequential` color scale, so additionally, you should set the `SType` to another\ncontinuous scale such as `linear`, `pow` etc.\n\nOf the interpolation options below `Rgb`, `CubeHelix` and `CubeHelixLong` also require\na `gamma` value (with 1 being a recommended default to provide). For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#continuous).\n\n",
        "args": [],
        "cases": [
          [
            "CubeHelix",
            [
              "Float"
            ]
          ],
          [
            "CubeHelixLong",
            [
              "Float"
            ]
          ],
          [
            "Hcl",
            []
          ],
          [
            "HclLong",
            []
          ],
          [
            "Hsl",
            []
          ],
          [
            "HslLong",
            []
          ],
          [
            "Lab",
            []
          ],
          [
            "Rgb",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Channel",
        "comment": " Indicates a channel type to be used in a resolution specification.\n",
        "args": [],
        "cases": [
          [
            "ChX",
            []
          ],
          [
            "ChY",
            []
          ],
          [
            "ChX2",
            []
          ],
          [
            "ChY2",
            []
          ],
          [
            "ChColor",
            []
          ],
          [
            "ChOpacity",
            []
          ],
          [
            "ChShape",
            []
          ],
          [
            "ChSize",
            []
          ]
        ]
      },
      {
        "name": "ClipRect",
        "comment": " Specifies a clipping rectangle in pixel units. In `LTRB` the order of the four\nnumbers that follow are 'left', 'top', 'right' then 'bottom'. Used when defining\nthe clip extent of a map projection.\n",
        "args": [],
        "cases": [
          [
            "NoClip",
            []
          ],
          [
            "LTRB",
            [
              "Float",
              "Float",
              "Float",
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "ConfigurationProperty",
        "comment": " Type of configuration property to customise. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/config.html)\nfor details.\n",
        "args": [],
        "cases": [
          [
            "AreaStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Autosize",
            [
              "List VegaLite.Autosize"
            ]
          ],
          [
            "Axis",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisX",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisY",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisLeft",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisRight",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisTop",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisBottom",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "AxisBand",
            [
              "List VegaLite.AxisConfig"
            ]
          ],
          [
            "Background",
            [
              "String"
            ]
          ],
          [
            "BarStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "CircleStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "CountTitle",
            [
              "String"
            ]
          ],
          [
            "FieldTitle",
            [
              "VegaLite.FieldTitleProperty"
            ]
          ],
          [
            "Legend",
            [
              "List VegaLite.LegendConfig"
            ]
          ],
          [
            "LineStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "MarkStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "NamedStyle",
            [
              "String",
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "NumberFormat",
            [
              "String"
            ]
          ],
          [
            "Padding",
            [
              "VegaLite.Padding"
            ]
          ],
          [
            "PointStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Projection",
            [
              "List VegaLite.ProjectionProperty"
            ]
          ],
          [
            "Range",
            [
              "List VegaLite.RangeConfig"
            ]
          ],
          [
            "RectStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "RemoveInvalid",
            [
              "Bool"
            ]
          ],
          [
            "RuleStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Scale",
            [
              "List VegaLite.ScaleConfig"
            ]
          ],
          [
            "SelectionStyle",
            [
              "List ( VegaLite.Selection, List VegaLite.SelectionProperty )"
            ]
          ],
          [
            "SquareStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "Stack",
            [
              "VegaLite.StackProperty"
            ]
          ],
          [
            "TextStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "TickStyle",
            [
              "List VegaLite.MarkProperty"
            ]
          ],
          [
            "TitleStyle",
            [
              "List VegaLite.TitleConfig"
            ]
          ],
          [
            "TimeFormat",
            [
              "String"
            ]
          ],
          [
            "View",
            [
              "List VegaLite.ViewConfig"
            ]
          ]
        ]
      },
      {
        "name": "Cursor",
        "comment": " Represents the type of cursor to display. For an explanation of each type,\nsee the [CSS documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Keyword%20values)\n",
        "args": [],
        "cases": [
          [
            "CAuto",
            []
          ],
          [
            "CDefault",
            []
          ],
          [
            "CNone",
            []
          ],
          [
            "CContextMenu",
            []
          ],
          [
            "CHelp",
            []
          ],
          [
            "CPointer",
            []
          ],
          [
            "CProgress",
            []
          ],
          [
            "CWait",
            []
          ],
          [
            "CCell",
            []
          ],
          [
            "CCrosshair",
            []
          ],
          [
            "CText",
            []
          ],
          [
            "CVerticalText",
            []
          ],
          [
            "CAlias",
            []
          ],
          [
            "CCopy",
            []
          ],
          [
            "CMove",
            []
          ],
          [
            "CNoDrop",
            []
          ],
          [
            "CNotAllowed",
            []
          ],
          [
            "CAllScroll",
            []
          ],
          [
            "CColResize",
            []
          ],
          [
            "CRowResize",
            []
          ],
          [
            "CNResize",
            []
          ],
          [
            "CEResize",
            []
          ],
          [
            "CSResize",
            []
          ],
          [
            "CWResize",
            []
          ],
          [
            "CNEResize",
            []
          ],
          [
            "CNWResize",
            []
          ],
          [
            "CSEResize",
            []
          ],
          [
            "CSWResize",
            []
          ],
          [
            "CEWResize",
            []
          ],
          [
            "CNSResize",
            []
          ],
          [
            "CNESWResize",
            []
          ],
          [
            "CNWSEResize",
            []
          ],
          [
            "CZoomIn",
            []
          ],
          [
            "CZoomOut",
            []
          ],
          [
            "CGrab",
            []
          ],
          [
            "CGrabbing",
            []
          ]
        ]
      },
      {
        "name": "DataType",
        "comment": " Indicates the type of data to be parsed when reading input data. For `FoDate`\nand `FoUtc`, the formatting specification can be specified using\n[D3's formatting specifiers](https://vega.github.io/vega-lite/docs/data.html#format)\nor left as an empty string if default date formatting is to be applied. Care should\nbe taken when assuming default parsing of dates because different browsers can\nparse dates differently. Being explicit about the date format is usually safer.\n",
        "args": [],
        "cases": [
          [
            "FoNumber",
            []
          ],
          [
            "FoBoolean",
            []
          ],
          [
            "FoDate",
            [
              "String"
            ]
          ],
          [
            "FoUtc",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "DataValue",
        "comment": " A single data value. This is used when a function can accept values of different\ntypes (e.g. either a number or a string).\n",
        "args": [],
        "cases": [
          [
            "Boolean",
            [
              "Bool"
            ]
          ],
          [
            "DateTime",
            [
              "List VegaLite.DateTime"
            ]
          ],
          [
            "Number",
            [
              "Float"
            ]
          ],
          [
            "Str",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "DataValues",
        "comment": " A list of data values. This is used when a function can accept lists of\ndifferent types (e.g. either a list of numbers or a list of strings).\n",
        "args": [],
        "cases": [
          [
            "Booleans",
            [
              "List Bool"
            ]
          ],
          [
            "DateTimes",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "Numbers",
            [
              "List Float"
            ]
          ],
          [
            "Strings",
            [
              "List String"
            ]
          ]
        ]
      },
      {
        "name": "DateTime",
        "comment": " Allows a date or time to be represented. This is typically part of a list of\n`DateTime` items to provide a specific point in time. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/types.html#datetime).\n",
        "args": [],
        "cases": [
          [
            "DTYear",
            [
              "Int"
            ]
          ],
          [
            "DTQuarter",
            [
              "Int"
            ]
          ],
          [
            "DTMonth",
            [
              "VegaLite.MonthName"
            ]
          ],
          [
            "DTDate",
            [
              "Int"
            ]
          ],
          [
            "DTDay",
            [
              "VegaLite.DayName"
            ]
          ],
          [
            "DTHours",
            [
              "Int"
            ]
          ],
          [
            "DTMinutes",
            [
              "Int"
            ]
          ],
          [
            "DTSeconds",
            [
              "Int"
            ]
          ],
          [
            "DTMilliseconds",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "DayName",
        "comment": " Identifies the day of the week.\n",
        "args": [],
        "cases": [
          [
            "Mon",
            []
          ],
          [
            "Tue",
            []
          ],
          [
            "Wed",
            []
          ],
          [
            "Thu",
            []
          ],
          [
            "Fri",
            []
          ],
          [
            "Sat",
            []
          ],
          [
            "Sun",
            []
          ]
        ]
      },
      {
        "name": "DetailChannel",
        "comment": " Level of detail channel properties used for creating a grouped channel encoding.\n",
        "args": [],
        "cases": [
          [
            "DName",
            [
              "String"
            ]
          ],
          [
            "DmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "DBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "DTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "DAggregate",
            [
              "VegaLite.Operation"
            ]
          ]
        ]
      },
      {
        "name": "FacetChannel",
        "comment": " Types of facet channel property used for creating a composed facet view of small\nmultiples.\n",
        "args": [],
        "cases": [
          [
            "FName",
            [
              "String"
            ]
          ],
          [
            "FmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "FBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "FAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "FTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "FHeader",
            [
              "List VegaLite.HeaderProperty"
            ]
          ]
        ]
      },
      {
        "name": "FacetMapping",
        "comment": " Provides details of the mapping between a row or column and its field\ndefinitions in a set of faceted small multiples. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html#mapping)\n",
        "args": [],
        "cases": [
          [
            "ColumnBy",
            [
              "List VegaLite.FacetChannel"
            ]
          ],
          [
            "RowBy",
            [
              "List VegaLite.FacetChannel"
            ]
          ]
        ]
      },
      {
        "name": "Filter",
        "comment": " Type of filtering operation. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/filter.html)\nfor details.\n",
        "args": [],
        "cases": [
          [
            "FEqual",
            [
              "String",
              "VegaLite.DataValue"
            ]
          ],
          [
            "FExpr",
            [
              "String"
            ]
          ],
          [
            "FCompose",
            [
              "VegaLite.BooleanOp"
            ]
          ],
          [
            "FSelection",
            [
              "String"
            ]
          ],
          [
            "FOneOf",
            [
              "String",
              "VegaLite.DataValues"
            ]
          ],
          [
            "FRange",
            [
              "String",
              "VegaLite.FilterRange"
            ]
          ]
        ]
      },
      {
        "name": "FilterRange",
        "comment": " A pair of filter range data values. The first argument is the inclusive minimum\nvale to accept and the second the inclusive maximum.\n",
        "args": [],
        "cases": [
          [
            "NumberRange",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "DateRange",
            [
              "List VegaLite.DateTime",
              "List VegaLite.DateTime"
            ]
          ]
        ]
      },
      {
        "name": "FontWeight",
        "comment": " Indicates the weight options for a font.\n",
        "args": [],
        "cases": [
          [
            "Bold",
            []
          ],
          [
            "Bolder",
            []
          ],
          [
            "Lighter",
            []
          ],
          [
            "Normal",
            []
          ],
          [
            "W100",
            []
          ],
          [
            "W200",
            []
          ],
          [
            "W300",
            []
          ],
          [
            "W400",
            []
          ],
          [
            "W500",
            []
          ],
          [
            "W600",
            []
          ],
          [
            "W700",
            []
          ],
          [
            "W800",
            []
          ],
          [
            "W900",
            []
          ]
        ]
      },
      {
        "name": "Format",
        "comment": " Specifies the type of format a data source uses. If the format is indicated by\nthe file name extension (`.tsv`, `.csv`, `.json`) there is no need to indicate the\nformat explicitly. However this can be useful if (a) the filename extension does not\nindicate type (e.g. `.txt`) or you wish to customise the parsing of a file. For\nexample, when specifying the `JSON` format, its parameter indicates the name of\nproperty field containing the attribute data to extract. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format).\n",
        "args": [],
        "cases": [
          [
            "JSON",
            [
              "String"
            ]
          ],
          [
            "CSV",
            []
          ],
          [
            "TSV",
            []
          ],
          [
            "TopojsonFeature",
            [
              "String"
            ]
          ],
          [
            "TopojsonMesh",
            [
              "String"
            ]
          ],
          [
            "Parse",
            [
              "List ( String, VegaLite.DataType )"
            ]
          ]
        ]
      },
      {
        "name": "Geometry",
        "comment": " Specifies the type and content of geometry specifications for programatically\ncreating GeoShapes. These can be mapped to the\n[GeoJson geometry object types](https://tools.ietf.org/html/rfc7946#section-3.1)\nwhere the pluralised type names refer to their `Multi` prefixed equivalent in the\nGeoJSON specification.\n",
        "args": [],
        "cases": [
          [
            "GeoPoint",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "GeoPoints",
            [
              "List ( Float, Float )"
            ]
          ],
          [
            "GeoLine",
            [
              "List ( Float, Float )"
            ]
          ],
          [
            "GeoLines",
            [
              "List (List ( Float, Float ))"
            ]
          ],
          [
            "GeoPolygon",
            [
              "List (List ( Float, Float ))"
            ]
          ],
          [
            "GeoPolygons",
            [
              "List (List (List ( Float, Float )))"
            ]
          ]
        ]
      },
      {
        "name": "HAlign",
        "comment": " Indicates the horizontal alignment of some text such as on an axis or legend.\n",
        "args": [],
        "cases": [
          [
            "AlignCenter",
            []
          ],
          [
            "AlignLeft",
            []
          ],
          [
            "AlignRight",
            []
          ]
        ]
      },
      {
        "name": "HeaderProperty",
        "comment": " Represents a facet header property. For details, see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html#header)\n",
        "args": [],
        "cases": [
          [
            "HFormat",
            [
              "String"
            ]
          ],
          [
            "HTitle",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "HyperlinkChannel",
        "comment": " Types of hyperlink channel property used for linking marks or text to URLs.\n",
        "args": [],
        "cases": [
          [
            "HName",
            [
              "String"
            ]
          ],
          [
            "HRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "HmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "HBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "HAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "HTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "HSelectionCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.HyperlinkChannel",
              "List VegaLite.HyperlinkChannel"
            ]
          ],
          [
            "HDataCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.HyperlinkChannel",
              "List VegaLite.HyperlinkChannel"
            ]
          ],
          [
            "HString",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "InputProperty",
        "comment": " GUI Input properties. The type of relevant property will depend on the type of\ninput element selected. For example an `InRange` (slider) can have numeric min,\nmax and step values; InSelect (selector) has a list of selection label options.\nFor details see the\n[Vega input element binding documentation](https://vega.github.io/vega/docs/signals/#bind).\nThe `debounce` property, available for all input types allows a delay in input event\nhandling to be added in order to avoid unnecessary event broadcasting. The `Element`\nproperty is an optional CSS selector indicating the parent element to which the\ninput element should be added. This allows the option of the input element to be\noutside the visualization container.\n",
        "args": [],
        "cases": [
          [
            "Debounce",
            [
              "Float"
            ]
          ],
          [
            "Element",
            [
              "String"
            ]
          ],
          [
            "InOptions",
            [
              "List String"
            ]
          ],
          [
            "InMin",
            [
              "Float"
            ]
          ],
          [
            "InMax",
            [
              "Float"
            ]
          ],
          [
            "InName",
            [
              "String"
            ]
          ],
          [
            "InStep",
            [
              "Float"
            ]
          ],
          [
            "InPlaceholder",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "Legend",
        "comment": " Indicates the type of legend to create. Gradient legends are usually used for\ncontinuous quantitative data while symbol legends used for categorical data.\n",
        "args": [],
        "cases": [
          [
            "Gradient",
            []
          ],
          [
            "Symbol",
            []
          ]
        ]
      },
      {
        "name": "LegendConfig",
        "comment": " Legend configuration options. For more detail see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/legend.html#config).\n",
        "args": [],
        "cases": [
          [
            "CornerRadius",
            [
              "Float"
            ]
          ],
          [
            "FillColor",
            [
              "String"
            ]
          ],
          [
            "Orient",
            [
              "VegaLite.LegendOrientation"
            ]
          ],
          [
            "Offset",
            [
              "Float"
            ]
          ],
          [
            "StrokeColor",
            [
              "String"
            ]
          ],
          [
            "LeStrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "LeStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "LePadding",
            [
              "Float"
            ]
          ],
          [
            "GradientLabelBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "GradientLabelLimit",
            [
              "Float"
            ]
          ],
          [
            "GradientLabelOffset",
            [
              "Float"
            ]
          ],
          [
            "GradientStrokeColor",
            [
              "String"
            ]
          ],
          [
            "GradientStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "GradientHeight",
            [
              "Float"
            ]
          ],
          [
            "GradientWidth",
            [
              "Float"
            ]
          ],
          [
            "LeLabelAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "LeLabelBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "LeLabelColor",
            [
              "String"
            ]
          ],
          [
            "LeLabelFont",
            [
              "String"
            ]
          ],
          [
            "LeLabelFontSize",
            [
              "Float"
            ]
          ],
          [
            "LeLabelLimit",
            [
              "Float"
            ]
          ],
          [
            "LeLabelOffset",
            [
              "Float"
            ]
          ],
          [
            "LeShortTimeLabels",
            [
              "Bool"
            ]
          ],
          [
            "EntryPadding",
            [
              "Float"
            ]
          ],
          [
            "SymbolColor",
            [
              "String"
            ]
          ],
          [
            "SymbolType",
            [
              "VegaLite.Symbol"
            ]
          ],
          [
            "SymbolSize",
            [
              "Float"
            ]
          ],
          [
            "SymbolStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "LeTitleAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "LeTitleBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "LeTitleColor",
            [
              "String"
            ]
          ],
          [
            "LeTitleFont",
            [
              "String"
            ]
          ],
          [
            "LeTitleFontSize",
            [
              "Float"
            ]
          ],
          [
            "LeTitleFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "LeTitleLimit",
            [
              "Float"
            ]
          ],
          [
            "LeTitlePadding",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "LegendOrientation",
        "comment": " Indicates the legend orientation. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/legend.html#config)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "BottomLeft",
            []
          ],
          [
            "BottomRight",
            []
          ],
          [
            "Left",
            []
          ],
          [
            "None",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "TopLeft",
            []
          ],
          [
            "TopRight",
            []
          ]
        ]
      },
      {
        "name": "LegendProperty",
        "comment": " Legend properties. For more detail see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/legend.html#legend-properties).\n",
        "args": [],
        "cases": [
          [
            "LEntryPadding",
            [
              "Float"
            ]
          ],
          [
            "LFormat",
            [
              "String"
            ]
          ],
          [
            "LOffset",
            [
              "Float"
            ]
          ],
          [
            "LOrient",
            [
              "VegaLite.LegendOrientation"
            ]
          ],
          [
            "LPadding",
            [
              "Float"
            ]
          ],
          [
            "LTickCount",
            [
              "Float"
            ]
          ],
          [
            "LTitle",
            [
              "String"
            ]
          ],
          [
            "LType",
            [
              "VegaLite.Legend"
            ]
          ],
          [
            "LValues",
            [
              "VegaLite.LegendValues"
            ]
          ],
          [
            "LZIndex",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "LegendValues",
        "comment": " A list of data values suitable for setting legend values.\n",
        "args": [],
        "cases": [
          [
            "LDateTimes",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "LNumbers",
            [
              "List Float"
            ]
          ],
          [
            "LStrings",
            [
              "List String"
            ]
          ]
        ]
      },
      {
        "name": "Mark",
        "comment": " Type of visual mark used to represent data in the visualization.\n",
        "args": [],
        "cases": [
          [
            "Area",
            []
          ],
          [
            "Bar",
            []
          ],
          [
            "Circle",
            []
          ],
          [
            "Geoshape",
            []
          ],
          [
            "Line",
            []
          ],
          [
            "Point",
            []
          ],
          [
            "Rect",
            []
          ],
          [
            "Rule",
            []
          ],
          [
            "Square",
            []
          ],
          [
            "Text",
            []
          ],
          [
            "Tick",
            []
          ]
        ]
      },
      {
        "name": "MarkChannel",
        "comment": " Mark channel properties used for creating a mark channel encoding. Providing\nan empty list to `MScale`, or `MLegend` removes the scaling and legend respectively.\n",
        "args": [],
        "cases": [
          [
            "MName",
            [
              "String"
            ]
          ],
          [
            "MRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "MmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "MScale",
            [
              "List VegaLite.ScaleProperty"
            ]
          ],
          [
            "MBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "MTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "MAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "MLegend",
            [
              "List VegaLite.LegendProperty"
            ]
          ],
          [
            "MSelectionCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.MarkChannel",
              "List VegaLite.MarkChannel"
            ]
          ],
          [
            "MDataCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.MarkChannel",
              "List VegaLite.MarkChannel"
            ]
          ],
          [
            "MPath",
            [
              "String"
            ]
          ],
          [
            "MNumber",
            [
              "Float"
            ]
          ],
          [
            "MString",
            [
              "String"
            ]
          ],
          [
            "MBoolean",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "MarkInterpolation",
        "comment": " Indicates mark interpolation style. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/mark.html#mark-def)\nfor details.\n",
        "args": [],
        "cases": [
          [
            "Basis",
            []
          ],
          [
            "BasisClosed",
            []
          ],
          [
            "BasisOpen",
            []
          ],
          [
            "Bundle",
            []
          ],
          [
            "Cardinal",
            []
          ],
          [
            "CardinalClosed",
            []
          ],
          [
            "CardinalOpen",
            []
          ],
          [
            "Linear",
            []
          ],
          [
            "LinearClosed",
            []
          ],
          [
            "Monotone",
            []
          ],
          [
            "StepAfter",
            []
          ],
          [
            "StepBefore",
            []
          ],
          [
            "Stepwise",
            []
          ]
        ]
      },
      {
        "name": "MarkOrientation",
        "comment": " Indicates desired orientation of a mark (e.g. horizontally or vertically\noriented bars.)\n",
        "args": [],
        "cases": [
          [
            "Horizontal",
            []
          ],
          [
            "Vertical",
            []
          ]
        ]
      },
      {
        "name": "MarkProperty",
        "comment": " Properties for customising the appearance of a mark. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/mark.html#config).\n",
        "args": [],
        "cases": [
          [
            "MAlign",
            [
              "VegaLite.HAlign"
            ]
          ],
          [
            "MAngle",
            [
              "Float"
            ]
          ],
          [
            "MBandSize",
            [
              "Float"
            ]
          ],
          [
            "MBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "MBinSpacing",
            [
              "Float"
            ]
          ],
          [
            "MClip",
            [
              "Bool"
            ]
          ],
          [
            "MColor",
            [
              "String"
            ]
          ],
          [
            "MCursor",
            [
              "VegaLite.Cursor"
            ]
          ],
          [
            "MContinuousBandSize",
            [
              "Float"
            ]
          ],
          [
            "MDiscreteBandSize",
            [
              "Float"
            ]
          ],
          [
            "MdX",
            [
              "Float"
            ]
          ],
          [
            "MdY",
            [
              "Float"
            ]
          ],
          [
            "MFill",
            [
              "String"
            ]
          ],
          [
            "MFilled",
            [
              "Bool"
            ]
          ],
          [
            "MFillOpacity",
            [
              "Float"
            ]
          ],
          [
            "MFont",
            [
              "String"
            ]
          ],
          [
            "MFontSize",
            [
              "Float"
            ]
          ],
          [
            "MFontStyle",
            [
              "String"
            ]
          ],
          [
            "MFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "MInterpolate",
            [
              "VegaLite.MarkInterpolation"
            ]
          ],
          [
            "MOpacity",
            [
              "Float"
            ]
          ],
          [
            "MOrient",
            [
              "VegaLite.MarkOrientation"
            ]
          ],
          [
            "MRadius",
            [
              "Float"
            ]
          ],
          [
            "MShape",
            [
              "VegaLite.Symbol"
            ]
          ],
          [
            "MShortTimeLabels",
            [
              "Bool"
            ]
          ],
          [
            "MSize",
            [
              "Float"
            ]
          ],
          [
            "MStroke",
            [
              "String"
            ]
          ],
          [
            "MStrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "MStrokeDashOffset",
            [
              "Float"
            ]
          ],
          [
            "MStrokeOpacity",
            [
              "Float"
            ]
          ],
          [
            "MStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "MStyle",
            [
              "List String"
            ]
          ],
          [
            "MTension",
            [
              "Float"
            ]
          ],
          [
            "MText",
            [
              "String"
            ]
          ],
          [
            "MTheta",
            [
              "Float"
            ]
          ],
          [
            "MThickness",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Measurement",
        "comment": " Type of measurement to be associated with some channel. `Nominal` data are\ncategories identified by name alone and which have no intrinsic order. `Ordinal`\ndata are also categories, but ones which have some natural order. `Quantitative`\ndata are numeric measurements typically on a continuous scale. `Temporal` data\ndescribe time.\n\nGeospatial position encoding (`Longitude` and `Latitude`) should specify the `PmType`\nas `Quantitative`. Geographically referenced features encoded as `shape` marks\nshould specify `MmType` as `GeoFeature` (Vega-Lite currently refers to this type\nas [geojson](https://vega.github.io/vega-lite/docs/encoding.html)).\n\n",
        "args": [],
        "cases": [
          [
            "Nominal",
            []
          ],
          [
            "Ordinal",
            []
          ],
          [
            "Quantitative",
            []
          ],
          [
            "Temporal",
            []
          ],
          [
            "GeoFeature",
            []
          ]
        ]
      },
      {
        "name": "MonthName",
        "comment": " Idntifies a month of the year.\n",
        "args": [],
        "cases": [
          [
            "Jan",
            []
          ],
          [
            "Feb",
            []
          ],
          [
            "Mar",
            []
          ],
          [
            "Apr",
            []
          ],
          [
            "May",
            []
          ],
          [
            "Jun",
            []
          ],
          [
            "Jul",
            []
          ],
          [
            "Aug",
            []
          ],
          [
            "Sep",
            []
          ],
          [
            "Oct",
            []
          ],
          [
            "Nov",
            []
          ],
          [
            "Dec",
            []
          ]
        ]
      },
      {
        "name": "Operation",
        "comment": " Type of aggregation operation. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/aggregate.html#ops)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "ArgMax",
            []
          ],
          [
            "ArgMin",
            []
          ],
          [
            "Average",
            []
          ],
          [
            "CI0",
            []
          ],
          [
            "CI1",
            []
          ],
          [
            "Count",
            []
          ],
          [
            "Distinct",
            []
          ],
          [
            "Max",
            []
          ],
          [
            "Mean",
            []
          ],
          [
            "Median",
            []
          ],
          [
            "Min",
            []
          ],
          [
            "Missing",
            []
          ],
          [
            "Q1",
            []
          ],
          [
            "Q3",
            []
          ],
          [
            "Stderr",
            []
          ],
          [
            "Stdev",
            []
          ],
          [
            "StdevP",
            []
          ],
          [
            "Sum",
            []
          ],
          [
            "Valid",
            []
          ],
          [
            "Variance",
            []
          ],
          [
            "VarianceP",
            []
          ]
        ]
      },
      {
        "name": "OrderChannel",
        "comment": " Properties of an ordering channel used for sorting data fields.\n",
        "args": [],
        "cases": [
          [
            "OName",
            [
              "String"
            ]
          ],
          [
            "ORepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "OmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "OBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "OAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "OTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "OSort",
            [
              "List VegaLite.SortProperty"
            ]
          ]
        ]
      },
      {
        "name": "OverlapStrategy",
        "comment": " Type of overlap strategy to be applied when there is not space to show all items\non an axis. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/axis.html#labels)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "ONone",
            []
          ],
          [
            "OParity",
            []
          ],
          [
            "OGreedy",
            []
          ]
        ]
      },
      {
        "name": "Padding",
        "comment": " Represents padding dimensions in pixel units. `PSize` will set the same value\non all four edges of a rectangular container while `PEdges` can be used to specify\ndifferent sizes on each edge in order _left_, _top_, _right_, _bottom_.\n",
        "args": [],
        "cases": [
          [
            "PSize",
            [
              "Float"
            ]
          ],
          [
            "PEdges",
            [
              "Float",
              "Float",
              "Float",
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Position",
        "comment": " Type of position channel, `X` and `Y` represent horizontal and vertical axis\ndimensions on a plane and `X2` and `Y2` represent secondary axis dimensions where\ntwo scales are overlaid in the same space. Geographic positions represented by\nlongitude and latiutude values are identified with `Longitude`, `Latitude` and\ntheir respective secondary equivalents. Such geographic position channels are\nsubject to a map projection before being placed graphically.\n",
        "args": [],
        "cases": [
          [
            "X",
            []
          ],
          [
            "Y",
            []
          ],
          [
            "X2",
            []
          ],
          [
            "Y2",
            []
          ],
          [
            "Longitude",
            []
          ],
          [
            "Latitude",
            []
          ],
          [
            "Longitude2",
            []
          ],
          [
            "Latitude2",
            []
          ]
        ]
      },
      {
        "name": "PositionChannel",
        "comment": " Position channel properties used for creating a position channel encoding.\n",
        "args": [],
        "cases": [
          [
            "PName",
            [
              "String"
            ]
          ],
          [
            "PRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "PmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "PBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "PTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "PAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "PScale",
            [
              "List VegaLite.ScaleProperty"
            ]
          ],
          [
            "PAxis",
            [
              "List VegaLite.AxisProperty"
            ]
          ],
          [
            "PSort",
            [
              "List VegaLite.SortProperty"
            ]
          ],
          [
            "PStack",
            [
              "VegaLite.StackProperty"
            ]
          ]
        ]
      },
      {
        "name": "Projection",
        "comment": " Types of geographic map projection. These are based on a subset of those provided\nby the [d3-geo library](https://github.com/d3/d3-geo). For details of available\nprojections see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\nAdditional custom projections from d3 can be defined via the\n[Vega API](https://vega.github.io/vega/docs/projections/#register) and called from\nwithin Elm-Vega setting the projection to `Custom proj` where `proj` is the name\nof the D3 projection to use (e.g. `winkel3`).\n",
        "args": [],
        "cases": [
          [
            "Albers",
            []
          ],
          [
            "AlbersUsa",
            []
          ],
          [
            "AzimuthalEqualArea",
            []
          ],
          [
            "AzimuthalEquidistant",
            []
          ],
          [
            "ConicConformal",
            []
          ],
          [
            "ConicEqualArea",
            []
          ],
          [
            "ConicEquidistant",
            []
          ],
          [
            "Custom",
            [
              "String"
            ]
          ],
          [
            "Equirectangular",
            []
          ],
          [
            "Gnomonic",
            []
          ],
          [
            "Mercator",
            []
          ],
          [
            "Orthographic",
            []
          ],
          [
            "Stereographic",
            []
          ],
          [
            "TransverseMercator",
            []
          ]
        ]
      },
      {
        "name": "ProjectionProperty",
        "comment": " Properties for customising a geospatial projection that converts longitude/latitude\npairs into planar (x,y) coordinate pairs for rendering and query. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/projection.html).\n",
        "args": [],
        "cases": [
          [
            "PType",
            [
              "VegaLite.Projection"
            ]
          ],
          [
            "PClipAngle",
            [
              "Maybe.Maybe Float"
            ]
          ],
          [
            "PClipExtent",
            [
              "VegaLite.ClipRect"
            ]
          ],
          [
            "PCenter",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "PRotate",
            [
              "Float",
              "Float",
              "Float"
            ]
          ],
          [
            "PPrecision",
            [
              "Float"
            ]
          ],
          [
            "PCoefficient",
            [
              "Float"
            ]
          ],
          [
            "PDistance",
            [
              "Float"
            ]
          ],
          [
            "PFraction",
            [
              "Float"
            ]
          ],
          [
            "PLobes",
            [
              "Int"
            ]
          ],
          [
            "PParallel",
            [
              "Float"
            ]
          ],
          [
            "PRadius",
            [
              "Float"
            ]
          ],
          [
            "PRatio",
            [
              "Float"
            ]
          ],
          [
            "PSpacing",
            [
              "Float"
            ]
          ],
          [
            "PTilt",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "RangeConfig",
        "comment": " Properties for customising the colors of a range. The parameter should be a\nnamed color scheme such as `accent` or `purpleorange-11`. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega/docs/schemes/#scheme-properties).\n",
        "args": [],
        "cases": [
          [
            "RCategory",
            [
              "String"
            ]
          ],
          [
            "RDiverging",
            [
              "String"
            ]
          ],
          [
            "RHeatmap",
            [
              "String"
            ]
          ],
          [
            "ROrdinal",
            [
              "String"
            ]
          ],
          [
            "RRamp",
            [
              "String"
            ]
          ],
          [
            "RSymbol",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "RepeatFields",
        "comment": " Create a list of fields to use in set of repeated small multiples. The list of\nfields named here can be referenced in an encoding with `PRepeat Column`, `PRepeat Row`\netc.\n",
        "args": [],
        "cases": [
          [
            "RowFields",
            [
              "List String"
            ]
          ],
          [
            "ColumnFields",
            [
              "List String"
            ]
          ]
        ]
      },
      {
        "name": "Resolution",
        "comment": " Indicated whether or not a scale domain should be independent of others in a\ncomposite visualization. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/resolve.html) for\ndetails.\n",
        "args": [],
        "cases": [
          [
            "Shared",
            []
          ],
          [
            "Independent",
            []
          ]
        ]
      },
      {
        "name": "Resolve",
        "comment": " Used to determine how a channel's axis, scale or legend domains should be resolved\nif defined in more than one view in a composite visualization. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/resolve.html) for\ndetails.\n",
        "args": [],
        "cases": [
          [
            "RAxis",
            [
              "List ( VegaLite.Channel, VegaLite.Resolution )"
            ]
          ],
          [
            "RLegend",
            [
              "List ( VegaLite.Channel, VegaLite.Resolution )"
            ]
          ],
          [
            "RScale",
            [
              "List ( VegaLite.Channel, VegaLite.Resolution )"
            ]
          ]
        ]
      },
      {
        "name": "Scale",
        "comment": " Used to indicate the type of scale transformation to apply.\n",
        "args": [],
        "cases": [
          [
            "ScLinear",
            []
          ],
          [
            "ScPow",
            []
          ],
          [
            "ScSqrt",
            []
          ],
          [
            "ScLog",
            []
          ],
          [
            "ScTime",
            []
          ],
          [
            "ScUtc",
            []
          ],
          [
            "ScSequential",
            []
          ],
          [
            "ScOrdinal",
            []
          ],
          [
            "ScBand",
            []
          ],
          [
            "ScPoint",
            []
          ],
          [
            "ScBinLinear",
            []
          ],
          [
            "ScBinOrdinal",
            []
          ]
        ]
      },
      {
        "name": "ScaleConfig",
        "comment": " Scale configuration property. These are used to configure all scales.\nFor more details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#scale-config)\n",
        "args": [],
        "cases": [
          [
            "SCBandPaddingInner",
            [
              "Float"
            ]
          ],
          [
            "SCBandPaddingOuter",
            [
              "Float"
            ]
          ],
          [
            "SCClamp",
            [
              "Bool"
            ]
          ],
          [
            "SCMaxBandSize",
            [
              "Float"
            ]
          ],
          [
            "SCMinBandSize",
            [
              "Float"
            ]
          ],
          [
            "SCMaxFontSize",
            [
              "Float"
            ]
          ],
          [
            "SCMinFontSize",
            [
              "Float"
            ]
          ],
          [
            "SCMaxOpacity",
            [
              "Float"
            ]
          ],
          [
            "SCMinOpacity",
            [
              "Float"
            ]
          ],
          [
            "SCMaxSize",
            [
              "Float"
            ]
          ],
          [
            "SCMinSize",
            [
              "Float"
            ]
          ],
          [
            "SCMaxStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "SCMinStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "SCPointPadding",
            [
              "Float"
            ]
          ],
          [
            "SCRangeStep",
            [
              "Maybe.Maybe Float"
            ]
          ],
          [
            "SCRound",
            [
              "Bool"
            ]
          ],
          [
            "SCTextXRangeStep",
            [
              "Float"
            ]
          ],
          [
            "SCUseUnaggregatedDomain",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "ScaleDomain",
        "comment": " Describes the scale domain (type of data in scale). For full details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#domain).\n",
        "args": [],
        "cases": [
          [
            "DNumbers",
            [
              "List Float"
            ]
          ],
          [
            "DStrings",
            [
              "List String"
            ]
          ],
          [
            "DDateTimes",
            [
              "List (List VegaLite.DateTime)"
            ]
          ],
          [
            "DSelection",
            [
              "String"
            ]
          ],
          [
            "Unaggregated",
            []
          ]
        ]
      },
      {
        "name": "ScaleNice",
        "comment": " Describes the way a scale can be rounded to 'nice' numbers. For full details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#continuous).\n",
        "args": [],
        "cases": [
          [
            "NMillisecond",
            []
          ],
          [
            "NSecond",
            []
          ],
          [
            "NMinute",
            []
          ],
          [
            "NHour",
            []
          ],
          [
            "NDay",
            []
          ],
          [
            "NWeek",
            []
          ],
          [
            "NMonth",
            []
          ],
          [
            "NYear",
            []
          ],
          [
            "NInterval",
            [
              "VegaLite.TimeUnit",
              "Int"
            ]
          ],
          [
            "IsNice",
            [
              "Bool"
            ]
          ],
          [
            "NTickCount",
            [
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "ScaleProperty",
        "comment": " Individual scale property. These are used to customise an individual scale\ntransformation. To customise all scales use `config` and supply relevant\n`ScaleConfig` values. For more details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html)\n",
        "args": [],
        "cases": [
          [
            "SType",
            [
              "VegaLite.Scale"
            ]
          ],
          [
            "SDomain",
            [
              "VegaLite.ScaleDomain"
            ]
          ],
          [
            "SRange",
            [
              "VegaLite.ScaleRange"
            ]
          ],
          [
            "SScheme",
            [
              "String",
              "List Float"
            ]
          ],
          [
            "SPadding",
            [
              "Float"
            ]
          ],
          [
            "SPaddingInner",
            [
              "Float"
            ]
          ],
          [
            "SPaddingOuter",
            [
              "Float"
            ]
          ],
          [
            "SRangeStep",
            [
              "Maybe.Maybe Float"
            ]
          ],
          [
            "SRound",
            [
              "Bool"
            ]
          ],
          [
            "SClamp",
            [
              "Bool"
            ]
          ],
          [
            "SInterpolate",
            [
              "VegaLite.CInterpolate"
            ]
          ],
          [
            "SNice",
            [
              "VegaLite.ScaleNice"
            ]
          ],
          [
            "SZero",
            [
              "Bool"
            ]
          ],
          [
            "SReverse",
            [
              "Bool"
            ]
          ]
        ]
      },
      {
        "name": "ScaleRange",
        "comment": " Describes a scale range of scale output values. For full details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/scale.html#range).\n",
        "args": [],
        "cases": [
          [
            "RNumbers",
            [
              "List Float"
            ]
          ],
          [
            "RStrings",
            [
              "List String"
            ]
          ],
          [
            "RName",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "Selection",
        "comment": " Indicates the type of selection to be generated by the user. `Single` allows\none mark at a time to be selected. 'Multi' allows multiple items to be selected\n(e.g. with shift-click). 'Interval' allows a bounding rectangle to be dragged by\nuser to select all items intersecting with it.\n",
        "args": [],
        "cases": [
          [
            "Single",
            []
          ],
          [
            "Multi",
            []
          ],
          [
            "Interval",
            []
          ]
        ]
      },
      {
        "name": "SelectionMarkProperty",
        "comment": " Properties for customising the appearance of an interval selection mark (dragged\nrectangle). For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html#interval-mark).\n",
        "args": [],
        "cases": [
          [
            "SMFill",
            [
              "String"
            ]
          ],
          [
            "SMFillOpacity",
            [
              "Float"
            ]
          ],
          [
            "SMStroke",
            [
              "String"
            ]
          ],
          [
            "SMStrokeOpacity",
            [
              "Float"
            ]
          ],
          [
            "SMStrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "SMStrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "SMStrokeDashOffset",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "SelectionProperty",
        "comment": " Properties for customising the nature of the selection. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html#selection-properties)\nfor details. When linking a selection property to an event stream with `On`, `Translate`\nor `Zoom`, a String should be provided describing the event stream as detailed in the\n[Vega event stream documentation](https://vega.github.io/vega/docs/event-streams).\nIf an empty string is provided, the property is set to `false`. The `Toggle` option\nexpects a [Vega expression](https://vega.github.io/vega/docs/expressions) that evaluates\nto either true or false.\n",
        "args": [],
        "cases": [
          [
            "On",
            [
              "String"
            ]
          ],
          [
            "Translate",
            [
              "String"
            ]
          ],
          [
            "Zoom",
            [
              "String"
            ]
          ],
          [
            "Fields",
            [
              "List String"
            ]
          ],
          [
            "Encodings",
            [
              "List VegaLite.Channel"
            ]
          ],
          [
            "Empty",
            []
          ],
          [
            "ResolveSelections",
            [
              "VegaLite.SelectionResolution"
            ]
          ],
          [
            "SelectionMark",
            [
              "List VegaLite.SelectionMarkProperty"
            ]
          ],
          [
            "BindScales",
            []
          ],
          [
            "Bind",
            [
              "List VegaLite.Binding"
            ]
          ],
          [
            "Nearest",
            [
              "Bool"
            ]
          ],
          [
            "Toggle",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "SelectionResolution",
        "comment": " Determines how selections in faceted or repeated views are resolved. See the\n[Vege-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html#resolve)\nfor details\n",
        "args": [],
        "cases": [
          [
            "Global",
            []
          ],
          [
            "Union",
            []
          ],
          [
            "Intersection",
            []
          ]
        ]
      },
      {
        "name": "Side",
        "comment": " Represents one side of a rectangular space.\n",
        "args": [],
        "cases": [
          [
            "STop",
            []
          ],
          [
            "SBottom",
            []
          ],
          [
            "SLeft",
            []
          ],
          [
            "SRight",
            []
          ]
        ]
      },
      {
        "name": "SortProperty",
        "comment": " Allow type of sorting to be customised. For details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/sort.html).\n",
        "args": [],
        "cases": [
          [
            "Ascending",
            []
          ],
          [
            "Descending",
            []
          ],
          [
            "Op",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "ByField",
            [
              "String"
            ]
          ],
          [
            "ByRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ]
        ]
      },
      {
        "name": "StackProperty",
        "comment": " Describes the type of stacking to apply to a bar chart.\n",
        "args": [],
        "cases": [
          [
            "StZero",
            []
          ],
          [
            "StNormalize",
            []
          ],
          [
            "StCenter",
            []
          ],
          [
            "NoStack",
            []
          ]
        ]
      },
      {
        "name": "Symbol",
        "comment": " Identifies the type of symbol. The `Path` symbol is used to define custom shapes\nas an SVG path description.\n",
        "args": [],
        "cases": [
          [
            "SymCircle",
            []
          ],
          [
            "SymSquare",
            []
          ],
          [
            "Cross",
            []
          ],
          [
            "Diamond",
            []
          ],
          [
            "TriangleUp",
            []
          ],
          [
            "TriangleDown",
            []
          ],
          [
            "Path",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "TextChannel",
        "comment": " Types of text channel property used for displaying text as part of the visualization.\n",
        "args": [],
        "cases": [
          [
            "TName",
            [
              "String"
            ]
          ],
          [
            "TRepeat",
            [
              "VegaLite.Arrangement"
            ]
          ],
          [
            "TmType",
            [
              "VegaLite.Measurement"
            ]
          ],
          [
            "TBin",
            [
              "List VegaLite.BinProperty"
            ]
          ],
          [
            "TAggregate",
            [
              "VegaLite.Operation"
            ]
          ],
          [
            "TTimeUnit",
            [
              "VegaLite.TimeUnit"
            ]
          ],
          [
            "TSelectionCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.TextChannel",
              "List VegaLite.TextChannel"
            ]
          ],
          [
            "TDataCondition",
            [
              "VegaLite.BooleanOp",
              "List VegaLite.TextChannel",
              "List VegaLite.TextChannel"
            ]
          ],
          [
            "TFormat",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "TimeUnit",
        "comment": " Describes a unit of time. Useful for encoding and transformations. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/timeunit.html)\nfor further details.\n\nTo encode a time as UTC (coordinated universal time, independent of local time\nzones or daylight saving), provide a time unit to the `utc` function.\nFor example,\n\n    encoding\n        << position X [ PName \"date\", PmType Temporal, PTimeUnit (utc YearMonthDateHours) ]\n\n",
        "args": [],
        "cases": [
          [
            "Year",
            []
          ],
          [
            "YearQuarter",
            []
          ],
          [
            "YearQuarterMonth",
            []
          ],
          [
            "YearMonth",
            []
          ],
          [
            "YearMonthDate",
            []
          ],
          [
            "YearMonthDateHours",
            []
          ],
          [
            "YearMonthDateHoursMinutes",
            []
          ],
          [
            "YearMonthDateHoursMinutesSeconds",
            []
          ],
          [
            "Quarter",
            []
          ],
          [
            "QuarterMonth",
            []
          ],
          [
            "Month",
            []
          ],
          [
            "MonthDate",
            []
          ],
          [
            "Date",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Hours",
            []
          ],
          [
            "HoursMinutes",
            []
          ],
          [
            "HoursMinutesSeconds",
            []
          ],
          [
            "Minutes",
            []
          ],
          [
            "MinutesSeconds",
            []
          ],
          [
            "Seconds",
            []
          ],
          [
            "SecondsMilliseconds",
            []
          ],
          [
            "Milliseconds",
            []
          ]
        ]
      },
      {
        "name": "TitleConfig",
        "comment": " Title configuration properties. These are used to configure the default style\nof all titles within a visualization.\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/title.html#config)\n",
        "args": [],
        "cases": [
          [
            "TAnchor",
            [
              "VegaLite.APosition"
            ]
          ],
          [
            "TAngle",
            [
              "Float"
            ]
          ],
          [
            "TBaseline",
            [
              "VegaLite.VAlign"
            ]
          ],
          [
            "TColor",
            [
              "String"
            ]
          ],
          [
            "TFont",
            [
              "String"
            ]
          ],
          [
            "TFontSize",
            [
              "Float"
            ]
          ],
          [
            "TFontWeight",
            [
              "VegaLite.FontWeight"
            ]
          ],
          [
            "TLimit",
            [
              "Float"
            ]
          ],
          [
            "TOffset",
            [
              "Float"
            ]
          ],
          [
            "TOrient",
            [
              "VegaLite.Side"
            ]
          ]
        ]
      },
      {
        "name": "VAlign",
        "comment": " Indicates the vertical alignment of some text that may be attached to a mark.\n",
        "args": [],
        "cases": [
          [
            "AlignTop",
            []
          ],
          [
            "AlignMiddle",
            []
          ],
          [
            "AlignBottom",
            []
          ]
        ]
      },
      {
        "name": "VLProperty",
        "comment": " Top-level Vega-Lite properties. These are the ones that define the core of the\nvisualization grammar. All `VLProperties` are created by functions which can be\narranged into seven broad groups.\n\n**Data Properties** relate to the input data to be visualized. Generated by\n[`dataFromColumns`](#dataFromColumns), [`dataFromRows`](#dataFromRows),\n[`dataFromUrl`](#dataFromUrl), [`dataFromSource`](#dataFromSource) and\n[`dataFromJson`](#dataFromJson).\n\n**Transform Properties** indicate that some transformation of input data should\nbe applied before encoding them visually. Generated by [`transform`](#transform)\nand [`projection`](#projection) they can include data transformations such as `filter`,\n`binAs` and `calculateAs` and geo transformations of longitude, latitude coordinates\nused by marks such as `Geoshape`, `Point` and `Line`.\n\n**Mark Properties** relate to the symbols used to visualize data items. Generated by [`mark`](#mark)\nthey include types such as `Circle`, `Bar` and `Line`.\n\n**Encoding Properties** specify which data elements are mapped to which mark characteristics\n(known as _channels_). Generated by [`encoding`](#encoding) they include encodings\nsuch as `position`, `color`, `size`, `shape` `text` and `hyperlink`.\n\n**Composition Properties** allow visualization views to be combined to form more\ncomplex visualizations. Generated by [`layer`](#layer), [`repeat`](#repeat),\n[`facet`](#facet), [`hConcat`](#hConcat), [`vConcat`](#vConcat), [`spec`](#spec)\nand [`resolve`](#resolve).\n\n**Interaction Properties** allow interactions such as clicking, dragging and others\ngenerated via a GUI or data stream to influence the visualization. Generated by\n[`selection`](#selection).\n\n**Supplementary and Configuration Properties** provide a means to add metadata and\nstyling to one or more visualizations. Generated by [`name`](#name), [`title`](#title),\n[`description`](#description), [`background`](#background), [`width`](#width),\n[`height`](#height), [`padding`](#padding), [`autosize`](#autosize) and\n[`configure`](#configure).\n\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ViewConfig",
        "comment": " View configuration property. These are used to configure the style of a single\nview within a visualization such as its size and default fill and stroke colors.\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/spec.html#config)\n",
        "args": [],
        "cases": [
          [
            "ViewWidth",
            [
              "Float"
            ]
          ],
          [
            "ViewHeight",
            [
              "Float"
            ]
          ],
          [
            "Clip",
            [
              "Bool"
            ]
          ],
          [
            "Fill",
            [
              "Maybe.Maybe String"
            ]
          ],
          [
            "FillOpacity",
            [
              "Float"
            ]
          ],
          [
            "Stroke",
            [
              "Maybe.Maybe String"
            ]
          ],
          [
            "StrokeOpacity",
            [
              "Float"
            ]
          ],
          [
            "StrokeWidth",
            [
              "Float"
            ]
          ],
          [
            "StrokeDash",
            [
              "List Float"
            ]
          ],
          [
            "StrokeDashOffset",
            [
              "Float"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "aggregate",
        "comment": " Defines a set of named aggregation transformations to be used when encoding\nchannels. This is useful when, for example, you wish to apply the same transformation\nto a number of channels but do not want to define it each time. The first parameter is\na list of the named aggregation operations to apply. The second parameter is a list\nof 'group by' fields. The third parameter is the list of transformations to which\nthis is to be added. For further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/aggregate.html#aggregate-op-def).\n\n    trans =\n        transform\n            << aggregate\n                [ opAs Min \"people\" \"lowerBound\", opAs Max \"people\" \"upperBound\" ]\n                [ \"age\" ]\n\n",
        "type": "List VegaLite.Spec -> List String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "asSpec",
        "comment": " Create a specification sufficient to define an element in a composed visualization\nsuch as a superposed layer or juxtaposed facet. Typically a layer will contain a\nfull set of specifications that define a visualization with\nthe exception of the data specification which is usually defined outside of any one\nlayer. Whereas for repeated and faceted specs, the entire specification is provided.\n\n    enc1 = ...\n    spec1 =\n        asSpec [ enc1, mark Line [] ]\n\n",
        "type": "List ( VegaLite.VLProperty, VegaLite.Spec ) -> VegaLite.Spec"
      },
      {
        "name": "autosize",
        "comment": " Declare the way the view is sized. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/size.html#autosize)\nfor details.\n\n    enc = ...\n    toVegaLite\n        [ width 250\n        , height 300\n        , autosize [ AFit, APadding, AResize ]\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "List VegaLite.Autosize -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "background",
        "comment": " Set the background color of the visualization. Should be specified with a CSS\nstring such as `#ffe` or `rgb(200,20,150)`. If not specified the background will\nbe transparent.\n\n    enc = ...\n    toVegaLite\n        [ background \"rgb(251,247,238)\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "bin",
        "comment": " Create a binning transformation to be applied directly to a channel. The type\nof binning can be customised with a list of `BinProperty` or an empty list to use\nthe default binning. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bin.html) for\nmore details.\n\n    position X [ PName \"IMDB_Rating\", PmType Quantitative , PBin [] ]\n\n",
        "type": "List VegaLite.BinProperty -> VegaLite.LabelledSpec"
      },
      {
        "name": "binAs",
        "comment": " Create a named binning transformation that may be referenced in other Transformations\nor encodings. This works in a similar way to `bin` but requires the name of the field\nto bin and an additional label so it may be referenced in other expressions. The\ntype of binning can be customised with a list of `BinProperty` or an empty list\nto use the default binning. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/bin.html) for\nmore details. Note that usually, direct binning within an encoding is preferred\nover this form of bin transformation.\n\n    trans =\n        transform\n            << binAs [ MaxBins 3 ] \"IMDB_Rating\" \"ratingGroup\"\n\n",
        "type": "List VegaLite.BinProperty -> String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "calculateAs",
        "comment": " Creates a new data field based on calculations from existing fields.\nThe first parameter is an expression representing the calculation and the second\nis the name to give the newly calculated field. This third parameter is a list of\nany previous calculations to which this is to be added. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/calculate.html)\nfor further details.\n\n    trans =\n        transform << calculateAs \"datum.sex == 2 ? 'F' : 'M'\" \"gender\"\n\n",
        "type": "String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "categoricalDomainMap",
        "comment": " Create a set of discrete domain to color mappings suitable for customising categorical\nscales. The first item in each tuple should be a domain value and the second the\ncolor value with which it should be associated. It is a convenience function equivalent\nto specifying separate `SDomain` and `SRange` lists and is safer as it guarantees\na one-to-one correspondence between domain and range values.\n\n    color\n        [ MName \"weather\"\n        , MmType Nominal\n        , MScale <|\n            categoricalDomainMap\n                [ ( \"sun\", \"yellow\" )\n                , ( \"rain\", \"blue\" )\n                , ( \"fog\", \"grey\" )\n                ]\n        ]\n\n",
        "type": "List ( String, String ) -> List VegaLite.ScaleProperty"
      },
      {
        "name": "color",
        "comment": " Encode a color channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by color. The second parameter\nis a list of any previous channels to which this color channel should be added.\n\n    color [ MName \"Species\", MmType Nominal ] []\n\nEncoding a color channel will generate a legend by default. To stop the legend\nappearing, just supply an empty list of legend properties to `MLegend` :\n\n    color [ MName \"Species\", MmType Nominal, MLegend [] ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "column",
        "comment": " Encodes a new facet to be arranged in columns. The first parameter is a list\nof properties that define the faceting channel. This should include at least the\nname of the data field and its measurement type. The final parameter is a list of\nany previous channels to which this is to be added. This is usually implicit when\nchaining encodings using functional composition\n\n    enc =\n        encoding\n            << position X [ PName \"people\", PmType Quantitative ]\n            << position Y [ PName \"gender\", PmType Nominal ]\n            << column [ FName \"age\", FmType Ordinal ]\n\n",
        "type": "List VegaLite.FacetChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "combineSpecs",
        "comment": " Combines a list of labelled specifications into a single specification that\nmay be passed to JavaScript for rendering. This is useful when you wish to create\na single page with multiple visulizualizations.\n\n    combineSpecs\n        [ ( \"vis1\", myFirstVis )\n        , ( \"vis2\", mySecondVis )\n        , ( \"vis3\", myOtherVis )\n        ]\n\n",
        "type": "List VegaLite.LabelledSpec -> VegaLite.Spec"
      },
      {
        "name": "configuration",
        "comment": " Defines a single configuration option to be applied globally across the visualization.\nThe first parameter identifies the type of configuration, the second a list of previous\nconfigurations to which this one may be added.\n\n    configuration (Axis [ DomainWidth 4 ]) []\n\n",
        "type": "VegaLite.ConfigurationProperty -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "configure",
        "comment": " Create a single global configuration from a list of configuration specifications.\nConfigurations are applied to all relevant items in the specification. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/config.html) for\nmore details.\n\n    config =\n        configure\n            << configuration (Axis [ DomainWidth 1 ])\n            << configuration (View [ Stroke (Just \"transparent\") ])\n            << configuration (SelectionStyle [ ( Single, [ On \"dblclick\" ] ) ])\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "dataColumn",
        "comment": " Create a column of data. A column has a name and a list of values. The final\nparameter is the list of any other columns to which this is added.\n\n    dataColumn \"Animal\" (Strings [ \"Cat\", \"Dog\", \"Mouse\"]) []\n\n",
        "type": "String -> VegaLite.DataValues -> List VegaLite.DataColumn -> List VegaLite.DataColumn"
      },
      {
        "name": "dataFromColumns",
        "comment": " Declare a data source from a provided list of column values. Each column contains\nvalues of the same type, but columns each with a different type are permitted.\nColumns should all contain the same number of items; if not the dataset will be\ntruncated to the length of the shortest column. An optional list of field formatting\ninstructions can be provided as the first parameter or an empty list to use the\ndefault formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\nThe columns themselves are most easily generated with `dataColumn`\n\n    data =\n        dataFromColumns [ Parse [ ( \"Year\", FoDate \"%Y\" ) ] ]\n            << dataColumn \"Animal\" (Strings [ \"Fish\", \"Dog\", \"Cat\" ])\n            << dataColumn \"Age\" (Numbers [ 28, 12, 6 ])\n            << dataColumn \"Year\" (Strings [ \"2010\", \"2014\", \"2015\" ])\n\n",
        "type": "List VegaLite.Format -> List VegaLite.DataColumn -> VegaLite.Data"
      },
      {
        "name": "dataFromJson",
        "comment": " Declare a data source from a provided json specification. The most likely use-case\nfor specifying json inline is when creating [geojson](http://geojson.org) objects,\nwhen [`geometry`](#geometry), [`geometryCollection`](#geometryCollection) and\n[`geoFeatureCollection`](#geoFeatureCollection) functions may be used. For more\ngeneral cases of json creation, consider\n[`Json.Encode`](http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Encode).\n\n    let\n        geojson =\n            geometry (GeoPolygon [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []\n    in\n    toVegaLite\n        [ width 200\n        , height 200\n        , dataFromJson geojson []\n        , projection [ PType Orthographic ]\n        , mark Geoshape []\n        ]\n\n",
        "type": "VegaLite.Spec -> List VegaLite.Format -> VegaLite.Data"
      },
      {
        "name": "dataFromRows",
        "comment": " Declare a data source from a provided list of row values. Each row contains\na list of tuples where the first value is a string representing the column name, and the\nsecond the column value for that row. Each column can have a value of a different type\nbut you must ensure that when subsequent rows are added, they match the types of previous\nvalues with shared column names. An optional list of field formatting instructions can\nbe provided as the first parameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\nThe rows themselves are most easily generated with `dataRow`. Note though that generally\nif you are creating data inline (as opposed to reading from a file), adding data by column\nis more efficient and less error-prone.\n\n    data =\n        dataFromRows [ Parse [ ( \"Year\", FoDate \"%Y\" ) ] ]\n            << dataRow [ ( \"Animal\", Str \"Fish\" ), ( \"Age\", Number 28 ), ( \"Year\", Str \"2010\" ) ]\n            << dataRow [ ( \"Animal\", Str \"Dog\" ), ( \"Age\", Number 12 ), ( \"Year\", Str \"2014\" ) ]\n            << dataRow [ ( \"Animal\", Str \"Cat\" ), ( \"Age\", Number 6 ), ( \"Year\", Str \"2015\" ) ]\n\n",
        "type": "List VegaLite.Format -> List VegaLite.DataRow -> VegaLite.Data"
      },
      {
        "name": "dataFromSource",
        "comment": " Declare data from a named source. The source may be from named `datasets` within\na specification or a named data source created via the\n[Vega View API](https://vega.github.io/vega/docs/api/view/#data).\nAn optional list of field formatting instructions can be provided as the second\nparameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#named)\nfor details.\n\n    data = ...\n    json = ...\n    enc = ...\n    toVegaLite\n        [ datasets [ ( \"myData\", data [] ),  ( \"myJson\", dataFromJson json [] ) ]\n        , dataFromSource \"myData\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> List VegaLite.Format -> VegaLite.Data"
      },
      {
        "name": "dataFromUrl",
        "comment": " Declare data source from a url. The url can be a local path on a web server\nor an external http(s) url. Used to create a data ( property, specification ) pair.\nAn optional list of field formatting instructions can be provided as the second\nparameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\n\n    enc = ...\n    toVegaLite\n        [ dataFromUrl \"data/weather.csv\" [ Parse [ ( \"date\", FoDate \"%Y-%m-%d %H:%M\" ) ] ]\n        , mark Line []\n        , enc []\n        ]\n\n",
        "type": "String -> List VegaLite.Format -> VegaLite.Data"
      },
      {
        "name": "dataRow",
        "comment": " Create a row of data. A row comprises a list of (columnName,value) pairs.\nThe final parameter is the list of any other rows to which this is added.\n\n    dataRow [(\"Animal\", Str \"Fish\"),(\"Age\",Number 28),(\"Year\", Str \"2010\")] []\n\n",
        "type": "List ( String, VegaLite.DataValue ) -> List VegaLite.DataRow -> List VegaLite.DataRow"
      },
      {
        "name": "datasets",
        "comment": " Create a dataset comprising a collection of named `Data` items. Each data item\ncan be created with normal data generating functions such as `dataFromRows` or\n`dataFromJson`. These can be later referred to using `dataFromSource`.\n\n    let\n        data =\n            dataFromRows []\n                << dataRow [ ( \"cat\", Str \"a\" ), ( \"val\", Number 10 ) ]\n                << dataRow [ ( \"cat\", Str \"b\" ), ( \"val\", Number 18 ) ]\n        json =\n            JE.list\n                [ JE.object [ ( \"cat\", JE.string \"a\" ), ( \"val\", JE.float 120 ) ]\n                , JE.object [ ( \"cat\", JE.string \"b\" ), ( \"val\", JE.float 180 ) ]\n                ]\n\n        enc = ...\n\n    in\n    toVegaLite\n        [ datasets [ ( \"myData\", data [] ),  ( \"myJson\", dataFromJson json [] ) ]\n        , dataFromSource \"myData\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "List ( String, VegaLite.Data ) -> VegaLite.Data"
      },
      {
        "name": "description",
        "comment": " Provides an optional description to be associated with the visualization.\n\n    enc = ...\n    toVegaLite\n        [ description \"Population change of key regions since 1900\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "detail",
        "comment": " Encode a 'level of detail' channel. This provides a way of grouping by a field\nbut unlike, say `color`, all groups have the same visual properties. The first\nparameter is a list of the field characteristics to be grouped. The second parameter\nis a list of any previous channels to which this detail channel should be added. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#detail)\nfor details.\n\n    detail [ DName \"Species\", DmType Nominal ] []\n\n",
        "type": "List VegaLite.DetailChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "domainRangeMap",
        "comment": " Create a pair of continuous domain to color mappings suitable for customising\nordered scales. The first parameter is a tuple representing the mapping of the lowest\nnumeric value in the domain to its equivalent color; the second tuple the mapping\nof the highest numeric value to color. If the domain contains any values between\nthese lower and upper bounds they are interpolated according to the scale's interpolation\nfunction. This is a convenience function equivalent to specifying separate `SDomain`\nand `SRange` lists and is safer as it guarantees a one-to-one correspondence between\ndomain and range values.\n\n    color\n        [ MName \"year\"\n        , MmType Ordinal\n        , MScale (domainRangeMap ( 1955, \"#e6959c\" ) ( 2000, \"#911a24\" ))\n        ]\n\n",
        "type": "( Float, String ) -> ( Float, String ) -> List VegaLite.ScaleProperty"
      },
      {
        "name": "encoding",
        "comment": " Create an encoding specification from a list of channel encodings.\n\n    enc =\n        encoding\n            << position X [ PName \"Animal\", PmType Ordinal ]\n            << position Y [ PName \"Age\", PmType Quantitative ]\n            << shape [ MName \"Species\", MmType Nominal ]\n            << size [ MName \"Population\", MmType Quantitative ]\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "facet",
        "comment": " Defines the fields that will be used to facet a view in rows or columns to create\na set of small multiples. This is used where the encoding of the visualization in small\nmultiples is identical, but data for each is grouped by the given fields. When\ncreating a faceted view in this way you also need to define a full specification\nto apply to each of those facets using `asSpec`.\n\n    spec = ...\n    toVegaLite\n        [ facet [ RowBy [ FName \"Origin\", FmType Nominal ] ]\n        , specifcation spec\n        ]\n\nSee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/facet.html)\nfor further details.\n\n",
        "type": "List VegaLite.FacetMapping -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "fill",
        "comment": " Encode a fill channel. This acts in a similar way to encoding by `color` but\nonly affects the interior of closed shapes. The first parameter is a list of mark\nchannel properties that characterise the way a data field is encoded by fill.\nThe second parameter is a list of any previous channels to which this fill channel\nshould be added.\n\n    fill [ MName \"Species\", MmType Nominal ] []\n\nNote that if both `fill` and `color` encodings are specified, `fill` takes precedence.\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "filter",
        "comment": " Adds the given filter operation a list of transformations that may be applied\nto a channel or field. The first parameter is the filter operation and the second,\noften implicit, parameter is the list of other filter operations to which this\nshould be added in sequence.\n\n    trans =\n        transform\n            << filter (FEqual \"Animal\" (Str \"Cat\"))\n\nFilter operations can combine selections and data predicates with `BooleanOp` expressions:\n\n    trans =\n        transform\n            << filter (FCompose (And (Expr \"datum.Weight_in_lbs > 3000\") (Selection \"brush\")))\n\n",
        "type": "VegaLite.Filter -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "geoFeatureCollection",
        "comment": " Specifies a list of geo features to be used in a geoShape specification.\nEach feature object in this collection can be created with the `geometry` function.\n\n    geojson =\n        geoFeatureCollection\n            [ geometry (GeoPolygon [ [ ( -3, 59 ), ( -3, 52 ), ( 4, 52 ), ( -3, 59 ) ] ])\n                [ ( \"myRegionName\", Str \"Northern region\" ) ]\n            , geometry (GeoPolygon [ [ ( -3, 52 ), ( 4, 52 ), ( 4, 45 ), ( -3, 52 ) ] ])\n                [ ( \"myRegionName\", Str \"Southern region\" ) ]\n            ]\n\n",
        "type": "List VegaLite.Spec -> VegaLite.Spec"
      },
      {
        "name": "geometry",
        "comment": " Specifies a geometric object to be used in a geoShape specification. The first\nparameter is the geometric type, the second an optional list of properties to be\nassociated with the object.\n\n      geojson =\n          geometry (GeoPolygon [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []\n\n",
        "type": "VegaLite.Geometry -> List ( String, VegaLite.DataValue ) -> VegaLite.Spec"
      },
      {
        "name": "geometryCollection",
        "comment": " Specifies a list of geometry objects to be used in a geoShape specification.\nEach geometry object in this collection can be created with the `geometry` function.\n\n    geojson =\n        geometryCollection\n            [ geometry (GeoPolygon [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []\n            , geometry (GeoPoint -3.5 55.5) []\n            ]\n\n",
        "type": "List VegaLite.Spec -> VegaLite.Spec"
      },
      {
        "name": "hConcat",
        "comment": " Assigns a list of specifications to be juxtaposed horizontally in a visualization.\n\n    let\n        spec1 = ...\n        spec2 = ...\n    in\n    toVegaLite\n        [ dataFromUrl \"data/driving.json\" []\n        , hConcat [ spec1, spec2 ]\n        ]\n\n",
        "type": "List VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "height",
        "comment": " Overrides the default height of the visualization. If not specified the height\nwill be calculated based on the content of the visualization.\n\n    enc = ...\n    toVegaLite\n        [ height 300\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "Float -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "hyperlink",
        "comment": " Encode a hyperlink channel. The first parameter is a list of hyperlink channel\nproperties that characterise the hyperlinking such as the destination url and cursor\ntype. The second parameter is a list of any previous encoding channels to which\nthis hyperlink channel should be added.\n\n    hyperlink [ HName \"Species\", HmType Nominal ] []\n\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#href)\n\n",
        "type": "List VegaLite.HyperlinkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "layer",
        "comment": " Assigns a list of specifications to superposed layers in a visualization.\n\n    let\n        spec1 = ...\n        spec2 = ...\n    in\n    toVegaLite\n        [ dataFromUrl \"data/driving.json\" []\n        , layer [ spec1, spec2 ]\n        ]\n\n",
        "type": "List VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "lookup",
        "comment": " Perform a lookup of named fields between two data sources. This allows you to\nfind values in one data source based on the values in another (like a relational\njoin). The first parameter is the field in the primary data source to act as key,\nthe second is the secondary data source which can be specified with a call to `dataFromUrl`\nor other data generating function. The third is the name of the field in the secondary\ndata source to match values with the primary key. The fourth parameter is the list\nof fields to be stored when the keys match. As with other transformation functions,\nthe final implicit parameter is a list of any other transformations to which this\nis to be added.\n\nUnlike `lookupAs`, this function will only return the specific fields named in the\nfourth parameter. If you wish to return the entire set of fields in the secondary\ndata source as a single object, use `lookupAs`.\n\nSee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/lookup.html)\nfor further details.\n\nThe following would return the values in the `age` and `height` fields from\n`lookup_people.csv` for all rows where the value in the `name` column in that\nfile matches the value of `person` in the primary data source.\n\n    data =\n        dataFromUrl \"data/lookup_groups.csv\" []\n\n    trans =\n        transform\n            << lookup \"person\" (dataFromUrl \"data/lookup_people.csv\" []) \"name\" [ \"age\", \"height\" ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec ) -> String -> List String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "lookupAs",
        "comment": " Perform an object lookup between two data sources. This allows you to find\nvalues in one data source based on the values in another (like a relational\njoin). The first parameter is the field in the primary data source to act as key,\nthe second is the secondary data source which can be specified with a call to\n`dataFromUrl` or other data generating function. The third is the name of the field\nin the secondary data source to match values with the primary key. The fourth\nparameter is the name to be given to the object storing matched values. As with\nother transformation functions, the final implicit parameter is a list of any other\ntransformations to which this is to be added.\n\nUnlike `lookup`, this function returns the entire set of field values from the\nsecondary data source when keys match. Those fields are stored as an object with\nthe name provided in the fourth parameter.\n\nSee the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/lookup.html)\nfor further details.\n\nIn the following example, `personDetails` would reference all the field values in\n`lookup_people.csv` for each row where the value in the `name` column in that\nfile matches the value of `person` in the primary data source.\n\n    data =\n        dataFromUrl \"data/lookup_groups.csv\" []\n\n    trans =\n        transform\n            << lookupAs \"person\" (dataFromUrl \"data/lookup_people.csv\" []) \"name\" \"personDetails\"\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec ) -> String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "mark",
        "comment": " Create a mark specification. All marks must have a type (first parameter) and\ncan optionally be customised with a list of mark properties such as interpolation\nstyle for lines. To keep the default style for the mark, just provide an empty list\nfor the second parameter.\n\n    mark Circle []\n    mark Line [ MInterpolate StepAfter ]\n\n",
        "type": "VegaLite.Mark -> List VegaLite.MarkProperty -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "name",
        "comment": " Provides an optional name to be associated with the visualization.\n\n    enc = ...\n    toVegaLite\n        [ name \"PopGrowth\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "opAs",
        "comment": " Create a named aggregation operation on a field that can be added to a transformation.\nThe first parameter is the aggregation operation to use; the second the name of\nthe field in which to apply it and the third the name to be given to this transformation.\nFor further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/aggregate.html#aggregate-op-def).\n\n    trans =\n        transform\n            << aggregate\n                [ opAs Min \"people\" \"lowerBound\"\n                , opAs Max \"people\" \"upperBound\"\n                ]\n                [ \"age\" ]\n\n",
        "type": "VegaLite.Operation -> String -> String -> VegaLite.Spec"
      },
      {
        "name": "opacity",
        "comment": " Encode an opacity channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by opacity. The second parameter\nis a list of any previous channels to which this opacity channel should be added.\n\n    opacity [ MName \"Age\", MmType Quantitative ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "order",
        "comment": " Encode an order channel. The first parameter is a list of order field definitions\nto define the channel. The second parameter is a list of any previous channels to\nwhich this order channel is to be added.\n\n    enc =\n        encoding\n            << position X [ PName \"miles\", PmType Quantitative ]\n            << position Y [ PName \"gas\", PmType Quantitative ]\n            << order [ OName \"year\", OmType Temporal ]\n\n",
        "type": "List VegaLite.OrderChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "padding",
        "comment": " Set the padding around the visualization in pixel units. The way padding is\ninterpreted will depend on the `autosize` properties. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/spec.html#top-level-specifications)\nfor details.\n\n    enc = ...\n    toVegaLite\n        [ width 500\n        , padding (PEdges 20 10 5 15)\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "VegaLite.Padding -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "position",
        "comment": " Encode a position channel. The first parameter identifies the channel,\nthe second a list of qualifying options. Usually these will include at least the\nname of the data field associated with it and its measurement type (either the field\nname directly, or a reference to a row / column repeat field). The final parameter\nis a list of any previous channels to which this position channel should be added.\nThis is often implicit when chaining a series of encodings using functional composition.\n\n      enc =\n          encoding\n            << position X [ PName \"Animal\", PmType Ordinal ]\n\nEncoding by position will generate an axis by default. To prevent the axis from\nappearing, simply provide an empty list of axis properties to `PAxis` :\n\n     enc =\n         encoding\n           << position X [ PName \"Animal\", PmType Ordinal, PAxis [] ]\n\n",
        "type": "VegaLite.Position -> List VegaLite.PositionChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "projection",
        "comment": " Sets the cartographic projection used for geospatial coordinates. A projection\ndefines the mapping from _(longitude,latitude)_ to an _(x,y)_ plane used for rendering.\nThis is useful when using the `Geoshape` mark. For further details see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/projection.html).\n\n    proj =\n        projection [ PType Orthographic, PRotate -40 0 0 ]\n\n",
        "type": "List VegaLite.ProjectionProperty -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "repeat",
        "comment": " Define the fields that will be used to compose rows and columns of a set of\nsmall multiples. This is used where the encoding of the visualization in small\nmultiples is largely identical, but the data field used in each might vary. When\na list of fields is identified with `repeat` you also need to define a full specification\nto apply to each of those fields using `asSpec`.\n\n    spec = ...\n    toVegaLite\n        [ repeat [ ColumnFields [ \"Cat\", \"Dog\", \"Fish\" ] ]\n        , ( Spec, asSpec spec )\n        ]\n\nSee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/repeat.html)\nfor further details.\n\n",
        "type": "List VegaLite.RepeatFields -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "resolution",
        "comment": " Define a single resolution option to be applied when scales, axes or legends\nin composite views share channel encodings. This allows, for example, two different\ncolor encodings to be created in a layered view, which otherwise by default would\nshare color channels between layers. Each resolution rule should be in a tuple\npairing the channel to which it applies and the rule type.\nThe first parameter identifies the type of resolution, the second a list of previous\nresolutions to which this one may be added.\n\n    resolve\n        << resolution (RScale [ ( ChY, Independent ) ])\n\n",
        "type": "VegaLite.Resolve -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "resolve",
        "comment": " Determine whether scales, axes or legends in composite views should share channel\nencodings. This allows, for example, two different color encodings to be created\nin a layered view, which otherwise by default would share color channels between\nlayers. Each resolution rule should be in a tuple pairing the channel to which it\napplies and the rule type.\n\n    let\n        res =\n            resolve\n                << resolution (RLegend [ ( ChColor, Independent ) ])\n    in\n    toVegaLite\n        [ dataFromUrl \"data/movies.json\" []\n        , vConcat [ heatSpec, barSpec ]\n        , res []\n        ]\n\nFor more information see the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/resolve.html).\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "row",
        "comment": " Encode a new facet to be arranged in rows. The first parameter is a list of\nfacet properties that define the faceting channel. This should include at least\nthe name of data the field and its measurement type. The final parameter is a list\nof any previous channels to which this is to be added. This is usually implicit\nwhen chaining encodings using functional composition\n\n    enc =\n        encoding\n            << position X [ PName \"people\", PmType Quantitative ]\n            << position Y [ PName \"gender\", PmType Nominal ]\n            << row [ FName \"age\", FmType Ordinal ]\n\n",
        "type": "List VegaLite.FacetChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "select",
        "comment": " Create a single named selection that may be applied to a data query or transformation.\nThe first two parameters specify the name to be given to the selection for later reference\nand the type of selection made. The third allows additional selection options to\nbe specified. The fourth is a list of selections to which this is added, which is\ncommonly implicit when chaining a series of selections together with functional\ncomposition.\n\n    sel =\n        selection\n            << select \"view\" Interval [ Bind Scales ] []\n            << select \"myBrush\" Interval []\n            << select \"myPaintbrush\" Multi [ On \"mouseover\", Nearest True ]\n\n",
        "type": "String -> VegaLite.Selection -> List VegaLite.SelectionProperty -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "selection",
        "comment": " Create a full selection specification from a list of selections. For details\nsee the [Vega-Lite documentation](https://vega.github.io/vega-lite/docs/selection.html).\n\n    selection =\n        selection << select \"view\" Interval [ Bind Scales ]\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "shape",
        "comment": " Encode a shape channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by shape. The second parameter\nis a list of any previous channels to which this shape channel should be added.\n\n    shape [ MName \"Species\", MmType Nominal ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "size",
        "comment": " Encode a size channel. The first parameter is a list of mark channel properties\nthat characterise the way a data field is encoded by size. The second parameter\nis a list of any previous channels to which this size channel should be added.\n\n    size [ MName \"Age\", MmType Quantitative ] []\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "specification",
        "comment": " Defines a specification object for use with faceted and repeated small multiples.\n\n    spec = ...\n    toVegaLite\n        [ facet [ RowBy [ FName \"Origin\", FmType Nominal ] ]\n        , specifcation spec\n        ]\n\n",
        "type": "VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "stroke",
        "comment": " Encode a stroke channel. This acts in a similar way to encoding by `color` but\nonly affects the exterior boundary of marks. The first parameter is a list of mark\nchannel properties that characterise the way a data field is encoded by stroke.\nThe second parameter is a list of any previous channels to which this stroke channel\nshould be added.\n\n    stroke [ MName \"Species\", MmType Nominal ] []\n\nNote that if both `stroke` and `color` encodings are specified, `stroke` takes\nprecedence.\n\n",
        "type": "List VegaLite.MarkChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "text",
        "comment": " Encode a text channel. The first parameter is a list of text channel properties\nthat define the channel. The second parameter is a list of any previous channels to\nwhich this channel is to be added. This is usually implicit when chaining a set\nof encodings together with functional composition. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#text)\nfor further details on the text and tooltip channels and\n[Vega-Lite formatting documentation](https://vega.github.io/vega-lite/docs/format.html)\nfor formatting the appearance of the text.\n\n    enc =\n        encoding\n            << position X [ PName \"miles\", PmType Quantitative ]\n            << position Y [ PName \"gas\", PmType Quantitative ]\n            << text [ TName \"miles\", TmType Quantitative ]\n\n",
        "type": "List VegaLite.TextChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "timeUnitAs",
        "comment": " Creates a new data field based on the given temporal binning. Unlike the\ndirect encoding binning, this transformation is named and so can be referred\nto in multiple encodings. The first parameter is the 'width' of each temporal bin,\nthe second is the field to bin and the third is name to give the newly binned\nfield. The final often implicit parameter is a list of previous transformations\nto which this is added. Note though that usually it is easer to apply the temporal\nbinning directly as part of the encoding as this will automatically format the\ntemporal axis. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/timeunit.html#transform)\nfor further details.\n\nThe following example takes a temporal dataset and encodes daily totals from it\ngrouping by month.\n\n    trans =\n        transform << timeUnitAs Month \"date\" \"monthly\"\n\n    enc =\n        encoding\n            << position X [ PName \"date\", PmType Temporal, PTimeUnit Day ]\n            << position Y [ PAggregate Sum, PmType Quantitative ]\n            << detail [ DName \"monthly\", DmType Temporal ]\n\n",
        "type": "VegaLite.TimeUnit -> String -> String -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "title",
        "comment": " Provide an optional title to be displayed in the visualization.\n\n    enc = ...\n    toVegaLite\n        [ title \"Population Growth\"\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "String -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "toVegaLite",
        "comment": " Convert a list of Vega-Lite specifications into a single JSON object that may be\npassed to Vega-Lite for graphics generation. Commonly these will include at least\na data, mark and encoding specification.\n\nWhile simple properties like `mark` may be provided directly, it is usually clearer\nto label more complex ones such as encodings as separate expressions. This becomes\nincreasingly helpful for visualizations that involve composition of layers, repeats\nand facets.\n\nSpecifications can be built up by chaining a series of functions (such as `dataColumn`\nor `position` in the example below). Functional composition using the `<<` operator\nallows this to be done compactly.\n\n    let\n        data =\n            dataFromColumns []\n                << dataColumn \"a\" (Strings [ \"C\", \"C\", \"D\", \"D\", \"E\", \"E\" ])\n                << dataColumn \"b\" (Numbers [ 2, 7, 1, 2, 6, 8 ])\n\n        enc =\n            encoding\n                << position X [ PName \"a\", PmType Nominal ]\n                << position Y [ PName \"b\", PmType Quantitative, PAggregate Mean ]\n    in\n    toVegaLite [ data [], mark Bar [], enc [] ]\n\n",
        "type": "List ( VegaLite.VLProperty, VegaLite.Spec ) -> VegaLite.Spec"
      },
      {
        "name": "tooltip",
        "comment": " Encode a tooltip channel. The first parameter is a list of text channel properties\nthat define the channel. The second parameter is a list of any previous channels to\nwhich this channel is to be added. This is usually implicit when chaining a\nset of encodings together with functional composition. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/encoding.html#text)\nfor further details on the text and tooltip channels and\n[Vega-Lite formatting documentation](https://vega.github.io/vega-lite/docs/format.html)\nfor formatting the appearance of the text.\n\n      enc =\n          encoding\n              << position X [ PName \"Horsepower\", PmType Quantitative ]\n              << position Y [ PName \"Miles_per_Gallon\", PmType Quantitative ]\n              << tooltip [ TName \"Year\", TmType Temporal, TFormat \"%Y\" ]\n\n",
        "type": "List VegaLite.TextChannel -> List VegaLite.LabelledSpec -> List VegaLite.LabelledSpec"
      },
      {
        "name": "transform",
        "comment": " Create a single transform from a list of transformation specifications. Note\nthat the order of transformations can be important, especially if labels created\nwith `calculateAs`, `timeUnitAs` and `binAs` are used in other transformations.\nUsing the functional composition pipeline idiom (as example below) allows you to\nprovide the transformations in the order intended in a clear manner.\n\n    trans =\n        transform\n            << filter (FExpr \"datum.year == 2010\")\n            << calculateAs \"datum.sex == 2 ? 'Female' : 'Male'\" \"gender\"\n\n",
        "type": "List VegaLite.LabelledSpec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "utc",
        "comment": " Provides a UTC version of a given a time (coordinated universal time, independent\nof local time zones or daylight saving).\nFor example,\n\n    encoding\n        << position X [ PName \"date\", PmType Temporal, PTimeUnit (utc YearMonthDateHours) ]\n\n",
        "type": "VegaLite.TimeUnit -> VegaLite.TimeUnit"
      },
      {
        "name": "vConcat",
        "comment": " Assigns a list of specifications to be juxtaposed vertically in a visualization.\n\n    let\n        spec1 = ...\n        spec2 = ...\n    in\n    toVegaLite\n        [ dataFromUrl \"data/driving.json\" []\n        , vConcat [ spec1, spec2 ]\n        ]\n\n",
        "type": "List VegaLite.Spec -> ( VegaLite.VLProperty, VegaLite.Spec )"
      },
      {
        "name": "width",
        "comment": " Override the default width of the visualization. If not specified the width\nwill be calculated based on the content of the visualization.\n\n    enc = ...\n    toVegaLite\n        [ width 500\n        , dataFromUrl \"data/population.json\" []\n        , mark Bar []\n        , enc []\n        ]\n\n",
        "type": "Float -> ( VegaLite.VLProperty, VegaLite.Spec )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Vega",
    "comment": " This module will allow you to create a full Vega specification in Elm. A\nspecification is stored as a JSON object and contains sufficient declarative detail\nto specify the data sources, graphical output and interaction. The module can\ngenerate the JSON that may be passed to the Vega runtime library to activate the\nvisualization.\n\n\n# Creating A Vega Specification\n\n@docs toVega\n@docs combineSpecs\n\n@docs VProperty\n\n\n# Passing Values into a Vega Specification\n\nWhile ultimately, Vega handles standard data types such as numbers, strings and\nBoolean values, a Vega specification uses functions that generate those types.\nThese include, for example, _expressions_ that generate new values based on\noperations applied to existing ones, _fields_ that reference a column of a data\ntable or _signals_ that can respond dynamically to data or interaction changes.\n\n\n## Numeric Values\n\nFor use with functions that expect either direct numeric values, or an expression,\ndata source or signal that can generate numeric values.\n\n@docs num\n@docs nums\n@docs numSignal\n@docs numSignals\n@docs numExpr\n@docs numList\n@docs numNull\n\n\n## String Values\n\nFor use with functions that expect either direct string values, or an expression,\ndata source or signal that can generate string values.\n\n@docs str\n@docs strs\n@docs strSignal\n@docs strSignals\n@docs strExpr\n@docs strNull\n\n\n## Boolean Values\n\nFor use with functions that expect either direct Boolean values, or an expression,\ndata source or signal that can generate Boolean values.\n\n@docs true\n@docs false\n@docs boos\n@docs booSignal\n@docs booSignals\n@docs booExpr\n\n\n## Generic Values\n\nFor use with functions that expect values of several different types. These values\ncan be generated with the following functions.\n\n@docs vNum\n@docs vNums\n@docs vStr\n@docs vStrs\n@docs vTrue\n@docs vFalse\n@docs vBoos\n@docs vSignal\n@docs vField\n@docs vColor\n@docs vBand\n@docs vObject\n@docs keyValue\n@docs vValues\n@docs ifElse\n@docs vNull\n@docs vMultiply\n@docs vExponent\n@docs vOffset\n@docs vRound\n@docs vScale\n@docs vScaleField\n\n\n## Indirect References\n\n@docs field\n@docs fSignal\n@docs fExpr\n@docs fDatum\n@docs fGroup\n@docs fParent\n@docs expr\n@docs exField\n\n\n## Thematic Data Types\n\n@docs TimeUnit\n@docs timeUnitSignal\n@docs cHCL\n@docs cHSL\n@docs cLAB\n@docs cRGB\n\n\n# Creating a Data Specification\n\nFunctions for declaring the input data to a visualization.\n\n@docs dataSource\n@docs data\n\n@docs dataFromColumns\n@docs dataColumn\n\n@docs dataFromRows\n@docs dataRow\n@docs DataProperty\n\n@docs daUrl\n@docs daFormat\n@docs daSource\n@docs daSources\n@docs daValue\n@docs daOn\n\n@docs daDataset\n@docs daField\n@docs daFields\n@docs daValues\n@docs daSignal\n@docs daReferences\n\n\n## Data Sorting\n\n@docs daSort\n@docs SortProperty\n@docs sortPropertySignal\n@docs soOp\n@docs soByField\n\n@docs Order\n@docs orderSignal\n\n\n## Data Formatting\n\nFunctions for parsing input data and specifying their format.\n\n@docs FormatProperty\n@docs dsv\n@docs jsonProperty\n@docs topojsonMesh\n@docs topojsonFeature\n\n@docs DataType\n@docs parse\n@docs foDate\n@docs foUtc\n\n\n# Transforming Data\n\nTransforms are essential in order to use the full range of data visualization types\nin Vega. They can be applied to data streams and to marks.\n\nApplying a transform to a data stream can filter or generate new fields in the stream,\nor derive new data streams. This is done by piping (`|>`) the stream into the\n`transform` function and specifying the type of transform to apply via one or\nmore of the functions described below.\n\n@docs transform\n\n\n## Basic Transforms\n\n\n### Aggregation\n\n@docs trAggregate\n@docs agGroupBy\n@docs agFields\n@docs agOps\n@docs agAs\n@docs agCross\n@docs agDrop\n@docs agKey\n\n@docs Operation\n@docs operationSignal\n\n@docs trJoinAggregate\n@docs jaGroupBy\n@docs jaFields\n@docs jaOps\n@docs jaAs\n\n\n### Binning\n\n@docs trBin\n@docs bnAnchor\n@docs bnMaxBins\n@docs bnBase\n@docs bnStep\n@docs bnSteps\n@docs bnMinStep\n@docs bnDivide\n@docs bnNice\n@docs bnSignal\n@docs bnAs\n\n\n### Collection\n\n@docs trCollect\n\n\n### Text Pattern Counting\n\n@docs trCountPattern\n@docs cpPattern\n@docs cpCase\n@docs Case\n@docs cpStopwords\n@docs cpAs\n\n\n### Cross Product\n\n@docs trCross\n@docs crFilter\n@docs crAs\n\n\n### Probability Density Function Calculation\n\n@docs trDensity\n@docs dnExtent\n@docs dnMethod\n@docs DensityFunction\n@docs densityFunctionSignal\n@docs dnSteps\n@docs dnAs\n\n@docs diNormal\n@docs diUniform\n@docs diKde\n@docs diMixture\n\n\n### Range calculation\n\n@docs trExtent\n@docs trExtentAsSignal\n\n\n### Filtering\n\n@docs trFilter\n@docs trCrossFilter\n@docs trCrossFilterAsSignal\n@docs trResolveFilter\n\n\n### Flattening\n\n@docs trFlatten\n@docs trFlattenAs\n\n\n### Folding and Pivoting\n\n@docs trFold\n@docs trFoldAs\n@docs trPivot\n@docs piGroupBy\n@docs piLimit\n@docs piOp\n\n\n### Deriving New Fields\n\n@docs trFormula\n@docs trFormulaInitOnly\n\n@docs trLookup\n@docs luAs\n@docs luValues\n@docs luDefault\n\n@docs trIdentifier\n@docs trProject\n\n@docs trWindow\n@docs wnAggOperation\n@docs wnOperation\n@docs wnOperationOn\n@docs WOperation\n@docs wOperationSignal\n@docs wnSort\n@docs wnGroupBy\n@docs wnFrame\n@docs wnIgnorePeers\n\n\n### Handling Missing Values\n\n@docs trImpute\n@docs imKeyVals\n@docs imMethod\n@docs ImputeMethod\n@docs imGroupBy\n@docs imValue\n\n\n### Sampling\n\n@docs trSample\n\n\n### Data Generation\n\n@docs trSequence\n\n\n## Geographic Transforms\n\n\n### Contouring\n\n@docs trContour\n@docs cnValues\n@docs cnX\n@docs cnY\n@docs cnCellSize\n@docs cnBandwidth\n@docs cnSmooth\n@docs cnThresholds\n@docs cnCount\n@docs cnNice\n\n\n### GeoJSON transformation\n\n@docs trGeoShape\n@docs trGeoPath\n@docs gpField\n@docs gpPointRadius\n@docs gpAs\n@docs trGeoJson\n@docs gjFields\n@docs gjFeature\n@docs gjSignal\n\n@docs trGeoPoint\n@docs trGeoPointAs\n\n\n### Graticule Generation\n\n@docs trGraticule\n@docs grExtent\n@docs grExtentMajor\n@docs grExtentMinor\n@docs grStep\n@docs grStepMajor\n@docs grStepMinor\n@docs grField\n@docs grPrecision\n\n\n## Layout Transforms\n\n\n### Link Paths\n\n@docs trLinkPath\n@docs lpSourceX\n@docs lpSourceY\n@docs lpTargetX\n@docs lpTargetY\n@docs lpOrient\n@docs lpShape\n@docs lpAs\n@docs LinkShape\n@docs linkShapeSignal\n\n\n### Angular Layouts\n\n@docs trPie\n@docs piField\n@docs piStartAngle\n@docs piEndAngle\n@docs piSort\n@docs piAs\n\n\n### Stacked Layouts\n\n@docs trStack\n@docs stField\n@docs stGroupBy\n@docs stSort\n@docs stOffset\n@docs stAs\n@docs StackOffset\n@docs stackOffsetSignal\n\n\n### Force-Generated Layouts\n\n@docs trForce\n\n@docs fsStatic\n@docs fsRestart\n@docs fsIterations\n@docs fsAlpha\n@docs fsAlphaMin\n@docs fsAlphaTarget\n@docs fsVelocityDecay\n@docs fsForces\n@docs fsAs\n\n@docs foCenter\n@docs foCollide\n@docs foNBody\n@docs foLink\n@docs foX\n@docs foY\n\n@docs fpStrength\n@docs fpDistance\n@docs fpIterations\n@docs fpTheta\n@docs fpDistanceMin\n@docs fpDistanceMax\n@docs fpId\n\n\n### Voronoi Diagram\n\n@docs trVoronoi\n@docs voSize\n@docs voExtent\n@docs voAs\n\n\n### Word Cloud layout\n\n@docs trWordcloud\n@docs wcFont\n@docs wcFontStyle\n@docs wcFontWeight\n@docs wcFontSize\n@docs wcFontSizeRange\n@docs wcPadding\n@docs wcRotate\n@docs wcText\n@docs wcSize\n@docs wcSpiral\n@docs Spiral\n@docs spiralSignal\n@docs wcAs\n\n\n## Hierarchy Transforms\n\n@docs trNest\n@docs trStratify\n\n@docs trPack\n@docs paField\n@docs paSort\n@docs paSize\n@docs paRadius\n@docs paPadding\n@docs paAs\n\n@docs trPartition\n@docs ptField\n@docs ptSort\n@docs ptPadding\n@docs ptRound\n@docs ptSize\n@docs ptAs\n\n@docs trTree\n@docs teField\n@docs teSort\n@docs teMethod\n@docs TreeMethod\n@docs treeMethodSignal\n@docs teSize\n@docs teNodeSize\n@docs teAs\n\n@docs trTreeLinks\n\n@docs trTreemap\n@docs tmField\n@docs tmSort\n@docs tmMethod\n@docs TreemapMethod\n@docs treemapMethodSignal\n@docs tmPadding\n@docs tmPaddingInner\n@docs tmPaddingOuter\n@docs tmPaddingTop\n@docs tmPaddingLeft\n@docs tmPaddingBottom\n@docs tmPaddingRight\n@docs tmRatio\n@docs tmRound\n@docs tmSize\n@docs tmAs\n\n\n## Cross-Filter Transforms\n\n\n# Signals, Triggers and Interaction Events\n\nSignals are the means by which dynamic data values may be passed around the visualization specification.\nThese are commonly linked to interaction events that may vary at runtime.\n\n\n## Signals\n\n@docs signals\n@docs signal\n@docs siName\n@docs siValue\n@docs siBind\n@docs siDescription\n@docs siOn\n@docs siUpdate\n@docs siReact\n@docs siPushOuter\n\n\n## User Interface Inputs\n\n@docs iCheckbox\n@docs iText\n@docs iNumber\n@docs iDate\n@docs iDateTimeLocal\n@docs iTime\n@docs iMonth\n@docs iWeek\n@docs iRadio\n@docs iRange\n@docs iSelect\n@docs iTel\n@docs iColor\n\n@docs inDebounce\n@docs inElement\n@docs inOptions\n@docs inMin\n@docs inMax\n@docs inStep\n@docs inPlaceholder\n@docs inAutocomplete\n\n\n## Event Handling\n\nSee the [Vega event stream documentation](http://vega.github.io/vega/docs/event-streams)\nfor details on the modelling of event streams.\n\n@docs evHandler\n@docs evUpdate\n@docs evEncode\n@docs evForce\n\n@docs esObject\n@docs esSignal\n@docs esMerge\n@docs esStream\n@docs esSelector\n@docs esSource\n@docs esType\n@docs esBetween\n@docs esConsume\n@docs esFilter\n@docs esDebounce\n@docs esMarkName\n@docs esMark\n@docs esThrottle\n\n@docs evStreamSelector\n@docs EventSource\n\n@docs esDom\n@docs EventType\n\n\n## Triggers\n\n@docs on\n@docs trigger\n@docs tgInsert\n@docs tgRemove\n@docs tgRemoveAll\n@docs tgToggle\n@docs tgModifyValues\n\n\n# Specifying Scales\n\nScales determine the mapping between data values and their visual expression (channels) such as color or position.\n\n@docs scales\n@docs scale\n@docs scReverse\n@docs scRound\n@docs scClamp\n@docs scPadding\n@docs scNice\n@docs scZero\n@docs scExponent\n@docs scBase\n@docs scAlign\n@docs scDomainImplicit\n@docs scPaddingInner\n@docs scPaddingOuter\n@docs scRangeStep\n\n@docs ScaleNice\n@docs scaleNiceSignal\n@docs nInterval\n@docs nTickCount\n@docs csScheme\n@docs csCount\n@docs csExtent\n\n\n## Scale Types\n\n@docs scType\n@docs Scale\n@docs scaleSignal\n@docs scCustom\n\n\n## Scale Domains\n\nA scale domain describes the extent of data that inform a scaling.\n\n@docs scDomain\n@docs scDomainMax\n@docs scDomainMin\n@docs scDomainMid\n@docs scDomainRaw\n@docs doNums\n@docs doStrs\n@docs doSignal\n@docs doSignals\n@docs doData\n\n\n## Scale Ranges\n\nA scale range describes the extent of scaled values after transformation.\n\n@docs scRange\n@docs ScaleRange\n@docs scaleRangeSignal\n@docs raNums\n@docs raStrs\n@docs raValues\n@docs raSignal\n@docs raScheme\n@docs raData\n@docs raStep\n@docs raCustomDefault\n\n\n## Color Scales\n\n@docs scInterpolate\n@docs CInterpolate\n@docs cubeHelix\n@docs cubeHelixLong\n@docs hclLong\n@docs hslLong\n@docs rgb\n\n\n# Specifying Projections\n\n@docs projections\n@docs projection\n@docs Projection\n@docs projectionSignal\n@docs projectionValue\n@docs prCustom\n@docs prType\n@docs prClipAngle\n@docs prClipExtent\n@docs prScale\n@docs prTranslate\n@docs prCenter\n@docs prRotate\n@docs prPointRadius\n@docs prPrecision\n@docs prCoefficient\n@docs prDistance\n@docs prFraction\n@docs prLobes\n@docs prParallel\n@docs prRadius\n@docs prRatio\n@docs prSpacing\n@docs prTilt\n@docs prFit\n@docs feName\n@docs featureSignal\n@docs prExtent\n@docs prSize\n\n\n# Specifying Axes\n\n@docs axes\n@docs axis\n@docs axBandPosition\n@docs axDomain\n@docs axDomainColor\n@docs axDomainOpacity\n@docs axDomainWidth\n@docs axEncode\n@docs axFormat\n@docs axGrid\n@docs axGridColor\n@docs axGridOpacity\n@docs axGridDash\n@docs axGridScale\n@docs axGridWidth\n@docs axLabels\n@docs axLabelBound\n@docs axLabelAlign\n@docs axLabelBaseline\n@docs axLabelAngle\n@docs axLabelColor\n@docs axLabelOpacity\n@docs axLabelFont\n@docs axLabelFontSize\n@docs axLabelFontWeight\n@docs axLabelFlush\n@docs axLabelFlushOffset\n@docs axLabelLimit\n@docs axLabelPadding\n@docs axLabelOverlap\n@docs axMinExtent\n@docs axMaxExtent\n@docs axOffset\n@docs axPosition\n@docs axTicks\n@docs axTickCount\n@docs axTemporalTickCount\n@docs axTickColor\n@docs axTickOpacity\n@docs axTickExtra\n@docs axTickOffset\n@docs axTickRound\n@docs axTickWidth\n@docs axTickSize\n@docs axTitle\n@docs axTitleAlign\n@docs axTitleAngle\n@docs axTitleBaseline\n@docs axTitleColor\n@docs axTitleOpacity\n@docs axTitleFont\n@docs axTitleFontSize\n@docs axTitleFontWeight\n@docs axTitleLimit\n@docs axTitlePadding\n@docs axTitleX\n@docs axTitleY\n@docs axValues\n@docs axZIndex\n@docs AxisElement\n@docs Side\n@docs sideSignal\n@docs OverlapStrategy\n@docs overlapStrategySignal\n\n\n# Specifying Legends\n\n@docs legends\n@docs legend\n@docs leType\n@docs leDirection\n@docs leOrient\n@docs leFill\n@docs leOpacity\n@docs leShape\n@docs leSize\n@docs leStroke\n@docs leStrokeDash\n@docs leEncode\n@docs leFormat\n@docs leGridAlign\n@docs leClipHeight\n@docs leColumns\n@docs leColumnPadding\n@docs leRowPadding\n@docs leCornerRadius\n@docs leFillColor\n@docs leOffset\n@docs lePadding\n@docs leStrokeColor\n@docs leStrokeWidth\n@docs leGradientDirection\n@docs leGradientLabelLimit\n@docs leGradientLabelOffset\n@docs leGradientLength\n@docs leGradientThickness\n@docs leGradientStrokeColor\n@docs leGradientStrokeWidth\n@docs leLabelAlign\n@docs leLabelBaseline\n@docs leLabelColor\n@docs leLabelFont\n@docs leLabelFontSize\n@docs leLabelFontWeight\n@docs leLabelLimit\n@docs leLabelOffset\n@docs leLabelOverlap\n@docs leSymbolFillColor\n@docs leSymbolOffset\n@docs leSymbolSize\n@docs leSymbolStrokeColor\n@docs leSymbolStrokeWidth\n@docs leSymbolType\n@docs leTickCount\n@docs leTemporalTickCount\n@docs leTitle\n@docs leTitleAlign\n@docs leTitleBaseline\n@docs leTitleColor\n@docs leTitleFont\n@docs leTitleFontSize\n@docs leTitleFontWeight\n@docs leTitleLimit\n@docs leTitlePadding\n@docs leValues\n@docs leZIndex\n@docs LegendType\n@docs legendTypeSignal\n@docs LegendOrientation\n@docs legendOrientationSignal\n@docs enLegend\n@docs enTitle\n@docs enLabels\n@docs enSymbols\n@docs enGradient\n\n\n# Specifying Titles\n\n@docs tiAnchor\n@docs tiAngle\n@docs Anchor\n@docs anchorSignal\n@docs tiBaseline\n@docs tiColor\n@docs tiEncode\n@docs tiFont\n@docs tiFontSize\n@docs tiFontWeight\n@docs tiFrame\n@docs TitleFrame\n@docs titleFrameSignal\n@docs tiInteractive\n@docs tiLimit\n@docs tiName\n@docs tiOffset\n@docs tiOrient\n@docs tiStyle\n@docs tiZIndex\n\n\n# Specifying Layout\n\n@docs layout\n@docs GridAlign\n@docs gridAlignSignal\n@docs grAlignRow\n@docs grAlignColumn\n@docs BoundsCalculation\n@docs bcSignal\n@docs loAlign\n@docs loBounds\n@docs loColumns\n@docs loPadding\n@docs loPaddingRC\n@docs loOffset\n@docs loOffsetRC\n@docs loHeaderBand\n@docs loHeaderBandRC\n@docs loFooterBand\n@docs loFooterBandRC\n@docs loTitleBand\n@docs loTitleBandRC\n\n\n# Specifying Marks\n\n## Top-Level Marks\n\n@docs marks\n@docs mark\n@docs Mark\n@docs mClip\n@docs mDescription\n@docs mEncode\n@docs mFrom\n@docs mInteractive\n@docs mKey\n@docs mName\n@docs mOn\n@docs mSort\n@docs mTransform\n@docs mStyle\n@docs mGroup\n@docs mZIndex\n\n@docs clEnabled\n@docs clPath\n@docs clSphere\n@docs srData\n\n\n## Faceting\n\nFaceting splits up a data source between multiple group mark items. Each group\nmark is backed by an aggregate data value representing the entire group. Facets\ncan be _data-driven_, in which partitions are determined by grouping data values\nby specified attributes or _pre-faceted_ when the data source already contains a\nlist of sub-values.\n\n@docs srFacet\n@docs faField\n@docs faGroupBy\n@docs faAggregate\n\n\n## Lower-level Mark Properties\n\n@docs maX\n@docs maX2\n@docs maXC\n@docs maWidth\n@docs maY\n@docs maY2\n@docs maYC\n@docs maHeight\n@docs maOpacity\n@docs maFill\n@docs maFillOpacity\n@docs maStroke\n@docs transparent\n@docs black\n@docs white\n@docs maStrokeOpacity\n@docs maStrokeWidth\n@docs maStrokeCap\n@docs maStrokeDash\n@docs maStrokeDashOffset\n@docs maStrokeJoin\n@docs maStrokeMiterLimit\n@docs maCursor\n@docs maHRef\n@docs maTooltip\n@docs maZIndex\n@docs maAlign\n@docs maBaseline\n@docs maCornerRadius\n@docs maInterpolate\n@docs maTension\n@docs maDefined\n@docs maSize\n@docs maStartAngle\n@docs maEndAngle\n@docs maPadAngle\n@docs maInnerRadius\n@docs maOuterRadius\n@docs maOrient\n@docs maGroupClip\n@docs maUrl\n@docs maAspect\n@docs maPath\n@docs maShape\n@docs maSymbol\n@docs maAngle\n@docs maDir\n@docs maDx\n@docs maDy\n@docs maEllipsis\n@docs maFont\n@docs maFontSize\n@docs maFontWeight\n@docs maFontStyle\n@docs maLimit\n@docs maRadius\n@docs maText\n@docs maTheta\n@docs maCustom\n\n\n## Encoding\n\n@docs enEnter\n@docs enUpdate\n@docs enHover\n@docs enExit\n@docs enCustom\n@docs enName\n@docs enInteractive\n@docs MarkInterpolation\n@docs markInterpolationValue\n@docs Orientation\n@docs orientationSignal\n@docs orientationValue\n@docs Cursor\n@docs cursorValue\n@docs HAlign\n@docs hAlignSignal\n@docs hLeft\n@docs hCenter\n@docs hRight\n@docs VAlign\n@docs vAlignSignal\n@docs vTop\n@docs vMiddle\n@docs vBottom\n@docs vAlphabetic\n@docs Symbol\n@docs symbolValue\n@docs symbolSignal\n@docs symPath\n@docs StrokeCap\n@docs strokeCapValue\n@docs strokeCapSignal\n@docs StrokeJoin\n@docs strokeJoinSignal\n@docs strokeJoinValue\n@docs textDirectionValue\n@docs TextDirection\n@docs textDirectionSignal\n\n\n# Configuring Visualization Appearance\n\n@docs config\n\n\n## View Configuration\n\n@docs cfAutosize\n@docs cfBackground\n@docs cfGroup\n\n\n## Event Configuration\n\n@docs cfEvents\n@docs EventFilter\n\n\n## Mark Configuration\n\n@docs cfMark\n@docs cfMarks\n\n\n## Style Configuration\n\n@docs cfStyle\n\n\n## Axis Configuration\n\n@docs cfAxis\n@docs AxisType\n\n\n## Legend Configuration\n\n@docs cfLegend\n\n\n## Title Configuration\n\n@docs cfTitle\n\n\n## Scale Range Configuration\n\n@docs cfScaleRange\n\n\n# Specifying Supplementary Properties\n\nOptions that affect the entire visualization. These are in addition\nto the data and transform options described above.\n\n@docs title\n@docs autosize\n@docs height\n@docs padding\n@docs paddings\n@docs width\n@docs Autosize\n@docs autosizeSignal\n@docs background\n@docs encode\n\n---\n\n\n# Type Reference\n\nThe following types are not specified directly but instead created by various functions\nas described above.\nThey are provided here for reference with links to the functions that generate them.\n\n@docs AggregateProperty\n@docs AxisProperty\n@docs Bind\n@docs BinProperty\n@docs Boo\n@docs Clip\n@docs ColorSchemeProperty\n@docs ColorValue\n@docs ConfigProperty\n@docs ContourProperty\n@docs CountPatternProperty\n@docs CrossProperty\n@docs Data\n@docs DataColumn\n@docs DataReference\n@docs DataRow\n@docs DataTable\n@docs DensityProperty\n@docs Distribution\n@docs EncodingProperty\n@docs EventHandler\n@docs EventStream\n@docs EventStreamProperty\n@docs Expr\n@docs Facet\n@docs Feature\n@docs Field\n@docs Force\n@docs ForceProperty\n@docs ForceSimulationProperty\n@docs GeoJsonProperty\n@docs GeoPathProperty\n@docs GraticuleProperty\n@docs ImputeProperty\n@docs InputProperty\n@docs JoinAggregateProperty\n@docs LayoutProperty\n@docs LegendEncoding\n@docs LegendProperty\n@docs LinkPathProperty\n@docs LookupProperty\n@docs MarkProperty\n@docs Num\n@docs PackProperty\n@docs PartitionProperty\n@docs PieProperty\n@docs PivotProperty\n@docs ProjectionProperty\n@docs ScaleDomain\n@docs ScaleProperty\n@docs SignalProperty\n@docs Source\n@docs Spec\n@docs StackProperty\n@docs Str\n@docs TitleProperty\n@docs TopMarkProperty\n@docs Transform\n@docs TreemapProperty\n@docs TreeProperty\n@docs Trigger\n@docs TriggerProperty\n@docs Value\n@docs VoronoiProperty\n@docs WindowOperation\n@docs WindowProperty\n@docs WordcloudProperty\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Convenience type annotation label for use with data generation functions.\nGenerated by [dataSource](#dataSource) but is also useful when creating your own\ndata generating functions. For example:\n\n    myData : Int -> Data\n    myData yr =\n        dataSource\n            [ data \"population\" [ daSource \"pop\" ]\n                |> transform [ trFilter (expr (\"datum.year == \" ++ toString yr)) ]\n            ]\n\n",
        "args": [],
        "type": "( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "DataColumn",
        "comment": " Represents a single column of data. Generated when creating inline data with\n[dataColumn](#dataColumn).\n",
        "args": [],
        "type": "List Vega.LabelledSpec"
      },
      {
        "name": "DataRow",
        "comment": " Represents a single row of data. Generated when creating inline data with\n[dataRow](#dataRow).\n",
        "args": [],
        "type": "Vega.Spec"
      },
      {
        "name": "DataTable",
        "comment": " Represents a single table of data (collection of `dataColumn` specifications).\nGenerated by [data](#data), [dataFromColumns](#dataFromColumns),\n[dataFromRows](#dataFromRows), [on](#on) and [transform](#transform).\n",
        "args": [],
        "type": "List Vega.LabelledSpec"
      },
      {
        "name": "Spec",
        "comment": " A Vega specification. Specs can be (and usually are) nested.\nThey can range from a single Boolean value up to the entire Vega specification.\n",
        "args": [],
        "type": "Json.Encode.Value"
      },
      {
        "name": "Trigger",
        "comment": " Represents a trigger enabling dynamic updates to data and marks. Generated\nby [trigger](#trigger). For details see the\n[Vega trigger documentation](https://vega.github.io/vega/docs/triggers/)\n",
        "args": [],
        "type": "Vega.Spec"
      }
    ],
    "types": [
      {
        "name": "AggregateProperty",
        "comment": " Properties of the aggregate transformation. Generated by [agAs](#agAs),\n[agCross](#agCross), [agDrop](#agDrop), [agFields](#agFields),\n[agGroupBy](#agGroupBy), [agOps](#agOps) and [agKey](#agKey). For details see the\n[Vega aggregate documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Anchor",
        "comment": " Represents an anchor position, as used for example, in placing title text.\n",
        "args": [],
        "cases": [
          [
            "Start",
            []
          ],
          [
            "Middle",
            []
          ],
          [
            "End",
            []
          ]
        ]
      },
      {
        "name": "Autosize",
        "comment": " Indicates the auto-sizing characteristics of the visualization such as amount\nof padding, whether it should fill the parent container etc. For more details see the\n[Vega autosize documentation](https://vega.github.io/vega/docs/specification/#autosize-types)\n",
        "args": [],
        "cases": [
          [
            "AContent",
            []
          ],
          [
            "AFit",
            []
          ],
          [
            "AFitX",
            []
          ],
          [
            "AFitY",
            []
          ],
          [
            "ANone",
            []
          ],
          [
            "APad",
            []
          ],
          [
            "APadding",
            []
          ],
          [
            "AResize",
            []
          ]
        ]
      },
      {
        "name": "AxisElement",
        "comment": " Encodable axis element. Used for customising some part of an axis. For details see\nthe [Vega custom axes documentation](https://vega.github.io/vega/docs/axes/#custom).\n",
        "args": [],
        "cases": [
          [
            "EAxis",
            []
          ],
          [
            "ETicks",
            []
          ],
          [
            "EGrid",
            []
          ],
          [
            "ELabels",
            []
          ],
          [
            "ETitle",
            []
          ],
          [
            "EDomain",
            []
          ]
        ]
      },
      {
        "name": "AxisProperty",
        "comment": " Indicates the characteristics of a chart axis such as its orientation, labels\nand ticks. Generated by [axBandPosition](#axBandPosition), [axDomain](#axDomain),\n[axDomainColor](#axDomainColor), [axDomainOpacity](#axDomainOpacity),\n[axDomainWidth](#axDomainWidth), [axEncode](#axEncode), [axFormat](#axFormat),\n[axGrid](#axGrid), [axGridColor](#axGridColor), [axGridDash](#axGridDash),\n[axGridOpacity](#axGridOpacity), [axGridScale](#axGridScale), [axGridWidth](#axGridWidth),\n[axLabels](#axLabels), [axLabelAlign](#axLabelAlign), [axLabelBaseline](#axLabelBaseline),\n[axLabelBound](#axLabelBound), [axLabelColor](#axLabelColor), [axLabelFlush](#axLabelFlush),\n[axLabelFlushOffset](#axLabelFlushOffset), [axLabelFont](#axLabelFont), [axLabelFontSize](#axLabelFontSize)\n[axLabelFontWeight](#axLabelFontWeight), [axLabelLimit](#axLabelLimit), [axLabelOpacity](#axLabelOpacity)\n[axLabelOverlap](#axLabelOverlap), [axLabelPadding](#axLabelPadding), [axMaxExtent](#axMaxExtent),\n[axMinExtent](#axMinExtent), [axOffset](#axOffset), [axPosition](#axPosition),\n[axTicks](#axTicks), [axTickColor](#axTickColor), [axTickCount](#axTickCount),\n[axTemporalTickCount](#axTemporalTickCount), [axTickExtra](#axTickExtra),\n[axTickOffset](#axTickOffset), [axTickOpacity](#axTickOpacity), [axTickRound](#axTickRound),\n[axTickSize](#axTickSize), [axTickWidth](#axTickWidth), [axTitle](#axTitle),\n[axTitleAlign](#axTitleAlign), [axTitleAngle](#axTitleAngle), [axTitleBaseline](#axTitleBaseline),\n[axTitleColor](#axTitleColor),[axTitleFont](#axTitleFont), [axTitleFontSize](#axTitleFontSize),\n[axTitleFontWeight](#axTitleFontWeight), [axTitleLimit](#axTitleLimit), [axTitleOpacity](#axTitleOpacity),\n[axTitlePadding](#axTitlePadding), [axTitleX](#axTitleX), [axTitleY](#axTitleY),\n[axValues](#axValues) and [axZIndex](#axZIndex). For more details see the\n[Vega axes documentation](https://vega.github.io/vega/docs/axes)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "AxisType",
        "comment": " Identifies the type of axis to be configured with [cfAxis](#cfAxis). For details,\nsee the [Vega axis configuration documentation](https://vega.github.io/vega/docs/config/#axes).\n",
        "args": [],
        "cases": [
          [
            "AxAll",
            []
          ],
          [
            "AxLeft",
            []
          ],
          [
            "AxTop",
            []
          ],
          [
            "AxRight",
            []
          ],
          [
            "AxBottom",
            []
          ],
          [
            "AxX",
            []
          ],
          [
            "AxY",
            []
          ],
          [
            "AxBand",
            []
          ]
        ]
      },
      {
        "name": "BinProperty",
        "comment": " Optional properties of a bin transform. Generated by [bnAnchor](#bnAnchor),\n[bnMaxBins](#bnMaxBins), [bnBase](#bnBase), [bnStep](#bnStep), [bnSteps](#bnSteps),\n[bnMinStep](#bnMinStep), [bnDivide](#bnDivide), [bnNice](#bnNice), [bnSignal](#bnSignal)\nand [bnAs](#bnAs). For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Bind",
        "comment": " Describes a binding to some HTML input element such as a checkbox or radio button.\nGenerated by [iRange](#iRange), [iCheckbox](#iCheckbox), [iRadio](#iRadio),\n[iSelect](#iSelect), [iText](#iText), [iNumber](#iNumber), [iDate](#iDate),\n[iTime](#iTime), [iMonth](#iMonth), [iWeek](#iWeek), [iDateTimeLocal](#iDateTimeLocal),\n[iTel](#iTel) and [iColor](#iColor). For details see the\n[Vega bind documentation](https://vega.github.io/vega/docs/signals/#bind).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Boo",
        "comment": " Represents Boolean-related values. Generated by [true](#true), [false](#false),\n[boos](#boos), [booSignal](#booSignal), [booSignals](#booSignals) and [booExpr](#booExpr)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "BoundsCalculation",
        "comment": " The bounds calculation method to determine the extent of a sub-plot in a grid\nlayout. `Full` indicates the entire calculated bounds (including axes, title, and\nlegend) will be used. `Flush` indicates only the specified width and height values\nfor the group mark will be used. The flush setting can be useful when attempting\nto place sub-plots without axes or legends into a uniform grid structure.\n",
        "args": [],
        "cases": [
          [
            "Full",
            []
          ],
          [
            "Flush",
            []
          ]
        ]
      },
      {
        "name": "CInterpolate",
        "comment": " Indicates the type of color interpolation to apply, when mapping a data field\nonto a color scale. Parameterised interpolation types generated by [cubeHelix](#cubeHelix),\n[cubeHelixLong](#cubeHelixLong), [hclLong](#hclLong), [hslLong](#hslLong) and\n[rgb](#rgb). For details see the\n[Vega quantitative scales documentation](https://vega.github.io/vega/docs/scales/#quantitative).\n",
        "args": [],
        "cases": [
          [
            "Hcl",
            []
          ],
          [
            "Hsl",
            []
          ],
          [
            "Lab",
            []
          ]
        ]
      },
      {
        "name": "Case",
        "comment": " Indicates a type of text case transformation. Used when pre-processing text as\npart of a count pattern transformation.\n",
        "args": [],
        "cases": [
          [
            "Lowercase",
            []
          ],
          [
            "Uppercase",
            []
          ],
          [
            "Mixedcase",
            []
          ]
        ]
      },
      {
        "name": "Clip",
        "comment": " Specify a clip property to limit the area in which a set of marks is visible.\nGenerated by [clEnabled](#clEnabled), [clPath](#clPath) and [clSphere](#clSphere).\nFor details see the\n[Vega clip documentation](https://vega.github.io/vega/docs/marks/#clip).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ColorSchemeProperty",
        "comment": " Describes a color scheme. Generated by [csScheme](#csScheme), [csCount](#csCount)\nand [csExtent](#csExtent). For details see the\n[Vega color scheme documentation](https://vega.github.io/vega/docs/schemes/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ColorValue",
        "comment": " Defines a custom color value. Can use a variety of color spaces such as RGB,\nHSL etc. Generated by [cRGB](#cRGB), [cHSL](#cHSL), [cLAB](#cLAB) and [cHCL](#cHCL).\nFor more details, see the\n[Vega colorValue documentation](https://vega.github.io/vega/docs/types/#ColorValue)}\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ConfigProperty",
        "comment": " Configuration properties to provide default settings for most visual encoding\nchoices. Generated by\n[cfAutosize](#cfAutosize), [cfBackground](#cfBackground), [cfGroup](#cfGroup),\n[cfEvents](#cfEvents), [cfMark](#cfMark), [cfMarks](#cfMarks), [cfStyle](#cfStyle),\n[cfAxis](#cfAxis), [cfLegend](#cfLegend), [cfTitle](#cfTitle), and [cfScaleRange](#cfScaleRange).\nFor details see the\n[Vega configuration documentation](https://vega.github.io/vega/docs/config/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ContourProperty",
        "comment": " Optional properties of a contour transform. Generated by\n[cnValues](#cnValues), [cnX](#cnX), [cnY](#cnY), [cnCellSize](#cnCellSize),\n[cnBandwidth](#cnBandWidth), [cnSmooth](#cnSmooth), [cnThresholds](#cnThresholds),\n[cnCount](#cnCount) and [cnNice](#cnNice). For details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "CountPatternProperty",
        "comment": " Optional properties of a count pattern transform. Generated by\n[cpPattern](#cpPattern), [cpCase](#cpCase), [cpStopwords](#cpStopwords) and\n[cpAs](#cprAs). For details see the\n[Vega count pattern transform documentation](https://vega.github.io/vega/docs/transforms/countpattern/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "CrossProperty",
        "comment": " Optional properties of a cross-product transform. Generated by\n[crFilter](#crFilter) and [crAs](#ccrAs). For details see the\n[Vega cross-product transform documentation](https://vega.github.io/vega/docs/transforms/cross/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Cursor",
        "comment": " Represents the type of cursor to display. For an explanation of each type, see the\n[CSS cursor documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Keyword%20values)\n",
        "args": [],
        "cases": [
          [
            "CAuto",
            []
          ],
          [
            "CDefault",
            []
          ],
          [
            "CNone",
            []
          ],
          [
            "CContextMenu",
            []
          ],
          [
            "CHelp",
            []
          ],
          [
            "CPointer",
            []
          ],
          [
            "CProgress",
            []
          ],
          [
            "CWait",
            []
          ],
          [
            "CCell",
            []
          ],
          [
            "CCrosshair",
            []
          ],
          [
            "CText",
            []
          ],
          [
            "CVerticalText",
            []
          ],
          [
            "CAlias",
            []
          ],
          [
            "CCopy",
            []
          ],
          [
            "CMove",
            []
          ],
          [
            "CNoDrop",
            []
          ],
          [
            "CNotAllowed",
            []
          ],
          [
            "CAllScroll",
            []
          ],
          [
            "CColResize",
            []
          ],
          [
            "CRowResize",
            []
          ],
          [
            "CNResize",
            []
          ],
          [
            "CEResize",
            []
          ],
          [
            "CSResize",
            []
          ],
          [
            "CWResize",
            []
          ],
          [
            "CNEResize",
            []
          ],
          [
            "CNWResize",
            []
          ],
          [
            "CSEResize",
            []
          ],
          [
            "CSWResize",
            []
          ],
          [
            "CEWResize",
            []
          ],
          [
            "CNSResize",
            []
          ],
          [
            "CNESWResize",
            []
          ],
          [
            "CNWSEResize",
            []
          ],
          [
            "CZoomIn",
            []
          ],
          [
            "CZoomOut",
            []
          ],
          [
            "CGrab",
            []
          ],
          [
            "CGrabbing",
            []
          ]
        ]
      },
      {
        "name": "DataProperty",
        "comment": " Specify a property to customise data loading. In addition to declaring `DaSphere`\nfor a global sphere, they are more usually generated by the functions\n[daFormat](#daFormat), [daSource](#daSource), [daSources](#daSources),\n[daValue](#daValue),[daOn](#daOn) and [daUrl](#daUrl). For details, see the\n[Vega data properties documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "args": [],
        "cases": [
          [
            "DaSphere",
            []
          ]
        ]
      },
      {
        "name": "DataReference",
        "comment": " Reference to one or more sources of data such as dataset, field name or collection\nof fields. Generated by [daDataset](#daDataset), [daField](#daField), [daFields](#daFields),\n[daSignal](#daSignal), [daValues](#daValues) [daReferences](#daReferences) and\n[daSort](#daSort). For details see the\n[Vega dataref documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "DataType",
        "comment": " Indicates the type of data to be parsed when reading input data. Parameterised\ndata type format specifications generated by [foDate](#foDate) and [foUtc](#foUtc).\n",
        "args": [],
        "cases": [
          [
            "FoNum",
            []
          ],
          [
            "FoBoo",
            []
          ]
        ]
      },
      {
        "name": "DensityFunction",
        "comment": " Specifies a density function as either a Probability Density Function (PDF)\nor a Cumulative Density Function (CDF).\nFor details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "args": [],
        "cases": [
          [
            "PDF",
            []
          ],
          [
            "CDF",
            []
          ]
        ]
      },
      {
        "name": "DensityProperty",
        "comment": " A density transform property that specifies how a density transform is to be\nperformed. Generated by the following functions: [dnExtent](#dnExtent), [dnMethod](#dnMethod),\n[dnSteps](#dnSteps) and [dnAs](#dnAs). For details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Distribution",
        "comment": " Specifies a distribution for use in density estimation or generating probability\ndistributions. Generated by the following functions: [diNormal](#diNormal),\n[diUniform](#diUniform), [diKde](#diKde) and [diMixture](#diMixture). For details see the\n[Vega distribution documentation](https://vega.github.io/vega/docs/transforms/density/#distributions).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "EncodingProperty",
        "comment": " Specifies an encoding. Generated by [enEnter](#enEnter), [enUpdate](#enUpdate),\n[enExit](#enExit), [enHover](#enHover), [enName](#enName), [enInteractive](#enInteractive)\nand [enCustom](#enCustom). For further details see the\n[Vega encoding documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "EventFilter",
        "comment": " Used to configure default event handling. Can be used to prevent or allow a\nset of event types from being handled. For details see the\n[Vega event configuration documentation](https://vega.github.io/vega/docs/config/#event).\n",
        "args": [],
        "cases": [
          [
            "Prevent",
            []
          ],
          [
            "Allow",
            []
          ]
        ]
      },
      {
        "name": "EventHandler",
        "comment": " An event handler indicating which events to respond to and what to update or\nencode as a result. Generated by the following functions: [evHandler](#evHandler),\n[evUpdate](#evUpdate), [evEncode](#evEncode) and [evForce](#evForce).\nFor details see the\n[Vega handlers documentation](https://vega.github.io/vega/docs/signals/#handlers).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "EventSource",
        "comment": " A source for an event selector. To specify a DOM node as a source (using a\nCSS selector string), see [esDom](#esDom). For details see the\n[Vega event stream selector documentation](http://vega.github.io/vega/docs/event-streams/#selector).\n",
        "args": [],
        "cases": [
          [
            "ESAll",
            []
          ],
          [
            "ESView",
            []
          ],
          [
            "ESScope",
            []
          ],
          [
            "ESWindow",
            []
          ]
        ]
      },
      {
        "name": "EventStream",
        "comment": " An event stream for modelling user input. This can either be an event stream\nobject or a shorthand event stream selector string. Generated by the following\nfunctions: [esObject](#esObject), [esSelector](#esSelector), [esSignal](#esSignal)\nand [esMerge](#esMerge). For details see the\n[Vega event stream documentation](https://vega.github.io/vega/docs/event-streams/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "EventStreamProperty",
        "comment": " An event stream object property such as the source generating events, event\nfiltering, event consuming behaviour and throttling. Generated by the following\nfunctions: [esSource](#esSource), [esType](#esType), [esBetween](#esBetween),\n[esConsume](#esConsume), [esFilter](#esFilter), [esDebounce](#esDebounce),\n[esMarkName](#esMarkName), [esMark](#esMark), [esThrottle](#esThrottle) and\n[esStream](#esStream). For details see the\n[Vega event stream object documentation](http://vega.github.io/vega/docs/event-streams/#object).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "EventType",
        "comment": " Event types used when handling user interaction events. The `Timer` type will\nfire an event at a regular interval determined by the number of milliseconds provided\nto the `esThrottle` function. For details see the\n[Vega event stream type documentation](http://vega.github.io/vega/docs/event-streams/#types).\n",
        "args": [],
        "cases": [
          [
            "Click",
            []
          ],
          [
            "DblClick",
            []
          ],
          [
            "DragEnter",
            []
          ],
          [
            "DragLeave",
            []
          ],
          [
            "DragOver",
            []
          ],
          [
            "KeyDown",
            []
          ],
          [
            "KeyPress",
            []
          ],
          [
            "KeyUp",
            []
          ],
          [
            "MouseDown",
            []
          ],
          [
            "MouseMove",
            []
          ],
          [
            "MouseOut",
            []
          ],
          [
            "MouseOver",
            []
          ],
          [
            "MouseUp",
            []
          ],
          [
            "MouseWheel",
            []
          ],
          [
            "TouchEnd",
            []
          ],
          [
            "TouchMove",
            []
          ],
          [
            "TouchStart",
            []
          ],
          [
            "Wheel",
            []
          ],
          [
            "Timer",
            []
          ]
        ]
      },
      {
        "name": "Expr",
        "comment": " A Vega [Expr](https://vega.github.io/vega/docs/types/#Expr) that can be either\na field lookup or a full expression that is evaluated once per datum. Generated\nby [exField](#exField) and [expr](#expr).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Facet",
        "comment": " Defines a facet directive. Generated by [faAggregate](#faAggregate),\n[faField](#faField) and [faGroupBy](#faGroupBy). For details see the\n[Vega facet documentation](https://vega.github.io/vega/docs/marks/#facet).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Feature",
        "comment": " Represents a GeoJSON feature or feature collection for use with projections.\nGenerated by [featureSignal](#featureSignal) and [feName](#feName).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Field",
        "comment": " Represents a data stream field. This can be referenced with its name (`field`)\nor a signal, group or parent to reference a field. Generated by [fExpr](#fExpr),\n[fDatum](#fDatum), [fGroup](#fGroup), [field](#field), [fParent](#fParent) and\n[fSignal](#fSignal). For details see the\n[Vega field value documentation](https://vega.github.io/vega/docs/types/#FieldValue).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Force",
        "comment": " Describes a type of force that may be added to a simulation in a force transform.\nGenerated by [foCollide](#foCollide), [foLink](#foLink), [foNBody](#foNBody),\n[foX](#foX) and [foY](#foY). For details see the\n[Vega force documentation](https://vega.github.io/vega/docs/transforms/force/#center)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ForceProperty",
        "comment": " Optional properties of a force. These properties describe how individual forces\nwithin a simulation are to behave.\nGenerated by [fpDistance](#fpDistance), [fpDistanceMax](#fpDistanceMax),\n[fpDistanceMin](#fpDistanceMin), [fpId](#fpId), [fpIterations](#fpIterations),\n[fpStrength](#fpStrength) and [fpTheta](#fpTheta). For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ForceSimulationProperty",
        "comment": " Optional properties of a force simulation transform. These properties describe\nhow a simulation generated by the transform should behave. Generated by [fsAlpha](#fsAlpha),\n[fsAlphaMin](#fsAlphaMin), [fsAlphaTarget](#fsAlphaTarget), [fsAs](#fsAs),\n[fsForces](#fsForces), [fsIterations](#fsIterations), [fsRestart](#fsRestart),\n[fsStatic](#fsStatic) and [fsVelocityDecay](#fsVelocityDecay). For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "FormatProperty",
        "comment": " Specifies the type of format a data source uses. `ParseAuto` can be used for\nperforming automatic type inference on data types. If more explicit control is needed\nthen `parse` can be used to specify the type for named fields. For details see the\n[Vega data format documentation](https://vega.github.io/vega/docs/data/#format).\n",
        "args": [],
        "cases": [
          [
            "JSON",
            []
          ],
          [
            "CSV",
            []
          ],
          [
            "TSV",
            []
          ],
          [
            "ParseAuto",
            []
          ]
        ]
      },
      {
        "name": "GeoJsonProperty",
        "comment": " Properties of a geoJson transform. Generated by [gjFields](#gjFields),\n[gjFeature](#gjFeature) and [gjSignal](#gjSignal). For details see the\n[Vega geojson transform documentation](https://vega.github.io/vega/docs/transforms/geojson/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "GeoPathProperty",
        "comment": " Optional properties of a geoShape or geoPath transform. Generated by\n[gpField](#gpField), [gpAs](#gpAs) and [gpPointRadius](#gpPointRadius).\nFor details see the\n[Vega geopath transform documentation](https://vega.github.io/vega/docs/transforms/geopath/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "GraticuleProperty",
        "comment": " Optional properties of a graticule transform. Generated by\n[grField](#grField), [grExtent](#grExtent), [grExtentMajor](#grExtentMajor),\n[grExtentMinor](#grExtentMinor), [grStep](#grStep), [grStepMajor](#grStepMajor),\n[grStepMinor](#grStepMinor) and [grPrecision](#grPrecision). For details see the\n[Vega graticule transform documentation](https://vega.github.io/vega/docs/transforms/graticule/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "GridAlign",
        "comment": " Specify a type of layout alignment to apply to grid rows and columns. `AlignNone`\nindicates a flow layout will be used, in which adjacent plots are simply placed\none after the other. `AlignEach` indicates elements will be aligned into a clean\ngrid structure, but each row or column may be of variable size. `AlignAll` indicates\nelements will be aligned and each row or column will be sized identically based\non the maximum observed size. To used different row and column layouts, use `grAlignRow`\nand `grAlignColumn`. For details, see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/).\n",
        "args": [],
        "cases": [
          [
            "AlignAll",
            []
          ],
          [
            "AlignEach",
            []
          ],
          [
            "AlignNone",
            []
          ]
        ]
      },
      {
        "name": "HAlign",
        "comment": " Indicates the horizontal alignment of some text such as on an axis or legend.\n",
        "args": [],
        "cases": [
          [
            "AlignCenter",
            []
          ],
          [
            "AlignLeft",
            []
          ],
          [
            "AlignRight",
            []
          ]
        ]
      },
      {
        "name": "ImputeMethod",
        "comment": " The imputation method to be used when assigning values to missing data values.\n`ByValue` allows a specific value to be assigned for missing values while the other\nmethods will calculate a value based on a group of existing values. For details see the\n[Vega impute transform documentation](https://vega.github.io/vega/docs/transforms/impute/).\n",
        "args": [],
        "cases": [
          [
            "ByValue",
            []
          ],
          [
            "ByMean",
            []
          ],
          [
            "ByMedian",
            []
          ],
          [
            "ByMax",
            []
          ],
          [
            "ByMin",
            []
          ]
        ]
      },
      {
        "name": "ImputeProperty",
        "comment": " Optional properties of an impute transform. Generated by\n<imKeyVals>, [imMethod](#imMethod), [imGroupBy](#imGroupBy) and\n[imValue](#imValue). For details see the\n[Vega impute transform documentation](https://vega.github.io/vega/docs/transforms/impute/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "InputProperty",
        "comment": " GUI Input properties. The type of relevant property will depend on the type of\ninput element selected. Generated by [inDebounce](#inDebounce), [inElement](#inElement),\n[inOptions](#inOptions), [inMin](#inMin), [inMax](#inMax), [inStep](#inStep),\n[inPlaceholder](#inPlaceholder) and [inAutocomplete](#inAutocomplete). For details see\nthe [Vega bind signal documentation](https://vega.github.io/vega/docs/signals/#bind).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "JoinAggregateProperty",
        "comment": " Join aggregation properties for use with a join aggregate transform. Generated\nby [jaGroupBy](#jaGroupBy), [jaFields](#jaFields), [jaOps](#jaOps) and [jaAs](#jaAs).\nFor details see the\n[Vega join aggregation transform documentation](https://vega.github.io/vega/docs/transforms/joinaggregate/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "LayoutProperty",
        "comment": " Describes the layout of a collection of group marks within a grid. Generated by\n[loAlign](#loAlign), [loBounds](#loBounds), [loColumns](#loColumns), [loPadding](#loPadding),\n[loPaddingRC](#loPaddingRC), [loOffset](#loOffset), [loOffsetRC](#loOffsetRC),\n[loHeaderBand](#loHeaderBand), [loHeaderBandRC](#loHeaderBandRC), [loFooterBand](#loFooterBand),\n[loFooterBandRC](#loFooterBandRC), [loTitleBand](#loTitleBand) and\n[loTitleBandRC](#loTitleBandRC). For details, see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "LegendEncoding",
        "comment": " Type of custom legend encoding. Generated by [enLegend](#enLegend), [enTitle](#enTitle),\n[enLabels](#enLabels), [enSymbols](#enSymbols) and [enGradient](#enGradient).\nFor details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/#custom)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "LegendOrientation",
        "comment": " Indicates the position of a legend relative to the visualization it describes.\nFor details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/#orientation)\n",
        "args": [],
        "cases": [
          [
            "Left",
            []
          ],
          [
            "TopLeft",
            []
          ],
          [
            "Top",
            []
          ],
          [
            "TopRight",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "BottomRight",
            []
          ],
          [
            "Bottom",
            []
          ],
          [
            "BottomLeft",
            []
          ],
          [
            "None",
            []
          ]
        ]
      },
      {
        "name": "LegendProperty",
        "comment": " Indicates the characteristics of alegend such as its orientation and scaling\nto represent. Generated by [leType](#leType), [leDirection](#leDirection), [leOrient](#leOrient),\n[leFill](#leFill), [leOpacity](#leOpacity), [leShape](#leShape), [leSize](#leSize),\n[leStroke](#leStroke), [leStrokeDash](#leStrokeDash), [leEncode](#leEncode),\n[leFormat](#leFormat), [leGridAlign](#leGridAlign), [leClipHeight](#leClipHeight),\n[leColumns](#leColumns), [leColumnPadding](#leColumnPadding), [leRowPadding](#leRowPadding),\n[leCornerRadius](#leCornerRadius), [leFillColor](#leFillColor), [leOffset](#leOffset),\n[lePadding](#lePadding), [leStrokeColor](#leStrokeColor), [leStrokeWidth](#leStrokeWidth),\n[leGradientLength](#leGradientLength), [leGradientDirection](#leGradientDirection),\n[leGradientLabelLimit](#leGradientLabelLimit),[leGradientLabelOffset](#leGraidentLabelOffset)\n[leGradientThickness](#leGradientThickness), [leGradientStrokeColor](#leGradientStrokeColor),\n[leGradientStrokeWidth](#leGradientStrokeWidth), [leLabelAlign](#leLabelAlign),\n[leLabelBaseline](#leLabelBaseline), [leLabelColor](#leLabelColor), [leLabelFont](#leLabelFont),\n[leLabelFontSize](#leLabelFontSize), [leLabelFontWeight](#leLabelFontWeight),\n[leLabelLimit](#leLabelLimit), [leLabelOffset](#leLabelOffset), [leLabelOverlap](#leLabelOverlap),\n[leSymbolFillColor](#leSymbolFillColor), [leSymbolOffset](#leSymbolOffset),\n[leSymbolSize](#leSymbolSize), [leSymbolStrokeColor](#leSymbolStrokeColor),\n[leSymbolStrokeWidth](#leSymbolStrokeWidth), [leSymbolType](#leSymbolType),\n[leTickCount](#leTickCount), [leTemporalTickCount](#leTemporalTickCount),\n[leTitle](#leTitle), [leTitleAlign](#leTitleAlign), [leTitleBaseline](#leTitleBaseline),\n[leTitleColor](#leTitleColor), [leTitleFont](#leTitleFont), [leTitleFontSize](#leTitleFontSize),\n[leTitleFontWeight](#leTitleFontWeight), [leTitleLimit](#leTitleLimit),\n[leTitlePadding](#leTitlePadding), [leValues](#leValues) and [leZIndex](#leZIndex).\nFor more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "LegendType",
        "comment": " Type of legend. `LSymbol` representing legends with discrete items and `LGradient`\nfor those representing continuous data.\n",
        "args": [],
        "cases": [
          [
            "LSymbol",
            []
          ],
          [
            "LGradient",
            []
          ]
        ]
      },
      {
        "name": "LinkPathProperty",
        "comment": " Optional properties of a linkPath transform. Generated by [lpSourceY](#lpSourceY),\n[lpTargetX](#lpTargetX), [lpTargetY](#lpTargetY), [lpOrient](#lpOrient),\n[lpShape](#lpShape) and [lpAs](#lpAs). For details see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "LinkShape",
        "comment": " Shape of a line indicating path between nodes. For details see the `shape` parameter\nin the [Vega link path documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "args": [],
        "cases": [
          [
            "LinkLine",
            []
          ],
          [
            "LinkArc",
            []
          ],
          [
            "LinkCurve",
            []
          ],
          [
            "LinkDiagonal",
            []
          ],
          [
            "LinkOrthogonal",
            []
          ]
        ]
      },
      {
        "name": "LookupProperty",
        "comment": " Lookup references used in a lookup transform. Generated by [luValues](#luValues),\n[luAs](#luAs) and [luDefault](#luDefault). For details see the\n[Vega lookup transform documentation](https://vega.github.io/vega/docs/transforms/lookup/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Mark",
        "comment": " Type of visual mark used to represent data in the visualization. For further\ndetails see the\n[Vega mark type documentation](https://vega.github.io/vega/docs/marks/#types).\n",
        "args": [],
        "cases": [
          [
            "Arc",
            []
          ],
          [
            "Area",
            []
          ],
          [
            "Image",
            []
          ],
          [
            "Group",
            []
          ],
          [
            "Line",
            []
          ],
          [
            "Path",
            []
          ],
          [
            "Rect",
            []
          ],
          [
            "Rule",
            []
          ],
          [
            "Shape",
            []
          ],
          [
            "Symbol",
            []
          ],
          [
            "Text",
            []
          ],
          [
            "Trail",
            []
          ]
        ]
      },
      {
        "name": "MarkInterpolation",
        "comment": " Indicates mark interpolation style.\n",
        "args": [],
        "cases": [
          [
            "Basis",
            []
          ],
          [
            "Bundle",
            []
          ],
          [
            "Cardinal",
            []
          ],
          [
            "CatmullRom",
            []
          ],
          [
            "Linear",
            []
          ],
          [
            "Monotone",
            []
          ],
          [
            "Natural",
            []
          ],
          [
            "Stepwise",
            []
          ],
          [
            "StepAfter",
            []
          ],
          [
            "StepBefore",
            []
          ]
        ]
      },
      {
        "name": "MarkProperty",
        "comment": " Indicates an individual property of a mark when encoding. Generated by [maX](#maX),\n[maX2](#maX2), [maXC](#maXC), [maWidth](#maWidth), [maY](#maY), [maY2](#maY2), [maYC](#maYC),\n[maHeight](#maHeight), [maOpacity](#maOpacity), [maFill](#maFill), [maFillOpacity](#maFillOpacity),\n[maStroke](#maStroke), [maStrokeOpacity](#maStrokeOpacity), [maStrokeWidth](#maStrokeWidth),\n[maStrokeCap](#maStrokeCap), [maStrokeDash](#maStrokeDash), [maStrokeDashOffset](#maStrokeDashOffset),\n[maStrokeJoin](#maStrokeJoin), [maStrokeMiterLimit](#maStrokeMiterLimit), [maCursor](#maCursor),\n[maHRef](#maHRef), [maTooltip](#maTooltip), [maZIndex](#maZIndex), [maAlign](#maAlign),\n[maBaseline](#maBaseline), [maCornerRadius](#maCornerRadius), [maInterpolate](#maInterpolate),\n[maTension](#maTension), [maDefined](#maDefined), [maSize](#maSize), [maStartAngle](#maStartAngle),\n[maEndAngle](#maEndAngle), [maPadAngle](#maPadAngle), [maInnerRadius](#maInnerRadius),\n[maOuterRadius](#maOuterRadius), [maOrient](#maOrient), [maGroupClip](#maGroupClip),\n[maUrl](#maUrl), [maAspect](#maAspect), [maPath](#maPath), [maShape](#maShape),\n[maSymbol](#maSymbol), [maAngle](#maAngle), [maDir](#maDir), [maDx](#maDx), [maDy](#maDy),\n[maEllipsis](#maEllipsis), [maFont](#maFont), [maFontSize](#maFontSize),\n[maFontWeight](#maFontWeight), [maFontStyle](#maFontStyle), [maLimit](#maLimit),\n[maRadius](#maRadius), [maText](#maText) and [maTheta](#maTheta).\n\nAdditionally, custom mark properties may be created, such `xfocus` and `yfocus`\nas used in this [Beeswarm plot](https://vega.github.io/vega/examples/beeswarm-plot/).\nThese can be created with [maCustom](#maCustom).\n\nFor further details see the\n[Vega mark encoding documentation](https://vega.github.io/vega/docs/marks/#encode).\n\nFor details of properties associated with specific mark types, see the Vega documentation\nfor [arcs](https://vega.github.io/vega/docs/marks/arc/),\n[areas](https://vega.github.io/vega/docs/marks/area/),\n[groups](https://vega.github.io/vega/docs/marks/group/),\n[images](https://vega.github.io/vega/docs/marks/image/),\n[lines](https://vega.github.io/vega/docs/marks/line/),\n[paths](https://vega.github.io/vega/docs/marks/path/),\n[rects](https://vega.github.io/vega/docs/marks/rect/),\n[rules](https://vega.github.io/vega/docs/marks/rule/),\n[shapes](https://vega.github.io/vega/docs/marks/shape/),\n[symbols](https://vega.github.io/vega/docs/marks/symbol/),\n[text](https://vega.github.io/vega/docs/marks/text/) and\n[trails](https://vega.github.io/vega/docs/marks/trail/).\n\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Num",
        "comment": " Represents number-related values. Generated by [num](#num), [nums](#nums),\n[numSignal](#numSignal), [numSignals](#numSignals), [numList](#numList),\n[numExpr](#numExpr) and [numNull](#numNull)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Operation",
        "comment": " Type of aggregation operation. See the\n[Vega aggregate documentation](https://vega.github.io/vega/docs/transforms/aggregate/#ops)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "ArgMax",
            []
          ],
          [
            "ArgMin",
            []
          ],
          [
            "Average",
            []
          ],
          [
            "CI0",
            []
          ],
          [
            "CI1",
            []
          ],
          [
            "Count",
            []
          ],
          [
            "Distinct",
            []
          ],
          [
            "Max",
            []
          ],
          [
            "Mean",
            []
          ],
          [
            "Median",
            []
          ],
          [
            "Min",
            []
          ],
          [
            "Missing",
            []
          ],
          [
            "Q1",
            []
          ],
          [
            "Q3",
            []
          ],
          [
            "Stderr",
            []
          ],
          [
            "Stdev",
            []
          ],
          [
            "Stdevp",
            []
          ],
          [
            "Sum",
            []
          ],
          [
            "Valid",
            []
          ],
          [
            "Variance",
            []
          ],
          [
            "Variancep",
            []
          ]
        ]
      },
      {
        "name": "Order",
        "comment": " Indicate an ordering, usually when sorting.\n",
        "args": [],
        "cases": [
          [
            "Ascend",
            []
          ],
          [
            "Descend",
            []
          ]
        ]
      },
      {
        "name": "Orientation",
        "comment": " Indicates desired orientation of a mark, legend or link path (e.g. horizontally or vertically\noriented bars). Note that not all can use `Radial` orientation.\n",
        "args": [],
        "cases": [
          [
            "Horizontal",
            []
          ],
          [
            "Vertical",
            []
          ],
          [
            "Radial",
            []
          ]
        ]
      },
      {
        "name": "OverlapStrategy",
        "comment": " Type of overlap strategy to be applied when there is not space to show all\nitems on an axis. See the\n[Vega axes documentation](https://vega.github.io/vega/docs/axes)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "ONone",
            []
          ],
          [
            "OParity",
            []
          ],
          [
            "OGreedy",
            []
          ]
        ]
      },
      {
        "name": "PackProperty",
        "comment": " Properties of the packing transformation. Generated by [paField](#paField),\n[paSort](#paSort), [paSize](#paSize), [paRadius](#paRadius), [paPadding](#paPadding)\nand [paAs](#paAs). For details see the\n[Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "PartitionProperty",
        "comment": " Characteristic of a partition transform that will compute an adjacency diagram.\nGenerated by [ptField](#ptField), [ptSort](#ptSort), [ptPadding](#ptPadding),\n[ptRound](#ptRound), [ptSize](#ptSize) and [ptAs](#ptAs). For details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "PieProperty",
        "comment": " Properties of the pie chart transformation. Generated by [piField](#piField),\n[piStartAngle](#piStartAngle), [piEndAngle](#piEndAngle), [piSort](#piSort) and\n[piAs](#piAs). For details see the\n[Vega pie transform documentation](https://vega.github.io/vega/docs/transforms/pie/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "PivotProperty",
        "comment": " Properties of the pivot chart transformation. Generated by [piGroupBy](#piGroupBy),\n[piLimit](#piLimit) and [piOp](#piOp). For details see the\n[Vega pivot transform documentation](https://vega.github.io/vega/docs/transforms/pivot/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Projection",
        "comment": " Represents a global map projection type. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections).\n",
        "args": [],
        "cases": [
          [
            "Albers",
            []
          ],
          [
            "AlbersUsa",
            []
          ],
          [
            "AzimuthalEqualArea",
            []
          ],
          [
            "AzimuthalEquidistant",
            []
          ],
          [
            "ConicConformal",
            []
          ],
          [
            "ConicEqualArea",
            []
          ],
          [
            "ConicEquidistant",
            []
          ],
          [
            "Equirectangular",
            []
          ],
          [
            "Gnomonic",
            []
          ],
          [
            "Mercator",
            []
          ],
          [
            "NaturalEarth1",
            []
          ],
          [
            "Orthographic",
            []
          ],
          [
            "Stereographic",
            []
          ],
          [
            "TransverseMercator",
            []
          ]
        ]
      },
      {
        "name": "ProjectionProperty",
        "comment": " Optional properties of a global map projection specification. Generated by\n[prType](#prType), [prClipAngle](#prClipAngle), [prClipExtent](#prClipExtent),\n[prScale](#prScale), [prTranslate](#prTranslate), [prCenter](#prCenter), [prRotate](#prRotate),\n[prPointRadius](#prPointRadius), [prPrecision](#prPrecision), [prFit](#prFit),\n[prExtent](#prExtent), [prSize](#prSize), [prCoefficient](#prCoefficient),\n[prDistance](#prDistance), [prFraction](#prFraction), [prLobes](#prLobes),\n[prParallel](#prParallel), [prRadius](#prRadius), [prRatio](#prRatio), [prSpacing](#prSpacing),\nand [prTilt](#prTilt). For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Scale",
        "comment": " Used to indicate the type of scale transformation to apply. See the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#types) for more details.\n",
        "args": [],
        "cases": [
          [
            "ScLinear",
            []
          ],
          [
            "ScPow",
            []
          ],
          [
            "ScSqrt",
            []
          ],
          [
            "ScLog",
            []
          ],
          [
            "ScTime",
            []
          ],
          [
            "ScUtc",
            []
          ],
          [
            "ScSequential",
            []
          ],
          [
            "ScOrdinal",
            []
          ],
          [
            "ScBand",
            []
          ],
          [
            "ScPoint",
            []
          ],
          [
            "ScQuantile",
            []
          ],
          [
            "ScQuantize",
            []
          ],
          [
            "ScBinLinear",
            []
          ],
          [
            "ScBinOrdinal",
            []
          ]
        ]
      },
      {
        "name": "ScaleDomain",
        "comment": " Describes the scale domain (type of data in scale). Generated by [doNums](#doNums),\n[doStrs](#doStrs) and [doData](#doData). For full details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#domain).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ScaleNice",
        "comment": " Describes the way a scale can be rounded to 'nice' numbers. For full details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/).\n",
        "args": [],
        "cases": [
          [
            "NMillisecond",
            []
          ],
          [
            "NSecond",
            []
          ],
          [
            "NMinute",
            []
          ],
          [
            "NHour",
            []
          ],
          [
            "NDay",
            []
          ],
          [
            "NWeek",
            []
          ],
          [
            "NMonth",
            []
          ],
          [
            "NYear",
            []
          ],
          [
            "NTrue",
            []
          ],
          [
            "NFalse",
            []
          ]
        ]
      },
      {
        "name": "ScaleProperty",
        "comment": " Individual scale property. Scale properties are related, but not identical,\nto Vega-Lite's `ScaleProperty` which in Vega are more comprehensive and flexible.\nScale Properties characterise the fundamental data-to-visual transformations applied\nby the `scale` function. Generated by [scType](#scType), [scDomain](#scDomain),\n[scDomainMax](#scDomainMax), [scDomainMin](#scDomainMin), [scDomainMid](#scDomainMid),\n[scDomainRaw](#scDomainRaw), [scRange](#scRange), [scReverse](#scReverse),\n[scRound](#scRound), [scClamp](#scClamp), [scInterpolate](#scInterpolate),\n[scPadding](#scPadding), [scNice](#scNice), [scZero](#scZero), [scExponent](#scExponent),\n[scBase](#scBase), [scAlign](#scAlign), [scDomainImplicit](#scDomainImplicit),\n[scPaddingInner](#scPaddingInner), [scPaddingOuter](#scPaddingOuter) and\n[scRangeStep](#scRangeStep). For more details\nsee the [Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "ScaleRange",
        "comment": " Describes a scale range of scale output values. In addition to the preset default\noptions (`RaWidth`, `RaHeight` etc.), scale ranges can be generated by [raNums](#raNums),\n[raStrs](#raStrs), [raValues](#raValues), [raSignal](#raSignal), [raScheme](#raScheme),\n[raData](#raData), [raStep](#raStep) and [raCustomDefault](#raCustomDefault). For full details\nsee the [Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "args": [],
        "cases": [
          [
            "RaWidth",
            []
          ],
          [
            "RaHeight",
            []
          ],
          [
            "RaSymbol",
            []
          ],
          [
            "RaCategory",
            []
          ],
          [
            "RaDiverging",
            []
          ],
          [
            "RaOrdinal",
            []
          ],
          [
            "RaRamp",
            []
          ],
          [
            "RaHeatmap",
            []
          ]
        ]
      },
      {
        "name": "Side",
        "comment": " Indicates a rectangular side. Can be used to specify an axis position.\nSee the\n[Vega axes documentation](https://vega.github.io/vega/docs/axes/#orientation)\nfor more details.\n",
        "args": [],
        "cases": [
          [
            "SLeft",
            []
          ],
          [
            "SRight",
            []
          ],
          [
            "STop",
            []
          ],
          [
            "SBottom",
            []
          ]
        ]
      },
      {
        "name": "SignalProperty",
        "comment": " Individual signal property. Generated by [siName](#siName), [siBind](#siBind),\n[siDescription](#siDescription), [siOn](#siOn), [siUpdate](#siUpdate),\n[siReact](#siReact), [siValue](#siValue) and [siPushOuter](#siPushOuter). For\ndetails see the [Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "SortProperty",
        "comment": " Allow type of sorting to be customised. For details see the\n[Vega sort documentation](https://vega.github.io/vega/docs/scales/#sort).\n",
        "args": [],
        "cases": [
          [
            "Ascending",
            []
          ],
          [
            "Descending",
            []
          ]
        ]
      },
      {
        "name": "Source",
        "comment": " The data source for a set of marks. Generated by [srData](#srData) and\n[srFacet](#srFacet). For details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#from).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Spiral",
        "comment": " Specify a spiraling type. Used for the sequential positioning of words in a wordcloud.\n",
        "args": [],
        "cases": [
          [
            "Archimedean",
            []
          ],
          [
            "Rectangular",
            []
          ]
        ]
      },
      {
        "name": "StackOffset",
        "comment": " Indicates the type of offsetting to apply when stacking. `OfZero` uses a baseline\nat the foot of a stack, `OfCenter` uses a central baseline with stacking both above\nand below it. `OfNormalize` rescales the stack to a common height while preserving\nthe relative size of stacked quantities. For details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack)\n",
        "args": [],
        "cases": [
          [
            "OfZero",
            []
          ],
          [
            "OfCenter",
            []
          ],
          [
            "OfNormalize",
            []
          ]
        ]
      },
      {
        "name": "StackProperty",
        "comment": " Properties of the stacking transformation. Generated by [stField](#stField),\n[stGroupBy](#stGroupBy), [stSort](#stSort), [stOffset](#stOffset) and\n[stAs](#stAs). For details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Str",
        "comment": " Represents string-related values. Generated by [str](#str), [strs](#strs),\n[strList](#strList), [strSignal](#strSignal), [strSignals](#strSignals),\n[strExpr](#strExpr) and [strNull](#strNull).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "StrokeCap",
        "comment": " Type of stroke cap.\n",
        "args": [],
        "cases": [
          [
            "CButt",
            []
          ],
          [
            "CRound",
            []
          ],
          [
            "CSquare",
            []
          ]
        ]
      },
      {
        "name": "StrokeJoin",
        "comment": " Type of stroke join.\n",
        "args": [],
        "cases": [
          [
            "JMiter",
            []
          ],
          [
            "JRound",
            []
          ],
          [
            "JBevel",
            []
          ]
        ]
      },
      {
        "name": "Symbol",
        "comment": " Identifies a type of symbol.\n",
        "args": [],
        "cases": [
          [
            "SymCircle",
            []
          ],
          [
            "SymSquare",
            []
          ],
          [
            "SymCross",
            []
          ],
          [
            "SymDiamond",
            []
          ],
          [
            "SymTriangleUp",
            []
          ],
          [
            "SymTriangleDown",
            []
          ],
          [
            "SymTriangleLeft",
            []
          ],
          [
            "SymTriangleRight",
            []
          ]
        ]
      },
      {
        "name": "TextDirection",
        "comment": " Direction text is rendered. This determines which end of a text string is\ntruncated if it cannot be displayed within a restricted space.\n",
        "args": [],
        "cases": [
          [
            "LeftToRight",
            []
          ],
          [
            "RightToLeft",
            []
          ]
        ]
      },
      {
        "name": "TimeUnit",
        "comment": " Describes a unit of time. Useful for encoding and transformations. For\ndetails see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#quantitative).\n",
        "args": [],
        "cases": [
          [
            "Year",
            []
          ],
          [
            "Month",
            []
          ],
          [
            "Week",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Hour",
            []
          ],
          [
            "Minute",
            []
          ],
          [
            "Second",
            []
          ],
          [
            "Millisecond",
            []
          ]
        ]
      },
      {
        "name": "TitleFrame",
        "comment": " Indicates the wey a title anchor position is calculated. `FrBounds` implies\ntext anchor is relative to the full bounding box whereas `FrGroup` implies it is\nrelative to the group width/height.\n",
        "args": [],
        "cases": [
          [
            "FrBounds",
            []
          ],
          [
            "FrGroup",
            []
          ]
        ]
      },
      {
        "name": "TitleProperty",
        "comment": " A visualization's title properties. Generated by [tiOrient](#tiOrient),\n[tiAnchor](#tiAnchor), [tiAngle](#tiAngle), [tiBaseline](#tiBaseline), [tiColor](#tiColor),\n[tiEncode](#tiEncode), [tiFont](#tiFont), [tiFontSize](#tiFontSize),\n[tiFontWeight](#tiFontWeight), [tiFrame](#tiFrame), [tiInteractive](#tiInteractive),\n[tiLimit](#tiLimit), [tiName](#tiName), [tiStyle](#tiStyle), [tiOffset](#tiOffset) and\n[tiZIndex](#tiZIndex). For details, see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "TopMarkProperty",
        "comment": " Indicates the charactersitcs of a top-level mark. Generated by [mType](#mType),\n[mClip](#mClip), [mDescription](#mDescription), [mEncode](#mEncode), [mFrom](#mFrom),\n[mInteractive](#mInteractive), [mKey](#mKey), [mName](#mName), [mOn](#mOn),\n[mSort](#mSort), [mTransform](#mTransform), [mRole](#mRole), [mStyle](#mStyle),\n[mGroup](#mGroup) and [mZIndex](#mZIndex). For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Transform",
        "comment": " Defines a transformation that may be applied to a data stream or mark.\nGenerated by [trAggregate](#trAggregate), [trBin](#trBin), [trCollect](#trCollect),\n[trContour](#trContour), [trCountPattern](#trCountPattern), [trCross](#trCross),\n[trCrossFilter](#trCrossFilter), [trCrossFilterAsSignal](#trCrossFilterAsSignal),\n[trDensity](#trDensity), [trExtent](#trExtent), [trExtentAsSignal](#trExtentAsSignal),\n[trFilter](#trFilter), [trFlatten](#trFlatten), [trFlattenAs](#trFlattenAs),\n[trFold](#trFold), [trFoldAs](#trFoldAs), [trForce](#trForce), [trFormula](#trFormula),\n[trFormulaInitOnly](#trFormulaInitOnly), [trGeoJson](#trGeoJson), [trGeoPath](#trGeoPath),\n[trGeoPoint](#trGeoPoint), [trGeoPointAs](#trGeoPointAs), [trGeoShape](#trGeoShape),\n[trGraticule](#trGraticule), [trIdentifier](#trIdentifier), [trImpute](#trImpute),\n[trJoinAggregate](#trJoinAggregate), [trLinkPath](#trLinkPath), [trLookup](#trLookup),\n[trNest](#trNest), [trPack](#trPack), [trPartition](#trPartition), [trPie](#trPie),\n[trPivot](#trPivot), [trProject](#trProject), [trResolveFilter](#trResolveFilter),\n[trSample](#trSample), [trSequence](#trSequence), [trStack](#trStack),\n[trStratify](#trStratify), [trTree](#trTree), [trTreeLinks](#trTreeLinks),\n[trTreemap](#trTreemap), [trVoronoi](#trVoronoi), [trWindow](#trWindow) and\n[trWordCloud](#trWordCloud).\n\nFor details see the\n[Vega transform documentation](https://vega.github.io/vega/docs/transforms).\n\n",
        "args": [],
        "cases": []
      },
      {
        "name": "TreeMethod",
        "comment": " Represents a tree layout method used in a tree transform.\n",
        "args": [],
        "cases": [
          [
            "Tidy",
            []
          ],
          [
            "Cluster",
            []
          ]
        ]
      },
      {
        "name": "TreeProperty",
        "comment": " Characteristic of a tree transform that will compute a node-link diagram layout.\nGenerated by [teField](#teField), [teSort](#teSort), [teMethod](#teMethod),\n[teSize](#teSize), [teNodeSize](#teNodeSize) and [teAs](#teAs). For details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "TreemapMethod",
        "comment": " Represents a treemap layout method used in a treemap transform.\n",
        "args": [],
        "cases": [
          [
            "Squarify",
            []
          ],
          [
            "Resquarify",
            []
          ],
          [
            "Binary",
            []
          ],
          [
            "Dice",
            []
          ],
          [
            "Slice",
            []
          ],
          [
            "SliceDice",
            []
          ]
        ]
      },
      {
        "name": "TreemapProperty",
        "comment": " Characteristic of a treemap transform that will compute a hierarchical treemap\nlayout. Generated by [tmField](#tmField), [tmSort](#tmSort), [tmMethod](#tmMethod),\n[tmPadding](#tmPadding), [tmPaddingInner](#tmPaddingInner), [tmPaddingOuter](#tmPaddingOuter),\n[tmPaddingTop](#tmPaddingTop), [tmPaddingRight](#tmPaddingRight), [tmPaddingBottom](#tmPaddingBottom),\n[tmPaddingLeft](#tmPaddingLeft), [tmRatio](#tmRatio), [tmRound](#tmRound), [tmSize](#tmSize)\nand [tmAs](#tmAs). For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "TriggerProperty",
        "comment": " Characteristic of a trigger that can cause a data stream or mark to update.\nGenerated by [tgInsert](#tgInsert), [tgRemove](#tgRemove), [tgRemoveAll](#tgRemoveAll),\n[tgToggle](#tgToggle) and [tgModifyValues](#tgModifyValues). For details see the\n[Vega trigger documentation](https://vega.github.io/vega/docs/triggers).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "VAlign",
        "comment": " Indicates the vertical alignment of some text or an image mark. Note that the\n`Alphabetic` type constructor applies only to text marks.\n",
        "args": [],
        "cases": [
          [
            "AlignTop",
            []
          ],
          [
            "AlignMiddle",
            []
          ],
          [
            "AlignBottom",
            []
          ],
          [
            "Alphabetic",
            []
          ]
        ]
      },
      {
        "name": "VProperty",
        "comment": " Top-level Vega specifications properties. These are generated by a series of\nfunctions that fall into the following categories:\n\n**Data properties** relate to the input data that are to be visualized. Generated\nby [`dataSource`](#dataSource) that can collect together a range of data tables\nsuch as those read from a URL or generated inline.\n\n**Signal properties** are used to specify _signals_ – dynamic variables that can\nrespond reactively to other signals or interactions. Signals are widely used in\nVega specifications to support dynamic update of most properties. Generated by the\nfunction [`signals`](#signals).\n\n**Scale properties** are used to map data values to visual channels such as position,\nsize, color etc. They represent a fundamental building block of a data visualization\nspecification. Generated by the function [`scales`](#scales).\n\n**Projection properties** are used to specify how geospatial data referenced with\nlongitude, latitude coordinates are projected onto a plane for visualization.\nGenerated by the function [`projections`](#projections).\n\n**Axis properties** are used to specify how spatial scale mappings are visualized,\nsuch as with tick marks, grid lines and labels. Generated by the function\n[`axes`](#axes).\n\n**Legend properties** are used to specify how visual scale mappings such as color,\nshape and size are visualized. Generated by the function [`legends`](#legends).\n\n**Title properties** are used to specify how visualization title should appear.\nGenerated by the function [`title`](#title).\n\n** Layout properties** are used to specify how a group of visual marks may be\norganised within a grid. This allows visualizations to be composed of collections\nof other visualizations, for example in a dashboard or collection of small multiples.\nGenerated by the function [`layout`](#layout).\n\n**Mark properties** specify how to visually encode data with graphical primitives\nsuch as points, lines, rectangles and other symbols. Top-level marks are generated\nby the function [`marks`](#marks).\n\n**Top-level group encodings** can be used to specify the appearance of the chart's\ndata rectangle. For example setting the background color if the plotting area.\nGenerated by the function [`encode`](#encode).\n\n**Config properties** specify default settings that will be applied to the specification.\nThis allows a consistent (and easily modifiable) set of styles to be applied to a\nvisualization. Generated by the function [`config`](#config).\n\n**Supplementary properties** provide a means to add metadata and some styling to\none or more visualizations. Generated by the functions [`width`](#width),\n[`height`](#height), [`padding`](#padding), [`paddings`](#paddings), [`autosize`](#autosize),\n[`background`](#background) and [`description`](#description).\n\nFor further details on these top-level properties, see the\n[Vega specification documentation](https://vega.github.io/vega/docs/specification/).\n\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Value",
        "comment": " Represents a value such as a number or reference to a value such as a field label\nor transformed value. Generated by [vStr](#vStr), [vStrs](#vStrs), [vNum](#vNum),\n[vNums](#vNums), [vTrue](#vTrue), [vFalse](#vFalse), [vBoos](#vBoos),\n[vObject](#vObject), [vKeyValue](#vKeyValue), [vValues](#vValues), [vSignal](#vSignal),\n[vColor](#vColor), [vField](#vField), [vScale](#vScale), [vScaleField](#vScaleField),\n[vBand](#vBand), [vExponent](#vExponent), [vMultiply](#vMultiply), [vOffset](#vOffset),\n[vRound](#vRound), [vNull](#vNull) and [ifElse](#ifElse). For details, see the\n[Vega value documentation](https://vega.github.io/vega/docs/types/#Value)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "VoronoiProperty",
        "comment": " Characteristic of a voronoi transformation.\nGenerated by [voExtent](#voExtent), [voSize](#voSize) and [voAs](#voAs).\nFor details see the\n[Vega voronoi transform documentation](https://vega.github.io/vega/docs/transforms/voronoi/).\n",
        "args": [],
        "cases": []
      },
      {
        "name": "WOperation",
        "comment": " Operations that may be applied during a window transformation. For details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/#ops).\n",
        "args": [],
        "cases": [
          [
            "RowNumber",
            []
          ],
          [
            "Rank",
            []
          ],
          [
            "DenseRank",
            []
          ],
          [
            "PercentRank",
            []
          ],
          [
            "CumeDist",
            []
          ],
          [
            "Ntile",
            []
          ],
          [
            "Lag",
            []
          ],
          [
            "Lead",
            []
          ],
          [
            "FirstValue",
            []
          ],
          [
            "LastValue",
            []
          ],
          [
            "NthValue",
            []
          ]
        ]
      },
      {
        "name": "WindowOperation",
        "comment": " Specify a window operation incliding the type of operation, a possible\noperation parameter, the field to apply it to and its output field name. Generated\nby [wnOperation](#wnOperation), [wnOperationOn](#wnOperationOn) and\n[wnAggOperation](#wnAggOperation). For details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "WindowProperty",
        "comment": " Properties of the window transformation. Generated by [wnSort](#wnSort),\n[wnGroupBy](#wnGroupBy), [wnFrame](#wnFrame) and [wnIgnorePeers](#wnIgnorePeers).\nFor details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n",
        "args": [],
        "cases": []
      },
      {
        "name": "WordcloudProperty",
        "comment": " Optional properties of a wordcloud transform. Generated by\n[wcFont](#wcFont), [wcFontStyle](#wcFontStyle), [wcFontWeight](#wcFontWeight),\n[wcFontSize](#wcFontSize), [wcFontSizeRange](#wcFontSizeRange), [wcPadding](#wcPadding),\n[wcRotate](#wcRotate), [wcText](#wcText), [wcSize](#wcSize), [wcSprial](#wcSpiral)\nand [wcAs](#wcAs). For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "agAs",
        "comment": " The output field names generated when performing an aggregation transformation.\nThe list of field names should align with the fields operations provided by `agFields`\nand `agOps`. If not provided, automatic names are generated by appending `_field`\nto the operation name. For details see the\n[Vega aggregate transform documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "List String -> Vega.AggregateProperty"
      },
      {
        "name": "agCross",
        "comment": " Indicates if the full cross-product of all `groupby` values should be included\nin the aggregate output when performing an aggregation transformation. For details\nsee the\n[Vega aggregate transform documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "Vega.Boo -> Vega.AggregateProperty"
      },
      {
        "name": "agDrop",
        "comment": " Indicates if empty (zero count) groups should be dropped when performing an\naggregation transformation. For details see the\n[Vega aggregate transform documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "Vega.Boo -> Vega.AggregateProperty"
      },
      {
        "name": "agFields",
        "comment": " The data fields for which to compute aggregate functions when performing an\naggregation transformation. The list of fields should align with the operations\nand field names provided by `agOps` and `agAs`. If no fields and operations are\nspecified, a count aggregation will be used by default. For details see the\n[Vega aggregate transform documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "List Vega.Field -> Vega.AggregateProperty"
      },
      {
        "name": "agGroupBy",
        "comment": " The data fields to group by when performing an aggregation transformation.\nIf not specified, a single group containing all data objects will be used when\naggregating. For details see the\n[Vega aggregate transform documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "List Vega.Field -> Vega.AggregateProperty"
      },
      {
        "name": "agKey",
        "comment": " Specify a field to act as a unique key when performing an [agGroupBy](#agGroupBy)\naggregation. This can speed up the aggregation but should only be used when there\nis redundancy in the list of groupBy fields (as there is when binning for example).\n\n    transform\n        [ trBin (field \"examScore\") (nums [ 0, 100 ]) []\n        , trAggregate\n            [ agKey (field \"bin0\")\n            , agGroupBy [ field \"bin0\", field \"bin1\" ]\n            , agOps [ Count ]\n            , agAs [ \"count\" ]\n            ]\n        ]\n\nSetting a group-by key is currently undocumented but for context see the\n[Vega aggregate transform documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n\n",
        "type": "Vega.Field -> Vega.AggregateProperty"
      },
      {
        "name": "agOps",
        "comment": " The aggregation operations to apply to the fields when performing an\naggregation transformation. The list of operations should align with the fields\noutput field names provided by `agFields` and `agAs`. For details see the\n[Vega aggregate transform documentation](https://vega.github.io/vega/docs/transforms/aggregate/)\n",
        "type": "List Vega.Operation -> Vega.AggregateProperty"
      },
      {
        "name": "anchorSignal",
        "comment": " Indicates an anchor position is to be determined by a named signal.\nThe signal should generate one of \"start\", \"middle\" or \"end\".\n",
        "type": "String -> Vega.Anchor"
      },
      {
        "name": "autosize",
        "comment": " Declare the way the view is sized. For details, see the\n[Vega autosize documentation](https://vega.github.io/vega/docs/specification/#autosize-types)\n\n    toVega\n        [ width 500, padding 5, autosize [ AFit, AResize ], ds, mk [] ]\n\n",
        "type": "List Vega.Autosize -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "autosizeSignal",
        "comment": " Indicates an auto-sizing rule is to be determined by a named signal. For details see the\n[Vega autosize documentation](https://vega.github.io/vega/docs/specification/#autosize-types)\n",
        "type": "String -> Vega.Autosize"
      },
      {
        "name": "axBandPosition",
        "comment": " Specify an interpolation fraction indicating where, for band scales, axis ticks\nshould be positioned. A value of 0 places ticks at the left edge of their bands.\nA value of 0.5 places ticks in the middle of their bands. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axDomain",
        "comment": " Indicates if the domain (the axis baseline) should be included as part of\nan axis. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Boo -> Vega.AxisProperty"
      },
      {
        "name": "axDomainColor",
        "comment": " Specify the color of an axis domain line. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axDomainOpacity",
        "comment": " Specify the opacity of an axis domain line. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axDomainWidth",
        "comment": " Specify the width in pixels of an axis domain line. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axEncode",
        "comment": " Mark encodings for custom axis styling. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/#custom).\n",
        "type": "List ( Vega.AxisElement, List Vega.EncodingProperty ) -> Vega.AxisProperty"
      },
      {
        "name": "axFormat",
        "comment": " The format specifier pattern for axis labels. For numerical values, must be\na legal [d3-format specifier](https://github.com/d3/d3-format#locale_format).\nFor date-time values, must be a legal\n[d3-time-format](https://github.com/d3/d3-time-format#locale_format) specifier.\nFor more details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axGrid",
        "comment": " Indicates if grid lines should be included as part of the axis. For details\nsee the [Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Boo -> Vega.AxisProperty"
      },
      {
        "name": "axGridColor",
        "comment": " Specify the color of an axis's grid lines. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axGridDash",
        "comment": " Specify the stroke dash of an axis's grid lines as a list of dash-gap lengths\nor `[]` for a solid line (default). For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "List Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axGridOpacity",
        "comment": " Specify the opacity of an axis's grid lines. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axGridScale",
        "comment": " Name of the scale to use for including grid lines. By default grid lines are\ndriven by the same scale as the ticks and labels. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "String -> Vega.AxisProperty"
      },
      {
        "name": "axGridWidth",
        "comment": " Specify the width of an axis's grid lines in pixel units. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelAlign",
        "comment": " Specify the horizontal alignment of axis tick labels. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.HAlign -> Vega.AxisProperty"
      },
      {
        "name": "axLabelAngle",
        "comment": " Specify the angle of text for an axis. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelBaseline",
        "comment": " Specify the vertical alignment of axis tick labels. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.VAlign -> Vega.AxisProperty"
      },
      {
        "name": "axLabelBound",
        "comment": " Specify how or if labels should be hidden if they exceed the axis range. If the\nparameter is `NumNull`, no check for label size is made. A number specifies\nthe permitted overflow in pixels that can be tolerated. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelColor",
        "comment": " Specify the color of an axis label. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axLabelFlush",
        "comment": " Specify how labels at the beginning or end of the axis should be aligned\nwith the scale range. The parameter represents a pixel distance threshold. Labels\nwith anchor coordinates within this threshold distance for an axis end-point will be\nflush-adjusted. If `NumNull`, no flush alignment will be applied. For details see\nthe [Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelFlushOffset",
        "comment": " Specify the number of pixels by which to offset flush-adjusted labels\n(default 0). For example, a value of 2 will push flush-adjusted labels 2 pixels\noutward from the centre of the axis. Offsets can help the labels better visually\ngroup with corresponding axis ticks. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelFont",
        "comment": " Specify the font name of an axis label. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axLabelFontSize",
        "comment": " Specify the font size of an axis label. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelFontWeight",
        "comment": " Specify the font weight of an axis label. This can be a number (e.g. `vNum 300`)\nor text (e.g. `vStr \"bold\"`). For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axLabelLimit",
        "comment": " Specify the maximum length in pixels of axis tick labels. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelOpacity",
        "comment": " Specify the opacity of an axis label. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabelOverlap",
        "comment": " Specify the strategy to use for resolving overlap of axis labels. For details\nsee the [Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.OverlapStrategy -> Vega.AxisProperty"
      },
      {
        "name": "axLabelPadding",
        "comment": " Specify the padding in pixels between labels and ticks. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axLabels",
        "comment": " Specify whether or not if labels should be included as part of an axis.\nFor details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Boo -> Vega.AxisProperty"
      },
      {
        "name": "axMaxExtent",
        "comment": " The maximum extent in pixels that axis ticks and labels should use. This\ndetermines a maximum offset value for axis titles. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axMinExtent",
        "comment": " The minimum extent in pixels that axis ticks and labels should use. This\ndetermines a minimum offset value for axis titles. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axOffset",
        "comment": " The orthogonal offset in pixels by which to displace the axis from its position\nalong the edge of the chart. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axPosition",
        "comment": " The anchor position of the axis in pixels. For x-axes with top or bottom\norientation, this sets the axis group x coordinate. For y-axes with left or right\norientation, this sets the axis group y coordinate. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axTemporalTickCount",
        "comment": " Specify the tick interval for a temporal axis. The first parameter is\nthe type of temporal interval to use and the second the number of steps of that\ninterval between ticks. For example to specify a tick is requested at 3 month\nintervals (e.g. January, April, July, October):\n\n    ax =\n        axes\n            << axis \"xScale\" SBottom [ axTemporalTickCount Month (num 3) ]\n\nIf the second parameter is not a positive value, the number of ticks will be\nauto-generated for the given interval type. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n\n",
        "type": "Vega.TimeUnit -> Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTickColor",
        "comment": " Specify the color of an axis's ticks. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axTickCount",
        "comment": " A desired number of ticks, for axes visualizing quantitative scales. The\nresulting number may be different so that values are “nice” (multiples of 2, 5, 10)\nand lie within the underlying scale’s range. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTickExtra",
        "comment": " Specify whether or not an extra axis tick should be added for the initial\nposition of an axis. This is useful for styling axes for band scales such that\nticks are placed on band boundaries rather in the middle of a band.\nFor details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Boo -> Vega.AxisProperty"
      },
      {
        "name": "axTickOffset",
        "comment": " Specify the offset in pixels of an axis's ticks, labels and gridlines. For\ndetails see the [Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTickOpacity",
        "comment": " Specify the opacity of an axis's ticks. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTickRound",
        "comment": " Specify whether or not pixel position values for an axis's ticks should be\nrounded to the nearest integer. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Boo -> Vega.AxisProperty"
      },
      {
        "name": "axTickSize",
        "comment": " Specify the size in pixels of axis ticks. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTickWidth",
        "comment": " Specify the width in pixels of an axis's ticks. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTicks",
        "comment": " Specify whether or not ticks should be included as part of an axis.\nFor details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Boo -> Vega.AxisProperty"
      },
      {
        "name": "axTitle",
        "comment": " A title for an axis. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axTitleAlign",
        "comment": " Specify the horizontal alignment of an axis's title. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.HAlign -> Vega.AxisProperty"
      },
      {
        "name": "axTitleAngle",
        "comment": " Specify the angle of an axis's title text. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTitleBaseline",
        "comment": " Specify the vertical alignment of an axis's title. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.VAlign -> Vega.AxisProperty"
      },
      {
        "name": "axTitleColor",
        "comment": " Specify the color of an axis's title. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axTitleFont",
        "comment": " Specify the font to be used for an axis's title. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Str -> Vega.AxisProperty"
      },
      {
        "name": "axTitleFontSize",
        "comment": " Specify the size of font in pixels for an axis's title. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTitleFontWeight",
        "comment": " Specify the font weight of an axis's title. This can be a number (e.g. `vNum 300`)\nor text (e.g. `vStr \"bold\"`). For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axTitleLimit",
        "comment": " Specify the maximum allowed length of an axis's title. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTitleOpacity",
        "comment": " Specify the opacity of an axis's title. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTitlePadding",
        "comment": " Specify an offset in pixels between an axis's labels and title. For details\nsee the [Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axTitleX",
        "comment": " Specify the X position of an axis title relative to the axis group, overriding\nthe standard layout. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axTitleY",
        "comment": " Specify the Y position of an axis title relative to the axis group, overriding\nthe standard layout. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axValues",
        "comment": " Explicitly set an axis tick and label values. For details\nsee the [Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Value -> Vega.AxisProperty"
      },
      {
        "name": "axZIndex",
        "comment": " The z-index indicating the layering of an axis group relative to other axis,\nmark and legend groups. The default value is 0 and axes and grid lines are drawn\nbehind any marks defined in the same specification level. Higher values (1) will\ncause axes and grid lines to be drawn on top of marks. For details\nsee the [Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n",
        "type": "Vega.Num -> Vega.AxisProperty"
      },
      {
        "name": "axes",
        "comment": " Create the axes used to visualize spatial scale mappings.\n\n    ax =\n        axes\n            << axis \"myXScale\" SBottom [ axTitle (str \"Population\") ]\n            << axis \"myYScale\" SLeft [ axTickCount (num 5) ]\n\nFor details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "axis",
        "comment": " Create a single axis used to visualize a spatial scale mapping. The first\nparameter is the name of the scale backing this axis, the second the position of\nthe axis relative to the data rectangle and the third a list of optional axis\nproperties. For example,\n\n    axes\n        << axis \"xScale\" SBottom [ axTitle \"Population\", axZIndex (num 1) ]\n\nFor details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n\n",
        "type": "String -> Vega.Side -> List Vega.AxisProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "background",
        "comment": " The fill background color of a visualization. This should be specified as a\n[color string](https://vega.github.io/vega/docs/types/#Color). For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "Vega.Str -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "bcSignal",
        "comment": " Indicates a bounds calculation type is to be determined by a named signal.\n",
        "type": "String -> Vega.BoundsCalculation"
      },
      {
        "name": "black",
        "comment": " Convenience function for specifying a black color setting for marks that can\nbe colored (e.g. with [maStroke](#maStroke))\n",
        "type": "Vega.Value"
      },
      {
        "name": "bnAnchor",
        "comment": " Specify the value in the binned domain at which to anchor the bins of a bin\ntransform, shifting the bin boundaries if necessary to ensure that a boundary aligns\nwith the anchor value. If not specified, the minimum bin extent value serves as\nthe anchor. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Num -> Vega.BinProperty"
      },
      {
        "name": "bnAs",
        "comment": " Specify the output fields to contain the extent of a binning transform\n(its start and end bin values). If not specified these can be retrieved as the `bin0`\nand `bin1` fields. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "String -> String -> Vega.BinProperty"
      },
      {
        "name": "bnBase",
        "comment": " Specify the number base to use for automatic bin determination in a bin transform.\nIf not specified, base 10 is assumed. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Num -> Vega.BinProperty"
      },
      {
        "name": "bnDivide",
        "comment": " Specify the allowable bin step sub-divisions when performing a binning transformation.\nThe parameter should evaluate to a list of numeric values. If not specified, the\ndefault of [5, 2] is used, which indicates that for base 10 numbers automatic bin\ndetermination can consider dividing bin step sizes by 5 and/or 2. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Num -> Vega.BinProperty"
      },
      {
        "name": "bnMaxBins",
        "comment": " Specify the maximum number of bins to create with a bin transform. For details see\nthe [Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Num -> Vega.BinProperty"
      },
      {
        "name": "bnMinStep",
        "comment": " Specify the minimum allowable bin step size between bins when performing a bin\ntransform. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Num -> Vega.BinProperty"
      },
      {
        "name": "bnNice",
        "comment": " Specify whether or not the bin boundaries in a binning transform will use human-friendly\nvalues such as multiples of ten. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Boo -> Vega.BinProperty"
      },
      {
        "name": "bnSignal",
        "comment": " Bind the specification of a binning transform (its start, step and stop properties)\nto a signal with the given name. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "String -> Vega.BinProperty"
      },
      {
        "name": "bnStep",
        "comment": " Specify the exact step size to use between bins in a bin transform. This overrides\nsome other options such as `bnMaxBins`. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Num -> Vega.BinProperty"
      },
      {
        "name": "bnSteps",
        "comment": " Specify a list of allowable step sizes between bins to choose from when performing\na bin transform. For details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/)\n",
        "type": "Vega.Num -> Vega.BinProperty"
      },
      {
        "name": "booExpr",
        "comment": " An expression that will be evaluated as a Boolean value.\n",
        "type": "Vega.Expr -> Vega.Boo"
      },
      {
        "name": "booSignal",
        "comment": " A signal that will provide a Boolean value.\n",
        "type": "String -> Vega.Boo"
      },
      {
        "name": "booSignals",
        "comment": " A list of signals that will provide Boolean values.\n",
        "type": "List String -> Vega.Boo"
      },
      {
        "name": "boos",
        "comment": " A list of Boolean literals used for functions that can accept Boolean literals\nor something that generates a list of Boolean values (e.g. a signal).\n",
        "type": "List Bool -> Vega.Boo"
      },
      {
        "name": "cHCL",
        "comment": " Define a color in HCL space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "cHSL",
        "comment": " Define a color in HSL space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "cLAB",
        "comment": " Define a color in CIELab space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "cRGB",
        "comment": " Define a color in RGB space. Each of the three triplet values can be a numeric\nliteral, a signal, or subject to some scale.\n",
        "type": "List Vega.Value -> List Vega.Value -> List Vega.Value -> Vega.ColorValue"
      },
      {
        "name": "cfAutosize",
        "comment": " Specify the default autosizing properties of view. For details, see the\n[Vega configuration documentation](https://vega.github.io/vega/docs/config/).\n",
        "type": "List Vega.Autosize -> Vega.ConfigProperty"
      },
      {
        "name": "cfAxis",
        "comment": " Specify the default properties of axes. For details, see the\n[Vega axis configuration documentation](https://vega.github.io/vega/docs/config/#axes).\n",
        "type": "Vega.AxisType -> List Vega.AxisProperty -> Vega.ConfigProperty"
      },
      {
        "name": "cfBackground",
        "comment": " Specify the default background of the view. For details, see the\n[Vega configuration documentation](https://vega.github.io/vega/docs/config/).\n",
        "type": "Vega.Str -> Vega.ConfigProperty"
      },
      {
        "name": "cfEvents",
        "comment": " Specify the default filtering of events. This can specified in the first parameter\nas either a 'whitelist' (`Allow`) or 'blacklist' (`Prevent`) comprised the event types\nto be considered in the second parameter. If that list is empty, all event types\nwill be placed in the black/white list. For details, see the\n[Vega configuration documentation](https://vega.github.io/vega/docs/config/).\n",
        "type": "Vega.EventFilter -> List Vega.EventType -> Vega.ConfigProperty"
      },
      {
        "name": "cfGroup",
        "comment": " Specify the default properties of the top-level group mark representing the\ndata rectangle of a chart. For details, see the\n[Vega configuration documentation](https://vega.github.io/vega/docs/config/).\n",
        "type": "List Vega.MarkProperty -> Vega.ConfigProperty"
      },
      {
        "name": "cfLegend",
        "comment": " Specify the default properties of legends. For details, see the\n[Vega legend configuration documentation](https://vega.github.io/vega/docs/config/#legends).\n",
        "type": "List Vega.LegendProperty -> Vega.ConfigProperty"
      },
      {
        "name": "cfMark",
        "comment": " Specify the default properties of a given mark type. For details, see the\n[Vega mark configuration documentation](https://vega.github.io/vega/docs/config/#mark).\n",
        "type": "Vega.Mark -> List Vega.MarkProperty -> Vega.ConfigProperty"
      },
      {
        "name": "cfMarks",
        "comment": " Specify the default properties of all marks. For details, see the\n[Vega mark configuration documentation](https://vega.github.io/vega/docs/config/#mark).\n",
        "type": "List Vega.MarkProperty -> Vega.ConfigProperty"
      },
      {
        "name": "cfScaleRange",
        "comment": " Specify the properties defining named range lists used as part of scale specification.\nThe first parameter is the named range label (e.g. `RaOrdinal`, `RaCategory`, `RaHeamap`\netc.). The second is the new range of values to be associated with the named range.\n\n    cf =\n        config [ cfScaleRange RaHeatmap (raScheme (str \"greenblue\") []) ]\n\nFor details, see the\n[Vega scale range configuration documentation](https://vega.github.io/vega/docs/config/#scale-range).\n\n",
        "type": "Vega.ScaleRange -> Vega.ScaleRange -> Vega.ConfigProperty"
      },
      {
        "name": "cfStyle",
        "comment": " Specify the properties of a named style. The first property is the name to\ngive the style, the second its mark properties. For details, see the\n[Vega style configuration documentation](https://vega.github.io/vega/docs/config/#style).\n",
        "type": "String -> List Vega.MarkProperty -> Vega.ConfigProperty"
      },
      {
        "name": "cfTitle",
        "comment": " Specify the default properties of a title. For details, see the\n[Vega title configuration documentation](https://vega.github.io/vega/docs/config/#title).\n",
        "type": "List Vega.TitleProperty -> Vega.ConfigProperty"
      },
      {
        "name": "clEnabled",
        "comment": " Specify whether or not clipping should be applied to a set of marks within a\ngroup mark. For details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#clip).\n",
        "type": "Vega.Boo -> Vega.Clip"
      },
      {
        "name": "clPath",
        "comment": " Specify an arbitrary clipping path to be applied to a set of marks within a\nregion. The path should be a valid\n[SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths).\nFor details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#clip).\n",
        "type": "Vega.Str -> Vega.Clip"
      },
      {
        "name": "clSphere",
        "comment": " Specify a cartographic projection with which to clip all marks to a projected\nsphere of the globe. This is useful in conjunction with map projections that\notherwise included projected content (such as graticule lines) outside the bounds\nof the globe. For details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#clip).\n",
        "type": "Vega.Str -> Vega.Clip"
      },
      {
        "name": "cnBandwidth",
        "comment": " Specify the kernel density estimation bandwidth used in a contour transformation.\nFor details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Num -> Vega.ContourProperty"
      },
      {
        "name": "cnCellSize",
        "comment": " Specify the size of cells used for density estimation in a contour transformation.\nFor details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Num -> Vega.ContourProperty"
      },
      {
        "name": "cnCount",
        "comment": " Specify the desired number of contours used in a contour transformation. This\nwill be ignored if `cnThresholds` setting explicit contour values are provided.\nFor details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Num -> Vega.ContourProperty"
      },
      {
        "name": "cnNice",
        "comment": " Specify whether or not contour threshold values should be automatically aligned\nto “nice”, human-friendly values when performing a contour transformation. If true,\nthe number of thresholds may deviate from that provided by `cnCount`. For details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Boo -> Vega.ContourProperty"
      },
      {
        "name": "cnSmooth",
        "comment": " Specify whether or not contour polygons should be smoothed in a contour transformation.\nThis will be ignored if kernel density estimation is used.\nFor details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Boo -> Vega.ContourProperty"
      },
      {
        "name": "cnThresholds",
        "comment": " Specify the explicit contour values to be generated by a contour transformation.\nFor details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Num -> Vega.ContourProperty"
      },
      {
        "name": "cnValues",
        "comment": " Specify a grid of values over which to compute contours. If not provided,\n[trContour](#trContour) will instead compute contours of the kernel density\nestimate of input data. For details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Num -> Vega.ContourProperty"
      },
      {
        "name": "cnX",
        "comment": " Specify the x-coordinate field used for density estimation in a contour\ntransformation. For details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Field -> Vega.ContourProperty"
      },
      {
        "name": "cnY",
        "comment": " Specify the y-coordinate field used for density estimation in a contour\ntransformation. For details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/)\n",
        "type": "Vega.Field -> Vega.ContourProperty"
      },
      {
        "name": "combineSpecs",
        "comment": " Combines a list of labelled specifications into a single specification that\nmay be passed to JavaScript for rendering. This is useful when you wish to create\na single page with multiple visualizations.\n\n    combineSpecs\n        [ ( \"vis1\", myFirstVis )\n        , ( \"vis2\", mySecondVis )\n        , ( \"vis3\", myOtherVis )\n        ]\n\n",
        "type": "List Vega.LabelledSpec -> Vega.Spec"
      },
      {
        "name": "config",
        "comment": " Create a collection of configuration settings. This allows default stylings\nto be defined for a collection of visualizations or visualization components.\nFor details, see the\n[Vega configuration documentation](https://vega.github.io/vega/docs/config/)\nfor details.\n\n    cf =\n        config\n            [ cfMark Text [ maFont [ vStr \"Roboto Condensed, sans-serif\" ] ]\n            , cfTitle\n                [ tiFont (str \"Roboto Condensed, sans-serif\")\n                , tiFontWeight (vNum 500)\n                , tiFontSize (num 17)\n                ]\n            , cfAxis AxAll\n                [ axLabelFont (str \"Roboto Condensed, sans-serif\")\n                , axLabelFontSize (num 12)\n                ]\n            ]\n\n",
        "type": "List Vega.ConfigProperty -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "cpAs",
        "comment": " Specify the names of the two output fields generated by a count pattern transformation.\nBy default they are named `text` and `count`. For details see the\n[Vega count pattern transform documentation](https://vega.github.io/vega/docs/transforms/countpattern/).\n",
        "type": "String -> String -> Vega.CountPatternProperty"
      },
      {
        "name": "cpCase",
        "comment": " Specify how text case transformation to apply before performing a count pattern\ntransformation. The default of `Mixedcase` will leave text untransformed. For details see the\n[Vega count pattern transform documentation](https://vega.github.io/vega/docs/transforms/countpattern/).\n",
        "type": "Vega.Case -> Vega.CountPatternProperty"
      },
      {
        "name": "cpPattern",
        "comment": " Specify a regular expression to define a match in a count pattern transformation.\nThe parameter should be a regular expression where any backslash symbols are escaped.\n\n    transform [ trCountPattern (field \"data\") [ cpPattern (str \"[\\\\w']{3,}\") ] ]\n\nFor details see the\n[Vega count pattern transform documentation](https://vega.github.io/vega/docs/transforms/countpattern/).\n\n",
        "type": "Vega.Str -> Vega.CountPatternProperty"
      },
      {
        "name": "cpStopwords",
        "comment": " Specify a regular expression to define the text to ignore when performing a\ncount pattern transformation. The parameter should be a regular expression where\nany backslash symbols are escaped.\n\n    transform\n        [ trCountPattern (field \"data\")\n            [ cpPattern (str \"[\\\\w']{3,}\")\n            , cpStopwords (str \"(a|the|she|it)\")\n            ]\n        ]\n\nFor details see the\n[Vega count pattern transform documentation](https://vega.github.io/vega/docs/transforms/countpattern/).\n\n",
        "type": "Vega.Str -> Vega.CountPatternProperty"
      },
      {
        "name": "crAs",
        "comment": " Specify the names of the two output fields of a cross-product transform. For\ndetails see the\n[Vega cross-product transform documentation](https://vega.github.io/vega/docs/transforms/cross/).\n",
        "type": "String -> String -> Vega.CrossProperty"
      },
      {
        "name": "crFilter",
        "comment": " Specify an optional filter for limiting the results of a cross-product transform.\nFor details see the\n[Vega cross-product transform documentation](https://vega.github.io/vega/docs/transforms/cross/).\n",
        "type": "Vega.Expr -> Vega.CrossProperty"
      },
      {
        "name": "csCount",
        "comment": " Specify the number of colors to use in a color scheme. This can be useful\nfor scale types such as quantize, which use the length of the scale range to\ndetermine the number of discrete bins for the scale domain. For details see the\n[Vega color scheme documentation](https://vega.github.io/vega/docs/schemes/).\n",
        "type": "Vega.Num -> Vega.ColorSchemeProperty"
      },
      {
        "name": "csExtent",
        "comment": " Specify the extent of the color range to use in sequential and diverging color\nschemes. The parameter should evaluate to a two-element list representing the min\nand max values of the extent. For example [0.2, 1] will rescale the color scheme\nsuch that color values in the range [0, 0.2] are excluded from the scheme.\nFor details see the\n[Vega color scheme documentation](https://vega.github.io/vega/docs/schemes/).\n",
        "type": "Vega.Num -> Vega.ColorSchemeProperty"
      },
      {
        "name": "csScheme",
        "comment": " Specify the name of a color scheme to use. For details see the\n[Vega color scheme documentation](https://vega.github.io/vega/docs/schemes/).\n",
        "type": "Vega.Str -> Vega.ColorSchemeProperty"
      },
      {
        "name": "cubeHelix",
        "comment": " Cube-helix color interpolation. The parameter is a gamma value to control the\nbrightness of the color trajectory.\n",
        "type": "Float -> Vega.CInterpolate"
      },
      {
        "name": "cubeHelixLong",
        "comment": " A long path cube-helix color interpolation. The parameter is a gamma value to control the\nbrightness of the color trajectory.\n",
        "type": "Float -> Vega.CInterpolate"
      },
      {
        "name": "cursorValue",
        "comment": " A convenience function for generating a text string representing a given cursor\ntype. This can be used instead of specifying a cursor type as a literal string\nto avoid problems of mistyping its name.\n\n    mark Symbol\n        [ mEncode\n            [ enEnter\n                [ maY [ vScale \"yScale\", vNum 0, vOffset (vNum 1) ]\n                , maShape [ symbolValue SymTriangleDown ]\n                , maSize [ vNum 400 ]\n                ]\n            , enUpdate\n                [ maX [ vScale \"xScale\", vSignal \"currentYear\" ] ]\n            , enHover\n                [ maCursor [ cursorValue CPointer ] ]\n            ]\n        ]\n\n",
        "type": "Vega.Cursor -> Vega.Value"
      },
      {
        "name": "daDataset",
        "comment": " Reference a dataset with the given name. For details see the\n[Vega data reference documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "String -> Vega.DataReference"
      },
      {
        "name": "daField",
        "comment": " Reference a data field with the given value. For details see the\n[Vega data reference documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "Vega.Field -> Vega.DataReference"
      },
      {
        "name": "daFields",
        "comment": " Reference a collection of data fields with the given values. For details see the\n[Vega data reference documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "List Vega.Field -> Vega.DataReference"
      },
      {
        "name": "daFormat",
        "comment": " Specify the data format when loading or generating a data set. For details see the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "List Vega.FormatProperty -> Vega.DataProperty"
      },
      {
        "name": "daOn",
        "comment": " Specify updates to insert, remove, and toggle data values, or clear the data in a data set\nwhen trigger conditions are met. For details see the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "List Vega.Trigger -> Vega.DataProperty"
      },
      {
        "name": "daReferences",
        "comment": " Reference a collection of nested data references.\n\n     scale \"myScale\"\n         [ scDomain\n             (doData\n                 [ daReferences\n                     [ [ daDataset \"counts\", daField (field \"count\") ]\n                     , [ daDataset \"nulls\", daField (field \"count\") ]\n                     ]\n                 ]\n             )\n         ]\n\nFor details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#dataref)\n\n",
        "type": "List (List Vega.DataReference) -> Vega.DataReference"
      },
      {
        "name": "daSignal",
        "comment": " Make a data reference with a signal. For details see the\n[Vega data reference documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "String -> Vega.DataReference"
      },
      {
        "name": "daSort",
        "comment": " Sort a data reference. For details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#dataref)\n",
        "type": "List Vega.SortProperty -> Vega.DataReference"
      },
      {
        "name": "daSource",
        "comment": " Specify a named data source when generating a data set. For details see the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "String -> Vega.DataProperty"
      },
      {
        "name": "daSources",
        "comment": " Specify a collection of named data sources when generating a data set. For details see the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "List String -> Vega.DataProperty"
      },
      {
        "name": "daUrl",
        "comment": " Specify the name of a data file to be loaded when generating a data set. For details see the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "String -> Vega.DataProperty"
      },
      {
        "name": "daValue",
        "comment": " Specify some inline data value(s) when generating a data set. For details see the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#properties)\n",
        "type": "Vega.Value -> Vega.DataProperty"
      },
      {
        "name": "daValues",
        "comment": " Create a data reference from a list of literals. Useful when combining with\ndata references from existing data streams. For example\n\n    scale \"myScale\"\n      [ scDomain\n          (doData\n              [ daReferences\n                  [ [ daValues (vNums [ 2, 4 ]) ]\n                  , [ daDataset \"myData\", daField (field \"myField\") ]\n                  ]\n              ]\n          )\n      ]\n\nFor details see the\n[Vega data reference documentation](https://vega.github.io/vega/docs/scales/#dataref)\n\n",
        "type": "Vega.Value -> Vega.DataReference"
      },
      {
        "name": "data",
        "comment": " Declare a named data set. Depending on the properties provided this may be\nfrom an external file, from a named data source or inline literal values. See the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#properties) for details.\n\n      dataSource\n          [ data \"pop\" [ daUrl \"data/population.json\" ]\n          , data \"popYear\" [ daSource \"pop\" ] |> transform [ trFilter (expr \"datum.year == year\") ]\n          ]\n\n",
        "type": "String -> List Vega.DataProperty -> Vega.DataTable"
      },
      {
        "name": "dataColumn",
        "comment": " Create a column of data. A column has a name and a list of values. The final\nparameter is the list of any other columns to which this is added.\n\n     myData =\n         dataFromColumns \"animals\" []\n             << dataColumn \"Animal\" (vStrs [ \"Fish\", \"Dog\", \"Cat\" ])\n             << dataColumn \"Age\" (vNums [ 28, 12, 6 ])\n\n",
        "type": "String -> Vega.Value -> List Vega.DataColumn -> List Vega.DataColumn"
      },
      {
        "name": "dataFromColumns",
        "comment": " Declare a data table from a provided list of column values. Each column contains\nvalues of the same type, but columns each with a different type are permitted.\nColumns should all contain the same number of items; if not the dataset will be\ntruncated to the length of the shortest column. The first parameter should be the\nname given to the data table for later reference. An optional list for field\nformatting instructions can be provided in the second parameter or an empty list\nto use the default formatting. See the\n[Vega data documentation](https://vega.github.io/vega/docs/data/#format)\nfor details.\nThe columns themselves are most easily generated with `dataColumn`\n\n    myData =\n        dataFromColumns \"animals\" [ parse [ ( \"Year\", foDate \"%Y\" ) ] ]\n            << dataColumn \"Animal\" (vStrs [ \"Fish\", \"Dog\", \"Cat\" ])\n            << dataColumn \"Age\" (vNums [ 28, 12, 6 ])\n            << dataColumn \"Year\" (vStrs [ \"2010\", \"2014\", \"2015\" ])\n\n",
        "type": "String -> List Vega.FormatProperty -> List Vega.DataColumn -> Vega.DataTable"
      },
      {
        "name": "dataFromRows",
        "comment": " Declare a data source from a provided list of row values. Each row contains\na list of tuples where the first value is a string representing the column name, and the\nsecond the column value for that row. Each column can have a value of a different type\nbut you must ensure that when subsequent rows are added, they match the types of previous\nvalues with shared column names. An optional list for field formatting instructions can\nbe provided in the first parameter or an empty list to use the default formatting. See the\n[Vega-Lite documentation](https://vega.github.io/vega-lite/docs/data.html#format)\nfor details.\nThe rows themselves are most easily generated with `dataRow`. Note though that generally\nif you are creating data inline (as opposed to reading from a file), adding data by column\nin more efficient and less error-prone.\n\n    myData =\n        dataFromRows \"animals\" [ parse [ ( \"Year\", foDate \"%Y\" ) ] ]\n            << dataRow [ ( \"Animal\", vStr \"Fish\" ), ( \"Age\", vNum 28 ), ( \"Year\", vStr \"2010\" ) ]\n            << dataRow [ ( \"Animal\", vStr \"Dog\" ), ( \"Age\", vNum 12 ), ( \"Year\", vStr \"2014\" ) ]\n            << dataRow [ ( \"Animal\", vStr \"Cat\" ), ( \"Age\", vNum 6 ), ( \"Year\", vStr \"2015\" ) ]\n\n",
        "type": "String -> List Vega.FormatProperty -> List Vega.DataRow -> Vega.DataTable"
      },
      {
        "name": "dataRow",
        "comment": " Create a row of data. A row comprises a list of (columnName,value) pairs.\nThe final parameter is the list of any other rows to which this is added.\n\n    myData =\n        dataFromRows \"animals\" []\n            << dataRow [ ( \"Animal\", vStr \"Fish\" ), ( \"Age\", vNum 28 ) ]\n            << dataRow [ ( \"Animal\", vStr \"Dog\" ), ( \"Age\", vNum 12 ) ]\n\n",
        "type": "List ( String, Vega.Value ) -> List Vega.DataRow -> List Vega.DataRow"
      },
      {
        "name": "dataSource",
        "comment": " Specify a data source to be used in the visualization. A data source is a collection\nof data tables which themselves may be generated inline, loaded from a URL or the\nresult of a transformation. For details see the\n[Vega data documentation](https://vega.github.io/vega/docs/data).\n\n      dataSource\n          [ data \"pop\" [ daUrl \"data/population.json\" ]\n          , data \"popYear\" [ daSource \"pop\" ] |> transform [ trFilter (expr \"datum.year == year\") ]\n          , data \"males\" [ daSource \"popYear\" ] |> transform [ trFilter (expr \"datum.sex == 1\") ]\n          , data \"females\" [ daSource \"popYear\" ] |> transform [ trFilter (expr \"datum.sex == 2\") ]\n          , data \"ageGroups\" [ daSource \"pop\" ] |> transform [ trAggregate [ agGroupBy [ field \"age\" ] ] ]\n          ]\n\n",
        "type": "List Vega.DataTable -> Vega.Data"
      },
      {
        "name": "densityFunctionSignal",
        "comment": " Specifies a density function based on the value in the named signal. For details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "type": "String -> Vega.DensityFunction"
      },
      {
        "name": "diKde",
        "comment": " Specifies a kernel density estimate (smoothed probability distribution)\nfor a set of numerical values. The first parameter is the data set containing\nthe source data (or empty string if not to be specified explicitly), the second\nthe name of the field containing the numerical values and the third the bandwidth\nof the kernel. If the bandwidth is 0, it will be estimated from the input data.\nFor details see the\n[Vega distribution documentation](https://vega.github.io/vega/docs/transforms/density/#distributions).\n",
        "type": "String -> Vega.Field -> Vega.Num -> Vega.Distribution"
      },
      {
        "name": "diMixture",
        "comment": " Specifies a weighted mixture of probability distributions. The parameter should\nbe a list of tuples representing the component distributions and their corresponding\nweights. For details see the\n[Vega distribution documentation](https://vega.github.io/vega/docs/transforms/density/#distributions).\n",
        "type": "List ( Vega.Distribution, Vega.Num ) -> Vega.Distribution"
      },
      {
        "name": "diNormal",
        "comment": " Specifies a normal (Gaussian) probability distribution with a given mean (first\nparameter) and standard deviation (second parameter). For details see the\n[Vega distribution documentation](https://vega.github.io/vega/docs/transforms/density/#distributions).\n",
        "type": "Vega.Num -> Vega.Num -> Vega.Distribution"
      },
      {
        "name": "diUniform",
        "comment": " Specifies a uniform probability distribution with given minimum (first\nparameter) and maximum (second parameter) bounds. For details see the\n[Vega distribution documentation](https://vega.github.io/vega/docs/transforms/density/#distributions).\n",
        "type": "Vega.Num -> Vega.Num -> Vega.Distribution"
      },
      {
        "name": "dnAs",
        "comment": " Specify the output fields to contain a density transform's values (assigned\nto a field with a name given by the first parameter) and probabilities (field\nnamed in the second parameter). If not specified, the output will allocated to\nfields named `value` and `probability`. For details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "type": "String -> String -> Vega.DensityProperty"
      },
      {
        "name": "dnExtent",
        "comment": " Specify a [min, max] domain from which to sample a distribution as part of a\ndensity transform. The only distribution method that does not require an extent to\nbe defined is `diKde`. For details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "type": "Vega.Num -> Vega.DensityProperty"
      },
      {
        "name": "dnMethod",
        "comment": " Specify the type of distribution to generate for a density transform. For details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "type": "Vega.DensityFunction -> Vega.DensityProperty"
      },
      {
        "name": "dnSteps",
        "comment": " Specify the number of uniformly spaced steps to take along an extent domain\nduring a density transform. For details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "type": "Vega.Num -> Vega.DensityProperty"
      },
      {
        "name": "doData",
        "comment": " A [data reference object](https://vega.github.io/vega/docs/scales/#dataref)\nthat specifies field values in one or more data sets to define a scale domain.\nFor details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#domain)\n",
        "type": "List Vega.DataReference -> Vega.ScaleDomain"
      },
      {
        "name": "doNums",
        "comment": " A numeric list literal (`Nums`) representing a scale domain. For details see\nthe [Vega scale documentation](https://vega.github.io/vega/docs/scales/#domain)\n",
        "type": "Vega.Num -> Vega.ScaleDomain"
      },
      {
        "name": "doSignal",
        "comment": " A signal representing a scale domain. For details see\nthe [Vega scale documentation](https://vega.github.io/vega/docs/scales/#domain)\n",
        "type": "String -> Vega.ScaleDomain"
      },
      {
        "name": "doSignals",
        "comment": " A list of signals representing a scale domain. For details see\nthe [Vega scale documentation](https://vega.github.io/vega/docs/scales/#domain)\n",
        "type": "List String -> Vega.ScaleDomain"
      },
      {
        "name": "doStrs",
        "comment": " A string list literal (`Strs`) representing a scale domain. For details see\nthe [Vega scale documentation](https://vega.github.io/vega/docs/scales/#domain)\n",
        "type": "Vega.Str -> Vega.ScaleDomain"
      },
      {
        "name": "dsv",
        "comment": " Indicates a DSV (delimited separated value) format with a custom delimiter.\nTypically used when specifying a data URL.\n",
        "type": "String -> Vega.FormatProperty"
      },
      {
        "name": "enCustom",
        "comment": " The properties with a named custom encoding set. To invoke the custom set a\nsignal event handler with an `encode` directive should be defined. For further\ndetails see the\n[Vega mark encoding documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "String -> List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "enEnter",
        "comment": " The properties to be encoded when a mark item is first instantiated or a\nvisualization is resized. For further details see the\n[Vega mark encoding documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "enExit",
        "comment": " The properties to be encoded when the data backing a mark item is removed.\nFor further details see the\n[Vega mark encoding documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "enGradient",
        "comment": " Custom encoding for gradient (continuous) legends. For more details see the\n[Vega legend encoding documentation](https://vega.github.io/vega/docs/legends/#custom)\n",
        "type": "List Vega.EncodingProperty -> Vega.LegendEncoding"
      },
      {
        "name": "enHover",
        "comment": " The properties to be encoded when a pointer hovers over a mark item.\nFor further details see the\n[Vega mark encoding documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "enInteractive",
        "comment": " Specify whether or not a custom legend encoding set is to be interactive.\nFor further details see the\n[Vega custom legend encoding documentation](https://vega.github.io/vega/docs/legends/#custom).\n",
        "type": "Vega.Boo -> Vega.EncodingProperty"
      },
      {
        "name": "enLabels",
        "comment": " Custom encoding for legend labels. For more details see the\n[Vega legend encoding documentation](https://vega.github.io/vega/docs/legends/#custom)\n",
        "type": "List Vega.EncodingProperty -> Vega.LegendEncoding"
      },
      {
        "name": "enLegend",
        "comment": " Custom encoding for a legend group mark. For more details see the\n[Vega legend encoding documentation](https://vega.github.io/vega/docs/legends/#custom)\n",
        "type": "List Vega.EncodingProperty -> Vega.LegendEncoding"
      },
      {
        "name": "enName",
        "comment": " Specify a name for a custom legend encoding set.\nFor further details see the\n[Vega custom legend encoding documentation](https://vega.github.io/vega/docs/legends/#custom).\n",
        "type": "String -> Vega.EncodingProperty"
      },
      {
        "name": "enSymbols",
        "comment": " Custom encoding for symbol (discrete) legends. For more details see the\n[Vega legend encoding documentation](https://vega.github.io/vega/docs/legends/#custom)\n",
        "type": "List Vega.EncodingProperty -> Vega.LegendEncoding"
      },
      {
        "name": "enTitle",
        "comment": " Custom ecoding for a legend title. For more details see the\n[Vega legend encoding documentation](https://vega.github.io/vega/docs/legends/#custom)\n",
        "type": "List Vega.EncodingProperty -> Vega.LegendEncoding"
      },
      {
        "name": "enUpdate",
        "comment": " The properties to be encoded when a mark item is updated such as in response\nto a signal change. For further details see the\n[Vega mark encoding documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.MarkProperty -> Vega.EncodingProperty"
      },
      {
        "name": "encode",
        "comment": " Specify the encoding directives for the visual properties of the top-level\ngroup mark representing a chart’s data rectangle. For example, this can be used\nto set a background fill color for the plotting area, rather than the entire view.\n",
        "type": "List Vega.EncodingProperty -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "esBetween",
        "comment": " Specify an event stream filter that lets only events that occur between the\ntwo given event streams from being handled. This is useful, for example, for\ncapturing pointer dragging as it is a pointer movement event stream that occurs\nbetween `MouseDown` and `MouseUp` events.\n\n    << signal \"myDrag\"\n        [ siValue (vNums [ 200, 200 ])\n        , siOn\n            [ evHandler\n                [esObject\n                    [ esBetween [ esMark Rect, esType MouseDown ] [ esSource ESView, esType MouseUp ]\n                    , esSource ESView\n                    , esType MouseMove\n                    ]\n                ]\n                [ evUpdate \"xy()\" ]\n            ]\n        ]\n\nThe `esObject` specified above is equivalent to the more compact, but more error-prone\nevent stream selector:\n\n    esSelector (str \"[rect:mousedown, view:mouseup] > view:mousemove\")\n\nFor more details see the\n[Vega event stream object documentation](http://vega.github.io/vega/docs/event-streams/#object).\n\n",
        "type": "List Vega.EventStreamProperty -> List Vega.EventStreamProperty -> Vega.EventStreamProperty"
      },
      {
        "name": "esConsume",
        "comment": " Specify whether or not an event stream is consumed once it has been captured.\nIf false, the event is made available for subsequent event handling. For more\ndetails see the [Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#object).\n",
        "type": "Vega.Boo -> Vega.EventStreamProperty"
      },
      {
        "name": "esDebounce",
        "comment": " Specify the minimum time to wait between event occurrence and processing. If\na new event arrives during a debouncing window, the debounce timer will restart\nand only the new event will be captured. For more details see the\n[Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#object).\n",
        "type": "Vega.Num -> Vega.EventStreamProperty"
      },
      {
        "name": "esDom",
        "comment": " Specify a DOM node as the source for an event selector. This should be referenced\nwith a standard [CSS selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors).\nFor details see the\n[Vega event stream selector documentation](http://vega.github.io/vega/docs/event-streams/#selector).\n",
        "type": "String -> Vega.EventSource"
      },
      {
        "name": "esFilter",
        "comment": " Specify the filter expressions that must evaluate to `True` in order for an\nevent to be captured. If multiple filters are provided they must all be satisfied\n(`and` operator) for the event to be captured. For more details see the\n[Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#object).\n",
        "type": "List String -> Vega.EventStreamProperty"
      },
      {
        "name": "esMark",
        "comment": " Specify a mark type as the source for an event stream. For details see the\n[Vega event stream selector documentation](http://vega.github.io/vega/docs/event-streams/#selector).\n",
        "type": "Vega.Mark -> Vega.EventStreamProperty"
      },
      {
        "name": "esMarkName",
        "comment": " Specify a named mark as the source for an event stream. The name given here\nmust correspond to the name provided to a mark via `mName`. For details see the\n[Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#object).\n",
        "type": "String -> Vega.EventStreamProperty"
      },
      {
        "name": "esMerge",
        "comment": " Specify a single event stream merging the given list of event streams. See the\n[Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#object) for details.\n",
        "type": "List Vega.EventStream -> Vega.EventStream"
      },
      {
        "name": "esObject",
        "comment": " Represents an event stream for modelling user input. This function expects a\nstream object definition which provides a more self-explanatory and robust\nform of specification than using a selector string. For details see the\n[Vega event stream documentation](<http://vega.github.io/vega/docs/event-streams/#object>.\n",
        "type": "List Vega.EventStreamProperty -> Vega.EventStream"
      },
      {
        "name": "esSelector",
        "comment": " Specify an event stream for modelling user input. This function expects a\nshorthand event stream selector string, which is a more compact way of specifying\na stream than with `eventStream` but is more vulnerable to mistakes (as\nit is simply a string). For event stream selector details see the\n[Vega event stream selector documentation](http://vega.github.io/vega/docs/event-streams/#selector).\n",
        "type": "Vega.Str -> Vega.EventStream"
      },
      {
        "name": "esSignal",
        "comment": " Specify the name of a signal that triggers an event stream. This will allow\nan update to be triggered whenever the given signal changes. For more details, see the\n[Vega event stream signal documentation](https://vega.github.io/vega/docs/event-streams/#signal).\n",
        "type": "String -> Vega.EventStream"
      },
      {
        "name": "esSource",
        "comment": " Specify a source for an event selector. For details see the\n[Vega event stream selector documentation](http://vega.github.io/vega/docs/event-streams/#selector).\n",
        "type": "Vega.EventSource -> Vega.EventStreamProperty"
      },
      {
        "name": "esStream",
        "comment": " Specify an event stream that is to be used as input into a derived event stream.\nThis can be useful if several event streams have a common element, for example:\n\n    si =\n        let\n            esStart =\n                esMerge\n                    [ esObject [ esType MouseDown ]\n                    , esObject [ esType TouchStart ]\n                    ]\n\n            esEnd =\n                esObject [ esType TouchEnd ]\n        in\n        signals\n            << signal \"down\"\n                [ siValue vNull\n                , siOn\n                    [ evHandler [ esEnd ] [ evUpdate \"null\" ]\n                    , evHandler [ esStart ] [ evUpdate \"xy()\" ]\n                    ]\n                ]\n            << signal \"xCur\"\n                [ siValue vNull\n                , siOn\n                    [ evHandler [ esObject [ esStream esStart, esType TouchEnd ] ]\n                        [ evUpdate \"slice(xDom)\" ]\n                    ]\n                ]\n            << signal \"yCur\"\n                [ siValue vNull\n                , siOn\n                    [ evHandler [ esObject [ esStream esStart, esType TouchEnd ] ]\n                        [ evUpdate \"slice(yDom)\" ]\n                    ]\n                ]\n\nFor more details see the\n[Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#object).\n\n",
        "type": "Vega.EventStream -> Vega.EventStreamProperty"
      },
      {
        "name": "esThrottle",
        "comment": " Specify the minimum time in milliseconds between captured events (default 0).\nNew events that arrive within the throttling window will be ignored. For timer events,\nthis property determines the interval between timer ticks. For more details see the\n[Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#object).\n",
        "type": "Vega.Num -> Vega.EventStreamProperty"
      },
      {
        "name": "esType",
        "comment": " Specify an event stream type used when handling user interaction events. See the\n[Vega event stream documentation](http://vega.github.io/vega/docs/event-streams/#types) for details.\n",
        "type": "Vega.EventType -> Vega.EventStreamProperty"
      },
      {
        "name": "evEncode",
        "comment": " Name of a mark property encoding set to re-evaluate for the mark item that is\nthe source of an input event. This is required if `evUpdate` is not specified. For\ndetails see the [Vega event handler documentation](https://vega.github.io/vega/docs/signals/#handlers).\n",
        "type": "String -> Vega.EventHandler"
      },
      {
        "name": "evForce",
        "comment": " Indicates whether or not updates that do not change a signal value should propagate.\nFor example, if true and an input stream update sets the signal to its current value,\ndownstream signals will still be notified of an update. For details see the\n[Vega event handler documentation](https://vega.github.io/vega/docs/signals/#handlers).\n",
        "type": "Vega.Boo -> Vega.EventHandler"
      },
      {
        "name": "evHandler",
        "comment": " Specify an event event handler. The first parameter represents the stream(s) of\nevents to respond to. The second, a list of handlers that respond to the event stream.\nFor example,\n\n    signal \"tooltip\"\n        [ siValue (vObject [])\n        , siOn\n            [ evHandler [esObject [esMark Rect, esType MouseOver] ] [ evUpdate \"datum\" ]\n            , evHandler [esObject [esMark Rect, esType MouseOut] ] [ evUpdate \"\" ]\n            ]\n        ]\n\nFor details see the\n[Vega event stream documentation](https://vega.github.io/vega/docs/event-streams/).\n\n",
        "type": "List Vega.EventStream -> List Vega.EventHandler -> List Vega.EventHandler"
      },
      {
        "name": "evStreamSelector",
        "comment": " Specify an event selector used to generate an event stream. For details see the\n[Vega event stream selector documentation](https://vega.github.io/vega/docs/event-streams/#selector).\n",
        "type": "Vega.Str -> Vega.EventStream"
      },
      {
        "name": "evUpdate",
        "comment": " Expression to be evaluated when an event occurs, the result of which becomes\nthe new signal value. For details see the\n[Vega event handler documentation](https://vega.github.io/vega/docs/signals/#handlers).\n",
        "type": "String -> Vega.EventHandler"
      },
      {
        "name": "exField",
        "comment": " A field lookup that forms a Vega [Expr](https://vega.github.io/vega/docs/types/#Expr).\nIn contrast to an expression generated by `expr`, a field lookup is applied once\nto an entire field rather than evaluated once per datum.\n",
        "type": "String -> Vega.Expr"
      },
      {
        "name": "expr",
        "comment": " Represents an expression to enable custom calculations. This should be text\nin the Vega expression language. In contrast to field reference or signal,\nthe expression generated by `expr` is evaluated once per datum behaving like\nanonymous (or lambda) functions. For details see the\n[Vega expression documentation](https://vega.github.io/vega/docs/expressions).\n",
        "type": "String -> Vega.Expr"
      },
      {
        "name": "fDatum",
        "comment": " Perform a lookup on the current data object using the given field.\nOnce evaluated this is similar to simply providing a string value. For details\nsee the [Vega data type documentation](https://vega.github.io/vega/docs/types/#FieldValue)\n",
        "type": "Vega.Field -> Vega.Field"
      },
      {
        "name": "fExpr",
        "comment": " An expression that references a field but can perform calculations on each\ndatum in the field. For example\n\n    fExpr \"scale('xScale', datum.Horsepower)\"\n\n",
        "type": "String -> Vega.Field"
      },
      {
        "name": "fGroup",
        "comment": " Reference a property of the enclosing group mark instance as a field value. For\ndetails see the\n[Vega data type documentation](https://vega.github.io/vega/docs/types/#FieldValue)\n",
        "type": "Vega.Field -> Vega.Field"
      },
      {
        "name": "fParent",
        "comment": " Reference a field of the enclosing group mark’s data object as a field.\nFor details see the\n[Vega data type documentation](https://vega.github.io/vega/docs/types/#FieldValue)\n",
        "type": "Vega.Field -> Vega.Field"
      },
      {
        "name": "fSignal",
        "comment": " A signal to evaluate which should generate a field name to reference.\nFor details see the\n[Vega data type documentation](https://vega.github.io/vega/docs/types/#FieldValue)\n",
        "type": "String -> Vega.Field"
      },
      {
        "name": "faAggregate",
        "comment": " For data-driven facets, a list aggregate transform properties for the\naggregate data values generated for each facet group item.\n",
        "type": "List Vega.AggregateProperty -> Vega.Facet"
      },
      {
        "name": "faField",
        "comment": " For pre-faceted data, the name of the data field containing a list of data\nvalues to use as the local partition. This is required if using pre-faceted data.\n",
        "type": "Vega.Field -> Vega.Facet"
      },
      {
        "name": "faGroupBy",
        "comment": " For data-driven facets, specify a list of field names by which to partition\nthe data. This is required if using pre-faceted data.\n",
        "type": "List Vega.Field -> Vega.Facet"
      },
      {
        "name": "false",
        "comment": " A false value used for functions that can accept a Boolean literal or a\nreference to something that generates a Boolean value (e.g. a signal).\n",
        "type": "Vega.Boo"
      },
      {
        "name": "feName",
        "comment": " Specify the name of a geoJSON feature. Can be used with [prFit](#prFit) to\nfit a map projection scaling and centre to a given geoJSON feature or feature\ncollection.\n\n    pr =\n        projections\n            << projection \"myProjection\"\n                [ prType Orthographic\n                , prSize (numSignal \"[width,height]\")\n                , prFit (feName \"mapData\")\n                ]\n\n",
        "type": "String -> Vega.Feature"
      },
      {
        "name": "featureSignal",
        "comment": " Specify the signal that generates a geoJSON feature. Can be used with\n[prFit](#prFit) to fit a map projection scaling and centre to a given geoJSON\nfeature or feature collection.\n\n    ds =\n        dataSource\n            [ data \"myLongLatData\" []\n                |> transform\n                    [ trGeoJson\n                        [ gjFields (field \"longitude\") (field \"latitude\")\n                        , gjSignal \"feature\"\n                        ]\n                    ]\n            ]\n\n    pr =\n        projections\n            << projection \"myProjection\"\n                [ prType Orthographic\n                , prSize (numSignal \"[width,height]\")\n                , prFit (featureSignal \"feature\")\n                ]\n\n",
        "type": "String -> Vega.Feature"
      },
      {
        "name": "field",
        "comment": " The name of a field to reference. For details see the\n[Vega data type documentation](https://vega.github.io/vega/docs/types/#FieldValue)\n",
        "type": "String -> Vega.Field"
      },
      {
        "name": "foCenter",
        "comment": " Specify a force that pulls all nodes towards a shared centre point in a force\nsimulation. The two parameters specify the x and y coordinates of the centre point.\nFor details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#center)\n",
        "type": "Vega.Num -> Vega.Num -> Vega.Force"
      },
      {
        "name": "foCollide",
        "comment": " Specify a collision detection force that pushes apart nodes whose circular\nradii overlap in a force simulation. The first parameter specifies the radius of\nthe node to which it applies. The second parameter enables the strength and number\nof iterations to be specified. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#collide)\n",
        "type": "Vega.Num -> List Vega.ForceProperty -> Vega.Force"
      },
      {
        "name": "foDate",
        "comment": " Indicate a date format for parsing data. For details of how to specify a date, see\n[D3's formatting specifiers](https://github.com/d3/d3-time-format#locale_format). An empty\nstring will indicate default date formatting should be applied, but note that care should be\ntaken as different browsers may have different default date parsing. Being explicit about the\ndate format is usually safer.\n",
        "type": "String -> Vega.DataType"
      },
      {
        "name": "foLink",
        "comment": " Specify the link constraints that cause nodes to be pushed apart towards a target\nseparation distance. The first parameter is the name of the data set containing the\nlink objects, each of which should contain `source` and `target` fields indicating\nnode objects. The second parameter enables the id, distance, strength and number\nof iterations to be specified. If an id field parameter is provided, it is used\nto relate link objects and node objects. Otherwise, the source and target fields\nshould provide indices into the array of node objects. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#link)\n",
        "type": "Vega.Str -> List Vega.ForceProperty -> Vega.Force"
      },
      {
        "name": "foNBody",
        "comment": " Specify an n-body force that causes nodes to either attract or repel each other\nin a force simulation. The parameter enables the strength, theta value, and min/max\ndistances over which the force acts to be specified. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#nbody)\n",
        "type": "List Vega.ForceProperty -> Vega.Force"
      },
      {
        "name": "foUtc",
        "comment": " Indicate a utc date format for parsing data. For details of how to specify a date, see\n[D3's formatting specifiers](https://github.com/d3/d3-time-format#locale_format). An empty\nstring will indicate default date formatting should be applied, but note that care should be\ntaken as different browsers may have different default date parsing. Being explicit about the\ndate format is usually safer.\n",
        "type": "String -> Vega.DataType"
      },
      {
        "name": "foX",
        "comment": " Specify a force attraction towards a particular x-coordinate (first parameter),\nwith a given strength (second parameter) on a per-node basis. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#x)\n",
        "type": "Vega.Field -> List Vega.ForceProperty -> Vega.Force"
      },
      {
        "name": "foY",
        "comment": " Specify a force attraction towards a particular y-coordinate (first parameter),\nwith a given strength (second parameter) on a per-node basis. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#y)\n",
        "type": "Vega.Field -> List Vega.ForceProperty -> Vega.Force"
      },
      {
        "name": "fpDistance",
        "comment": " Specify the distance in pixels by which the link constraint should separate\nnodes (default 30). For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#link)\n",
        "type": "Vega.Num -> Vega.ForceProperty"
      },
      {
        "name": "fpDistanceMax",
        "comment": " Specify the maximum distance over which an n-body force acts. If two nodes\nexceed this value, they will not exert forces on each other. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#nbody)\n",
        "type": "Vega.Num -> Vega.ForceProperty"
      },
      {
        "name": "fpDistanceMin",
        "comment": " Specify the minimum distance over which an n-body force acts. If two nodes\nare closer than this value, the exerted forces will be as if they are distanceMin\napart (default 1). For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#nbody)\n",
        "type": "Vega.Num -> Vega.ForceProperty"
      },
      {
        "name": "fpId",
        "comment": " Specify an optional data field for a node’s unique identifier. If provided,\nthe source and target fields of each link should use these values to indicate\nnodes. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#link)\n",
        "type": "Vega.Field -> Vega.ForceProperty"
      },
      {
        "name": "fpIterations",
        "comment": " Specify the number of iterations to run collision detection or link constraints\n(default 1) in a force directed simulation. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#collide)\n",
        "type": "Vega.Num -> Vega.ForceProperty"
      },
      {
        "name": "fpStrength",
        "comment": " Specify the relative strength of a force or link constraint in a force\nsimulation. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#collide)\n",
        "type": "Vega.Num -> Vega.ForceProperty"
      },
      {
        "name": "fpTheta",
        "comment": " Specify the approximation parameter for aggregating more distance forces in\na force-directed simulation (default 0.9). For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/#nbody)\n",
        "type": "Vega.Num -> Vega.ForceProperty"
      },
      {
        "name": "fsAlpha",
        "comment": " Specify the energy level or “temperature” of a simulation under a force transform.\nAlpha values lie in the range [0, 1]. Internally, the simulation will decrease the\nalpha value over time, causing the magnitude of updates to diminish. For details\nsee the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "Vega.Num -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsAlphaMin",
        "comment": " Specify the minimum amount by which to lower the alpha value on each simulation\niteration under a force transform. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "Vega.Num -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsAlphaTarget",
        "comment": " Specify the target alpha value to which a simulation converges under a force\ntransformation. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "Vega.Num -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsAs",
        "comment": " Specify the names of the output fields to which node positions and velocities\nare written after a force transformation. The default is [\"x\", \"y\", \"vx\", \"vy\"]\ncorresponding to the order of parameter names to be provided. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "String -> String -> String -> String -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsForces",
        "comment": " Specify the forces to include in a force-directed simulation resulting from\na force transform. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "List Vega.Force -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsIterations",
        "comment": " Specify the number of iterations in a force transformation when in static\nmode (default 300). For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "Vega.Num -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsRestart",
        "comment": " Specify whether a simulation in a force transformation should restart when\nnode object fields are modified. For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "Vega.Boo -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsStatic",
        "comment": " Specify whether a simulation in a force transformation should be computed in\nbatch to produce a static layout (true) or should be animated (false). For details\nsee the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "Vega.Boo -> Vega.ForceSimulationProperty"
      },
      {
        "name": "fsVelocityDecay",
        "comment": " Specify the 'friction' to be applied to a simulation in a force transformation.\nThis is applied after the application of any forces during an iteration, each node’s\nvelocity is multiplied by 1 - velocityDecay (default 0.4). For details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/)\n",
        "type": "Vega.Num -> Vega.ForceSimulationProperty"
      },
      {
        "name": "gjFeature",
        "comment": " Specify the field containing the GeoJSON objects to be consolidated into a feature\ncollection by a geoJSON transform. For details see the\n[Vega geojson transform documentation](https://vega.github.io/vega/docs/transforms/geojson/).\n",
        "type": "Vega.Field -> Vega.GeoJsonProperty"
      },
      {
        "name": "gjFields",
        "comment": " Specify the fields containing longitude (first parameter) and latitude (second\nparameter) to be consolidated into a feature collection by a geoJSON transform.\nFor details see the\n[Vega geojson transform documentation](https://vega.github.io/vega/docs/transforms/geojson/).\n",
        "type": "Vega.Field -> Vega.Field -> Vega.GeoJsonProperty"
      },
      {
        "name": "gjSignal",
        "comment": " Specify the name of the a new signal to capture the output of generated by\na geoJSON transform. For details see the\n[Vega geojson transform documentation](https://vega.github.io/vega/docs/transforms/geojson/).\n",
        "type": "String -> Vega.GeoJsonProperty"
      },
      {
        "name": "gpAs",
        "comment": " Specify the output field in which to write a generated shape instance following\na geoShape or geoPath transformation. For details see the\n[Vega geopath transform documentation](https://vega.github.io/vega/docs/transforms/geopath/)\n",
        "type": "String -> Vega.GeoPathProperty"
      },
      {
        "name": "gpField",
        "comment": " Specify the data field containing GeoJSON data when applying a geoShape or\ngeoPath transformation. If unspecified, the full input data object will be used.\nFor details see the\n[Vega geopath transform documentation](https://vega.github.io/vega/docs/transforms/geopath/)\n",
        "type": "Vega.Field -> Vega.GeoPathProperty"
      },
      {
        "name": "gpPointRadius",
        "comment": " Specify the default radius (in pixels) to use when drawing GeoJSON Point and\nMultiPoint geometries following a geoShape or geoPath transformation. An expression\nvalue may be used to set the point radius as a function of properties of the input\nGeoJSON. For details see the\n[Vega geopath transform documentation](https://vega.github.io/vega/docs/transforms/geopath/)\n",
        "type": "Vega.Num -> Vega.GeoPathProperty"
      },
      {
        "name": "grAlignColumn",
        "comment": " Specify a type of layout alignment to apply to grid columns. This can be used in\ncases when alignment rules are different for rows and columns. For details, see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/).\n",
        "type": "Vega.GridAlign -> Vega.GridAlign"
      },
      {
        "name": "grAlignRow",
        "comment": " Specify a type of layout alignment to apply to grid rows. This can be used in\ncases when alignment rules are different for rows and columns. For details, see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/).\n",
        "type": "Vega.GridAlign -> Vega.GridAlign"
      },
      {
        "name": "grExtent",
        "comment": " Specify both the major and minor extents of a graticule to be the same values.\nShould be a two-element list representing longitude and latitude extents. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Num -> Vega.GraticuleProperty"
      },
      {
        "name": "grExtentMajor",
        "comment": " Specify the major extent of a graticule. Should be a two-element list representing\nlongitude and latitude extents. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Num -> Vega.GraticuleProperty"
      },
      {
        "name": "grExtentMinor",
        "comment": " Specify the minor extent of a graticule. Should be a two-element list representing\nlongitude and latitude extents. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Num -> Vega.GraticuleProperty"
      },
      {
        "name": "grField",
        "comment": " Specify the field used to bin when generating a graticule. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Field -> Vega.GraticuleProperty"
      },
      {
        "name": "grPrecision",
        "comment": " Specify the precision in degrees with which graticule arcs are generated. The\ndefault value is 2.5 degrees. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Num -> Vega.GraticuleProperty"
      },
      {
        "name": "grStep",
        "comment": " Specify both the major and minor step angles of a graticule to be the same values.\nShould be a two-element list representing longitude and latitude spacing. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Num -> Vega.GraticuleProperty"
      },
      {
        "name": "grStepMajor",
        "comment": " Specify the major step angles of a graticule. Should be a two-element list\nrepresenting longitude and latitude spacing. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Num -> Vega.GraticuleProperty"
      },
      {
        "name": "grStepMinor",
        "comment": " Specify the minor step angles of a graticule. Should be a two-element list\nrepresenting longitude and latitude spacing. For details see the\n[Vega graticule documentation](https://vega.github.io/vega/docs/transforms/graticule/)\n",
        "type": "Vega.Num -> Vega.GraticuleProperty"
      },
      {
        "name": "gridAlignSignal",
        "comment": " Specify a type of layout alignment based on the value of the given signal.\nFor details of available alignment option names, see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/).\n",
        "type": "String -> Vega.GridAlign"
      },
      {
        "name": "hAlignSignal",
        "comment": " Indicates the horizontal alignment of some text based on the value of the\ngiven signal.\n",
        "type": "String -> Vega.HAlign"
      },
      {
        "name": "hCenter",
        "comment": " Convenience function for indicating a central horizontal alignment.\n",
        "type": "Vega.Value"
      },
      {
        "name": "hLeft",
        "comment": " Convenience function for indicating a left horizontal alignment.\n",
        "type": "Vega.Value"
      },
      {
        "name": "hRight",
        "comment": " Convenience function for indicating a right horizontal alignment.\n",
        "type": "Vega.Value"
      },
      {
        "name": "hclLong",
        "comment": " A long-path hue-chroma-luminance color interpolation.\n",
        "type": "Vega.CInterpolate"
      },
      {
        "name": "height",
        "comment": " Override the default height of the visualization. If not specified the height\nwill be calculated based on the content of the visualization.\n",
        "type": "Float -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "hslLong",
        "comment": " A long-path hue-saturation-lightness color interpolation.\n",
        "type": "Vega.CInterpolate"
      },
      {
        "name": "iCheckbox",
        "comment": " A checkbox input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iColor",
        "comment": " A color selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iDate",
        "comment": " A date selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iDateTimeLocal",
        "comment": " A local data time selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iMonth",
        "comment": " A month selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iNumber",
        "comment": " A numeric input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iRadio",
        "comment": " A radio buttons input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iRange",
        "comment": " A slider input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iSelect",
        "comment": " A drop-down list input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iTel",
        "comment": " A telephone number input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iText",
        "comment": " A free text input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iTime",
        "comment": " A time selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "iWeek",
        "comment": " A week selector input element.\n",
        "type": "List Vega.InputProperty -> Vega.Bind"
      },
      {
        "name": "ifElse",
        "comment": " A conditional list of values depending on whether an expression (first parameter)\nevaluates as true. The second and third parameters represent the 'then' and 'else'\nbranches of the test.\n",
        "type": "String -> List Vega.Value -> List Vega.Value -> Vega.Value"
      },
      {
        "name": "imGroupBy",
        "comment": " Specify a list of fields by which to group values in an impute transform.\nImputation is then performed on a per-group basis, such as a within group mean\nrather than global mean. For details see the\n[Vega impute transform documentation](https://vega.github.io/vega/docs/transforms/impute/).\n",
        "type": "List Vega.Field -> Vega.ImputeProperty"
      },
      {
        "name": "imKeyVals",
        "comment": " Specify an additional collection of key values that should be considered for\nimputation as part of an impute transform. For details see the\n[Vega impute transform documentation](https://vega.github.io/vega/docs/transforms/impute/).\n",
        "type": "Vega.Value -> Vega.ImputeProperty"
      },
      {
        "name": "imMethod",
        "comment": " Specify the imputation method to be used as part of an impute transform. If\nnot specified the default `ByMean` method will be used. For details see the\n[Vega impute transform documentation](https://vega.github.io/vega/docs/transforms/impute/).\n",
        "type": "Vega.ImputeMethod -> Vega.ImputeProperty"
      },
      {
        "name": "imValue",
        "comment": " Specify the value to use when an imputation method is set to `ByValue` in an\nimpute transform. For details see the\n[Vega impute transform documentation](https://vega.github.io/vega/docs/transforms/impute/).\n",
        "type": "Vega.Value -> Vega.ImputeProperty"
      },
      {
        "name": "inAutocomplete",
        "comment": " Determines if autocomplete should be turned on or off for input elements that\nsupport it. For more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "Bool -> Vega.InputProperty"
      },
      {
        "name": "inDebounce",
        "comment": " Specify that event handling should be delayed until the specified milliseconds\nhave elapsed since the last event was fired. This helps to limit event broadcasting.\nFor more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "Float -> Vega.InputProperty"
      },
      {
        "name": "inElement",
        "comment": " A CSS selector string indicating the parent element to which the input element\nshould be added. This allows the option of the input element to be outside the\nvisualization container, which could be used for linking separate visualizations.\nFor more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "String -> Vega.InputProperty"
      },
      {
        "name": "inMax",
        "comment": " The maximum value for a range slider input element. For more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "Float -> Vega.InputProperty"
      },
      {
        "name": "inMin",
        "comment": " The minimum value for a range slider input element. For more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "Float -> Vega.InputProperty"
      },
      {
        "name": "inOptions",
        "comment": " A collection of options to be selected from by Radio or Select input elements.\nFor more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "Vega.Value -> Vega.InputProperty"
      },
      {
        "name": "inPlaceholder",
        "comment": " The place-holding text for input elements before any value has been entered\n(for example initial text in a text field). For more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "String -> Vega.InputProperty"
      },
      {
        "name": "inStep",
        "comment": " The step value (increment between adjacent selectable values) for a range\nslider input element. For more details see the\n[Vega signal binding documentation](https://vega.github.io/vega/docs/signals/#bind)\n",
        "type": "Float -> Vega.InputProperty"
      },
      {
        "name": "jaAs",
        "comment": " Specify a join aggregate transform.\nFor details see the\n[Vega join aggregation transform documentation](https://vega.github.io/vega/docs/transforms/joinaggregate/).\n",
        "type": "List String -> Vega.JoinAggregateProperty"
      },
      {
        "name": "jaFields",
        "comment": " Specify a join aggregate transform.\nFor details see the\n[Vega join aggregation transform documentation](https://vega.github.io/vega/docs/transforms/joinaggregate/).\n",
        "type": "List Vega.Field -> Vega.JoinAggregateProperty"
      },
      {
        "name": "jaGroupBy",
        "comment": " Specify a join aggregate transform.\nFor details see the\n[Vega join aggregation transform documentation](https://vega.github.io/vega/docs/transforms/joinaggregate/).\n",
        "type": "List Vega.Field -> Vega.JoinAggregateProperty"
      },
      {
        "name": "jaOps",
        "comment": " Specify a join aggregate transform.\nFor details see the\n[Vega join aggregation transform documentation](https://vega.github.io/vega/docs/transforms/joinaggregate/).\n",
        "type": "List Vega.Operation -> Vega.JoinAggregateProperty"
      },
      {
        "name": "jsonProperty",
        "comment": " Indicates a JSON file format from which a given property is to be extracted\nwhen it it has some surrounding structure or meta-data. For example, specifying\nthe property `values.features` is equivalent to retrieving `json.values.features`\nfrom the loaded JSON object with a custom delimiter. For details, see the\n[Vega data formatting documentation](https://vega.github.io/vega/docs/data/#format).\n",
        "type": "String -> Vega.FormatProperty"
      },
      {
        "name": "keyValue",
        "comment": " Represents a custom key-value pair to be stored in an object.\n",
        "type": "String -> Vega.Value -> Vega.Value"
      },
      {
        "name": "layout",
        "comment": " Create a layout used in the visualization. For example the following creates\na three-column layout with 20 pixel padding between columns:\n\n    lo =\n        layout [ loColumns (num 3), loPadding (num 20) ]\n\n",
        "type": "List Vega.LayoutProperty -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "leClipHeight",
        "comment": " Specify the height in pixels to clip a symbol legend entries and limit its size.\nBy default no clipping is performed. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leColumnPadding",
        "comment": " Specify the horizontal padding between entries in a symbol legend. For more\ndetails see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leColumns",
        "comment": " Specify the number of columns in which to arrange symbol legend entries. A\nvalue of 0 or lower indicates a single row with one column per entry. The default\nis 0 for horizontal symbol legends and 1 for vertical symbol legends. For more\ndetails see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leCornerRadius",
        "comment": " Specify the corner radius for an enclosing legend rectangle. For more details\nsee the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leDirection",
        "comment": " Specify the direction of a legend. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Orientation -> Vega.LegendProperty"
      },
      {
        "name": "leEncode",
        "comment": " Mark encodings for custom legend styling. For example, to create a horizontal\ndash symbol (using a simple SVG path) for each legend item:\n\n    legend\n        [ leEncode [ enSymbols [ enEnter [ maShape [ vStr \"M-0.5,0H1\" ] ] ] ]\n        , leStroke \"myColourScale\"\n        ]\n\nFor more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n\n",
        "type": "List Vega.LegendEncoding -> Vega.LegendProperty"
      },
      {
        "name": "leFill",
        "comment": " The name of the scale that maps to the legend symbols' fill colors. For more\ndetails see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "String -> Vega.LegendProperty"
      },
      {
        "name": "leFillColor",
        "comment": " Specify the background color of an enclosing legend rectangle. For more\ndetails see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leFormat",
        "comment": " The format specifier pattern for legend labels. For numerical values this should\nbe a [d3-format specifier](https://github.com/d3/d3-format#locale_format). For\ndate-time values this should be a\n[d3-time-format specifier](https://github.com/d3/d3-time-format#locale_format).\nFor more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leGradientDirection",
        "comment": " Specify the direction of a color gradient in a legend. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Orientation -> Vega.LegendProperty"
      },
      {
        "name": "leGradientLabelLimit",
        "comment": " Specify the maximum allowed length of gradient labels in a legend. For more\ndetails see the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leGradientLabelOffset",
        "comment": " Specify the vertical offset in pixels for gradient labels in a legend. For more\ndetails see the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leGradientLength",
        "comment": " Specify the length in pixels of the primary axis of a color gradient in a\nlegend. This value corresponds to the height of a vertical gradient or the width\nof a horizontal gradient. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leGradientStrokeColor",
        "comment": " Specify the color of a legend's color gradient border. For more\ndetails see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leGradientStrokeWidth",
        "comment": " Specify the width of a legend's color gradient border. For more\ndetails see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leGradientThickness",
        "comment": " Specify the thickness in pixels of the color gradient in a legend. This value\ncorresponds to the width of a vertical gradient or the height of a horizontal\ngradient. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leGridAlign",
        "comment": " Specify the alignment to apply to symbol legends rows and columns. For more\ndetails see the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.GridAlign -> Vega.LegendProperty"
      },
      {
        "name": "leLabelAlign",
        "comment": " Specify the horizontal text alignment for a legend label. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.HAlign -> Vega.LegendProperty"
      },
      {
        "name": "leLabelBaseline",
        "comment": " Specify the vertical text alignment for a legend label. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.VAlign -> Vega.LegendProperty"
      },
      {
        "name": "leLabelColor",
        "comment": " Specify the text color for legend labels. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leLabelFont",
        "comment": " Specify the text font for legend labels. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leLabelFontSize",
        "comment": " Specify the font size in pixels for legend labels. For more details see\nthe [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leLabelFontWeight",
        "comment": " Specify the font weight for legend labels. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Value -> Vega.LegendProperty"
      },
      {
        "name": "leLabelLimit",
        "comment": " Specify the maximum allowed length in pixels of a legend label. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leLabelOffset",
        "comment": " Specify the horizontal pixel offset for a legend's symbols. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leLabelOverlap",
        "comment": " Specify the strategy to use for resolving overlap of labels in gradient\nlegends. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.OverlapStrategy -> Vega.LegendProperty"
      },
      {
        "name": "leOffset",
        "comment": " The offset in pixels by which to displace the legend from the data rectangle\nand axes. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Value -> Vega.LegendProperty"
      },
      {
        "name": "leOpacity",
        "comment": " The name of the scale that maps to the legend symbols' opacities. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "String -> Vega.LegendProperty"
      },
      {
        "name": "leOrient",
        "comment": " The orientation of the legend, determining where the legend is placed\nrelative to a chart’s data rectangle. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.LegendOrientation -> Vega.LegendProperty"
      },
      {
        "name": "lePadding",
        "comment": " The padding between the border and content of the legend group. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Value -> Vega.LegendProperty"
      },
      {
        "name": "leRowPadding",
        "comment": " The vertical padding between entries in a symbol legend. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leShape",
        "comment": " The name of the scale that maps to the legend symbols' shapes. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "String -> Vega.LegendProperty"
      },
      {
        "name": "leSize",
        "comment": " The name of the scale that maps to the legend symbols' sizes. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "String -> Vega.LegendProperty"
      },
      {
        "name": "leStroke",
        "comment": " The name of the scale that maps to the legend symbols' strokes. For more\ndetails see the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "String -> Vega.LegendProperty"
      },
      {
        "name": "leStrokeColor",
        "comment": " Specify the border color of an enclosing legend rectangle. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leStrokeDash",
        "comment": " The name of the scale that maps to the legend symbols' stroke dashing. For more\ndetails see the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "String -> Vega.LegendProperty"
      },
      {
        "name": "leStrokeWidth",
        "comment": " Specify the stroke width of the color of a legend's gradient border. For more\ndetails see the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leSymbolFillColor",
        "comment": " Specify the fill color for legend symbols. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leSymbolOffset",
        "comment": " Specify the offset in pixels between legend labels their corresponding symbol\nor gradient. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leSymbolSize",
        "comment": " Specify the default symbol area size in square pixel units. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leSymbolStrokeColor",
        "comment": " Specify the border color for legend symbols. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leSymbolStrokeWidth",
        "comment": " Specify the default symbol border width used in a legend. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leSymbolType",
        "comment": " Specify the default symbol shape used in a legend. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Symbol -> Vega.LegendProperty"
      },
      {
        "name": "leTemporalTickCount",
        "comment": " Specify a desired number of ticks for a temporal legend. The first parameter\nis the type of temporal interval to use and the second the number of steps of that\ninterval between ticks. For example to specify a tick is requested at six-month\nintervals (e.g. January, July):\n\n    lg =\n        legends\n            << legend\n                [ leFill \"cScale\"\n                , leType LGradient\n                , leFormat (str \"%b %Y\")\n                , leTemporalTickCount Month (num 6)\n                ]\n\nIf the second parameter is not a positive value, the number of ticks will be\nauto-generated for the given interval type. For details see the\n[Vega axis documentation](https://vega.github.io/vega/docs/axes/).\n\n",
        "type": "Vega.TimeUnit -> Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leTickCount",
        "comment": " The desired number of tick values for quantitative legends. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leTitle",
        "comment": " Specify the title for the legend (none by default). For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leTitleAlign",
        "comment": " Specify the horizontal alignment for a legend title. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.HAlign -> Vega.LegendProperty"
      },
      {
        "name": "leTitleBaseline",
        "comment": " Specify the vertical alignment for a legend title. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.VAlign -> Vega.LegendProperty"
      },
      {
        "name": "leTitleColor",
        "comment": " Specify the text color for a legend title. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leTitleFont",
        "comment": " Specify the text font for a legend title. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Str -> Vega.LegendProperty"
      },
      {
        "name": "leTitleFontSize",
        "comment": " Specify the font size in pixel units for a legend title. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leTitleFontWeight",
        "comment": " Specify the font weight for a legend title. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Value -> Vega.LegendProperty"
      },
      {
        "name": "leTitleLimit",
        "comment": " Specify the maximum allowed length in pixels of a legend title. For more details\nsee the [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "leTitlePadding",
        "comment": " Specify the padding between the legend title and entries. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Value -> Vega.LegendProperty"
      },
      {
        "name": "leType",
        "comment": " The type of legend to specify. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.LegendType -> Vega.LegendProperty"
      },
      {
        "name": "leValues",
        "comment": " Explicitly set visible legend values. For more details see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "List Vega.Value -> Vega.LegendProperty"
      },
      {
        "name": "leZIndex",
        "comment": " The integer z-index indicating the layering of the legend group relative to\nother axis, mark and legend groups. The default value is 0.For more details see\nthe [Vega legend documentation](https://vega.github.io/vega/docs/legends/)\n",
        "type": "Vega.Num -> Vega.LegendProperty"
      },
      {
        "name": "legend",
        "comment": " Create a single legend used to visualize a color, size or shape mapping.\n\n    legends\n        << legend\n            [ leTitle (str \"Percentage of Obese Adults\")\n            , leOrient BottomRight\n            , leType LSymbol\n            , leSize \"mySizeScale\"\n            , leFill \"myColorScale\"\n            ]\n\n",
        "type": "List Vega.LegendProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "legendOrientationSignal",
        "comment": " Specify a signal that indicates the position of a legend relative to the\nvisualization it describes of options for the signal see the\n[Vega legend documentation](https://vega.github.io/vega/docs/legends/#orientation)\n",
        "type": "String -> Vega.LegendOrientation"
      },
      {
        "name": "legendTypeSignal",
        "comment": " Specify a type of legend is to be determined by the given signal. Valid values\ngenerated by the signal are `symbol` and `gradient`.\n",
        "type": "String -> Vega.LegendType"
      },
      {
        "name": "legends",
        "comment": " Create legends used to visualize color, size and shape mappings. Commonly the\nfunctional composition operator (`<<`) is used to combine multiple legend\nspecifications. For example,\n\n    lg =\n        legends\n            << legend\n                [ leTitle (str \"Income\")\n                , leOrient BottomRight\n                , leType LSymbol\n                , leSize \"mySizeScale\"\n                ]\n            << legend\n                [ leTitle (str \"Nationality\")\n                , leOrient TopRight\n                , leType LSymbol\n                , leFill \"myColorScale\"\n                ]\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "linkShapeSignal",
        "comment": " Specify the shape of a line indicating path between nodes using the given signal.\nFor shape options see the `shape` parameter in the\n[Vega link path documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "String -> Vega.LinkShape"
      },
      {
        "name": "loAlign",
        "comment": " Specify the alignment to apply to grid rows and columns in a grid layout.\nFor details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.GridAlign -> Vega.LayoutProperty"
      },
      {
        "name": "loBounds",
        "comment": " Specify the bounds calculation method to use for determining the extent of a\nsub-plot in a grid layout. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.BoundsCalculation -> Vega.LayoutProperty"
      },
      {
        "name": "loColumns",
        "comment": " Specify the number of columns to include in a grid layout. If unspecified, a\nsingle row with unlimited columns will be assumed. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loFooterBand",
        "comment": " Specify the band positioning in the interval [0,1] indicating where in a cell\na footer should be placed in a grid layout. For a column footer, 0 maps to the left\nedge of the footer cell and 1 to right edge. For a row footer, the range maps from\ntop to bottom. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loFooterBandRC",
        "comment": " Specify the band positioning in the interval [0,1] indicating where in a cell\na footer should be placed in a grid layout. For a column footer, 0 maps to the left\nedge of the footer cell and 1 to right edge. For a row footer, the range maps from\ntop to bottom. This version allows row and column settings to be specified separately.\nFor details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loHeaderBand",
        "comment": " Specify the band positioning in the interval [0,1] indicating where in a cell\na header should be placed in a grid layout. For a column header, 0 maps to the left\nedge of the header cell and 1 to right edge. For a row footer, the range maps from\ntop to bottom. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loHeaderBandRC",
        "comment": " Specify the band positioning in the interval [0,1] indicating where in a cell\na header should be placed in a grid layout. For a column header, 0 maps to the left\nedge of the footer cell and 1 to right edge. For a row header, the range maps from\ntop to bottom. This version allows row and column settings to be specified separately.\nFor details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loOffset",
        "comment": " Specify the orthogonal offset in pixels by which to displace grid header, footer\nand title cells from their position along the edge of a grid layout.\nFor details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loOffsetRC",
        "comment": " Specify the orthogonal offset in pixels by which to displace grid header, footer\nand title cells from their position along the edge of a grid layout. This version\nallows row and column settings to be specified separately. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loPadding",
        "comment": " Specify the padding in pixels to add between elements within rows and columns\nof a grid layout. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loPaddingRC",
        "comment": " Specify the padding in pixels to add between elements within rows and columns\nof a grid layout. This version allows row and column settings to be specified\nseparately. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loTitleBand",
        "comment": " Specify where in a cell of a grid layout, a title should be placed. For a\ncolumn title, 0 maps to the left edge of the title cell and 1 to right edge. The\ndefault value is 0.5, indicating a centred position. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "loTitleBandRC",
        "comment": " Specify where in a cell of a grid layout, a title should be placed. For a\ncolumn title, 0 maps to the left edge of the title cell and 1 to right edge. The\ndefault value is 0.5, indicating a centred position. This version allows row\nand column settings to be specified separately. For details see the\n[Vega layout documentation](https://vega.github.io/vega/docs/layout/)\n",
        "type": "Vega.Num -> Vega.Num -> Vega.LayoutProperty"
      },
      {
        "name": "lpAs",
        "comment": " Specify the name for the output field of a link path in a linkPath transformation.\nIf not specified, the default is \"path\". For details, see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "String -> Vega.LinkPathProperty"
      },
      {
        "name": "lpOrient",
        "comment": " Specify the orientation of a link path in a linkPath transformation. If a radial\norientation is specified, x and y coordinate parameters will be interpreted as an\nangle (in radians) and radius, respectively. For details, see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "Vega.Orientation -> Vega.LinkPathProperty"
      },
      {
        "name": "lpShape",
        "comment": " Specify the shape of a link path in a linkPath transformation. For details, see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "Vega.LinkShape -> Vega.LinkPathProperty"
      },
      {
        "name": "lpSourceX",
        "comment": " Specify the data field for the source x-coordinate in a linkPath transformation.\nThe default is `source.x`. For details, see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "Vega.Field -> Vega.LinkPathProperty"
      },
      {
        "name": "lpSourceY",
        "comment": " Specify the data field for the source y-coordinate in a linkPath transformation.\nThe default is `source.y`. For details, see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "Vega.Field -> Vega.LinkPathProperty"
      },
      {
        "name": "lpTargetX",
        "comment": " Specify the data field for the target x-coordinate in a linkPath transformation.\nThe default is `target.x`. For details, see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "Vega.Field -> Vega.LinkPathProperty"
      },
      {
        "name": "lpTargetY",
        "comment": " Specify the data field for the target y-coordinate in a linkPath transformation.\nThe default is `target.y`. For details, see the\n[Vega linkpath transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/)\n",
        "type": "Vega.Field -> Vega.LinkPathProperty"
      },
      {
        "name": "luAs",
        "comment": " Specify the output fields in which to write data found in the secondary\nstream of a lookup. For details see the\n[Vega lookup transform documentation](https://vega.github.io/vega/docs/transforms/lookup/)\n",
        "type": "List String -> Vega.LookupProperty"
      },
      {
        "name": "luDefault",
        "comment": " Specify the default value to assign if lookup fails in a lookup transformation.\nFor details see the\n[Vega lookup transform documentation](https://vega.github.io/vega/docs/transforms/lookup/)\n",
        "type": "Vega.Value -> Vega.LookupProperty"
      },
      {
        "name": "luValues",
        "comment": " Specify the data fields to copy from the secondary stream to the primary\nstream in a lookup transformation. If not specified, a reference to the full data\nrecord is copied.. For details see the\n[Vega lookup transform documentation](https://vega.github.io/vega/docs/transforms/lookup/)\n",
        "type": "List Vega.Field -> Vega.LookupProperty"
      },
      {
        "name": "mClip",
        "comment": " Indicates whether or how marks should be clipped to a specified shape.\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "Vega.Clip -> Vega.TopMarkProperty"
      },
      {
        "name": "mDescription",
        "comment": " Specify a description of a mark, useful for inline comments. For further\ndetails see the [Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "String -> Vega.TopMarkProperty"
      },
      {
        "name": "mEncode",
        "comment": " Specify a set of visual encoding rules for a mark. For further details see\nthe [Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "List Vega.EncodingProperty -> Vega.TopMarkProperty"
      },
      {
        "name": "mFrom",
        "comment": " Specify the data source to be visualized by a mark. If not specified, a single\nelement data set containing an empty object is assumed. The source can either be\na data set to use or a faceting directive to subdivide a data set across a set\nof group marks. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "List Vega.Source -> Vega.TopMarkProperty"
      },
      {
        "name": "mGroup",
        "comment": " Assemble a group of top-level marks. This can be used to create nested groups\nof marks within a `Group` mark (including further nested group specifications) by\nsuppyling the specification as a series of properties. For example,\n\n    marks\n        << mark Group\n            [ mFrom [ srData (str \"myData\") ]\n            , mGroup [ mkGroup1 [], mkGroup2 [] ]\n            ]\n\nFor details on the group mark see the\n[Vega group mark documentation](https://vega.github.io/vega/docs/marks/group/).\n\n",
        "type": "List ( Vega.VProperty, Vega.Spec ) -> Vega.TopMarkProperty"
      },
      {
        "name": "mInteractive",
        "comment": " Specify whether a mark can serve as an input event source. If false, no\nmouse or touch events corresponding to the mark will be generated. For further\ndetails see the [Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "Vega.Boo -> Vega.TopMarkProperty"
      },
      {
        "name": "mKey",
        "comment": " Specify a data field to use as a unique key for data binding. When a\nvisualization’s data is updated, the key value will be used to match data elements\nto existing mark instances. Use a key field to enable object constancy for\ntransitions over dynamic data. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "Vega.Field -> Vega.TopMarkProperty"
      },
      {
        "name": "mName",
        "comment": " Specify a unique name for a mark. This name can be used to refer to the mark\nin another mark or within an event stream definition. SVG renderers will add this\nname value as a CSS class name on the enclosing SVG group (g) element containing\nthe mark instances. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "String -> Vega.TopMarkProperty"
      },
      {
        "name": "mOn",
        "comment": " Specify a set of triggers for modifying a mark's properties in response to\nsignal changes. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "List Vega.Trigger -> Vega.TopMarkProperty"
      },
      {
        "name": "mSort",
        "comment": " Specify the Fields and sort order for sorting mark items. The sort order will\ndetermine the default rendering order. This is defined over generated scenegraph\nitems and sorting is performed after encodings are computed, allowing items to be\nsorted by size or position. To sort by underlying data properties in addition to\nmark item properties, append the prefix `datum` to a field name.\n\n    mSort [ ( field \"datum.y\", Ascend ) ]\n\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.TopMarkProperty"
      },
      {
        "name": "mStyle",
        "comment": " Specify the names of custom styles to apply to a mark. A style is a named\ncollection of mark property defaults defined within the configuration. These\nproperties will be applied to the mark’s enter encoding set, with later styles\noverriding earlier styles. Any properties explicitly defined within the mark’s\n`encode` block will override a style default. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "List String -> Vega.TopMarkProperty"
      },
      {
        "name": "mTransform",
        "comment": " Specify a set of post-encoding transforms to be applied after any encode\nblocks, that operate directly on mark scenegraph items (not backing data objects).\nThese can be useful for performing layout with transforms that can set x, y,\nwidth, height, etc. properties. Only data transforms that do not generate or\nfilter data objects should be used. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks).\n",
        "type": "List Vega.Transform -> Vega.TopMarkProperty"
      },
      {
        "name": "mZIndex",
        "comment": " Specify the z-index (draw order) of a mark. Marks with higher values are drawn\n'on top' of marks with lower numbers. This can be useful, for example, when drawing\nnode-link diagrams and the node symbol should sit on top of connected edge lines.\n",
        "type": "Vega.Num -> Vega.TopMarkProperty"
      },
      {
        "name": "maAlign",
        "comment": " The horizontal alignment of a text or image mark. This may be specified directly,\nvia a field, a signal or any other text-generating value. To guarantee valid\nalignment type names, use `hCenter`, `hLeft` etc. For example:\n\n    << mark Text\n        [ mEncode\n            [ enEnter [ maAlign [ hCenter ] ] ]\n        ]\n\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maAngle",
        "comment": " The rotation angle of the text in degrees in a text mark. This may be specified\ndirectly, via a field, a signal or any other number-generating value. For further\ndetails see the [Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maAspect",
        "comment": " Indicates whether the image aspect ratio should be preserved in an image mark.\nThis may be specified directly, via a field, a signal or any other Boolean-generating\nvalue. For further details see the\n[Vega image mark documentation](https://vega.github.io/vega/docs/marks/image/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maBaseline",
        "comment": " The vertical baseline of a text or image mark. This may be specified directly,\nvia a field, a signal or any other text-generating value. To guarantee valid\nalignment type names, use `vTop`, `vMiddle` etc. For example:\n\n    << mark Text\n        [ mEncode\n            [ enEnter [ maBaseline [ vTop ] ] ]\n        ]\n\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maCornerRadius",
        "comment": " The corner radius in pixels of an arc or rect mark. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maCursor",
        "comment": " The cursor to be displayed over a mark. This may be specified directly, via a\nfield, a signal or any other text-generating value. To guarantee valid cursor type\nnames, use `cursorValue`. For example:\n\n    marks\n        << mark Symbol\n            [ mFrom [ srData (str \"myData\") ]\n            , mEncode [ enUpdate [ maCursor [ cursorValue CPointer ] ] ]\n            ]\n\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maCustom",
        "comment": " Create a custom mark property. For example:\n\n    mEncode\n        [ enEnter\n            [ maFill [ vScale \"cScale\", vField (field \"group\") ]\n            , maCustom \"myName\" [ vScale \"xScale\", vField (field \"group\") ]\n            ]\n        ]\n\nFor further details see the\n[Vega Beeswarm plot example](https://vega.github.io/vega/examples/beeswarm-plot/).\n\n",
        "type": "String -> List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maDefined",
        "comment": " Indicates if the current data point in a linear mark is defined. If false, the\ncorresponding line/trail segment will be omitted, creating a “break”. This may be\nspecified directly, via a field, a signal or any other Boolean-generating value.\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maDir",
        "comment": " The direction text is rendered in a text mark. This determines which side is\ntruncated in response to the text size exceeding the value of the limit parameter.\nThis may be specified directly, via a field, a signal or any other string-generating\nvalue. To guarantee valid direction type names, use `textDirectionValue`. For example:\n\n    << mark Text\n        [ mFrom [ srData (str \"table\") ]\n        , mEncode\n            [ enEnter\n                [ maText [ vField (field \"date\") ]\n                , maDir [ textDirectionValue RightToLeft ]\n                ]\n        ]\n\nFor further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maDx",
        "comment": " The horizontal offset in pixels (before rotation), between the text and anchor\npoint of a text mark. This may be specified directly, via a field, a signal or any\nother number-generating value. For further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maDy",
        "comment": " The vertical offset in pixels (before rotation), between the text and anchor\npoint of a text mark. This may be specified directly, via a field, a signal or any\nother number-generating value. For further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maEllipsis",
        "comment": " The ellipsis string for text truncated in response to the limit parameter of\na text mark. This may be specified directly, via a field, a signal or any other\nstring-generating value. For further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maEndAngle",
        "comment": " The end angle in radians clockwise from north for an arc mark. This may be\nspecified directly, via a field, a signal or any other number-generating value.\nFor further details see the\n[Vega arc documentation](https://vega.github.io/vega/docs/marks/arc/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maFill",
        "comment": " The fill color of a mark. This may be specified directly, via a field,\na signal or any other color-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maFillOpacity",
        "comment": " The fill opacity of a mark in the range [0 1]. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maFont",
        "comment": " The typeface used by a text mark. This can be a generic font description such\nas `sans-serif`, `monospace` or any specific font name made accessible via a css\nfont definition. This may be specified directly, via a field, a signal or any other\nstring-generating value. For further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maFontSize",
        "comment": " The font size in pixels used by a text mark. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maFontStyle",
        "comment": " The font style, such as `normal` or `italic` used by a text mark. This may be\nspecified directly, via a field, a signal or any other string-generating value.\nFor further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maFontWeight",
        "comment": " The font weight, such as `normal` or `bold` used by a text mark. This may be\nspecified directly, via a field, a signal or any other string- or number-generating\nvalue. For further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maGroupClip",
        "comment": " Indicates if the visible group content should be clipped to the group’s\nspecified width and height. This may be specified directly, via a field, a signal\nor any other Boolean-generating value. For further details see the\n[Vega group mark documentation](https://vega.github.io/vega/docs/marks/group/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maHRef",
        "comment": " A URL to load upon mouse click. If defined, the mark acts as a hyperlink. This\nmay be specified directly, via a field, a signal or any other text-generating value.\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maHeight",
        "comment": " The width of a mark in pixels. This may be specified directly, via a field,\na signal or any other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maInnerRadius",
        "comment": " The inner radius in pixel units of an arc mark. This may be\nspecified directly, via a field, a signal or any other number-generating value.\nFor further details see the\n[Vega arc documentation](https://vega.github.io/vega/docs/marks/arc/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maInterpolate",
        "comment": " The interpolation style of a linear mark. This may be specified directly,\nvia a field, a signal or any other text-generating value. To guarantee valid\ninterpolation type names, use [markInterpolationValue](#markInterpolationValue).\nFor example:\n\n    mark Area\n        [ mFrom [ srData (str \"myData\") ]\n        , mEncode\n            [ enEnter\n                [ maInterpolate [ markInterpolationValue CatmullRom ] ]\n            ]\n        ]\n\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maLimit",
        "comment": " The maximum length of a text mark in pixels (default 0, indicating no limit).\nThe text value will be automatically truncated if the rendered size exceeds this\nlimit. It may be specified directly, via a field, a signal or any other\nnumber-generating value. For further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maOpacity",
        "comment": " The opacity of a mark in the range [0 1]. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maOrient",
        "comment": " The orientation of an area mark. With a vertical orientation, an area mark is\ndefined by the x, y, and (y2 or height) properties; with a horizontal orientation,\nthe y, x and (x2 or width) properties must be specified instead. The orientation\nmay be specified directly, via a field, a signal or any other text-generating value.\nTo guarantee valid orientation type names, use [orientationValue](#orientationValue).\nFor example:\n\n    mark Area\n        [ mFrom [ srData (str \"myData\") ]\n        , mEncode\n            [ enEnter\n                [ maOrient [ orientationValue Horizontal ]\n                , maX [ vScale \"xScale\", vField (field \"age\") ]\n                , maY [ vScale \"yScale\", vField (field \"value\") ]\n                , maX2 [ vScale \"xScale\", vNum 0 ]\n                ]\n            ]\n        ]\n\nFor further details see the\n[Vega area mark documentation](https://vega.github.io/vega/docs/marks/area/).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maOuterRadius",
        "comment": " The outer radius in pixel units of an arc mark. This may be\nspecified directly, via a field, a signal or any other number-generating value.\nFor further details see the\n[Vega arc documentation](https://vega.github.io/vega/docs/marks/arc/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maPadAngle",
        "comment": " The padding angle in radians clockwise from north for an arc mark. This may be\nspecified directly, via a field, a signal or any other number-generating value.\nFor further details see the\n[Vega arc documentation](https://vega.github.io/vega/docs/marks/arc/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maPath",
        "comment": " The [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths)\ndescribing the geometry of a path mark. This may be specified directly, via a field,\na signal or any other text-generating value. For further details see the\n[Vega path mark documentation](https://vega.github.io/vega/docs/marks/path/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maRadius",
        "comment": " Polar coordinate radial offset in pixels, relative to the origin determined\nby the x and y properties of a text mark. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maShape",
        "comment": " A shape instance that provides a drawing method to invoke within the renderer.\nShape instances cannot be specified directly, instead they must be generated by\na data transform such as symbol generation or a geoshape. For further details see\nthe [Vega shape documentation](https://vega.github.io/vega/docs/marks/shape/).\nFor example,\n\n    shapeEncoding =\n        [ maShape [ symbolValue SymSquare ]\n        , maStroke [ black ]\n        ]\n\n    lg =\n        legends\n            << legend\n                [ leFill \"cScale\"\n                , leOrient BottomRight\n                , leEncode [ enSymbols [ enUpdate shapeEncoding ] ]\n                ]\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maSize",
        "comment": " The area in pixels of the bounding box of point-based mark such as a symbol.\nNote that this value sets the area of the mark; the side lengths will increase with\nthe square root of this value. This may be specified directly, via a field, a signal\nor any other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStartAngle",
        "comment": " The start angle in radians clockwise from north for an arc mark. This may be\nspecified directly, via a field, a signal or any other number-generating value.\nFor further details see the\n[Vega arc documentation](https://vega.github.io/vega/docs/marks/arc/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStroke",
        "comment": " The stroke color of a mark. This may be specified directly, via a field,\na signal or any other color-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStrokeCap",
        "comment": " The stroke cap ending style for a mark. This may be specified directly, via a\nfield, a signal or any other text-generating value. To guarantee valid stroke cap\nnames, use [strokeCapValue](#strokeCapValue). For example:\n\n      maStrokeCap [ strokeCapValue CRound ]\n\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStrokeDash",
        "comment": " The stroke dash style of a mark. This may be specified directly, via a\nfield, a signal or any other numeric list-generating value. The list should consist\nof alternating dash-gap lengths in pixels. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStrokeDashOffset",
        "comment": " A mark's offset of the first stroke dash in pixels. This may be specified\ndirectly, via a field, a signal or any other number-generating value. For further\ndetails see the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStrokeJoin",
        "comment": " The stroke join method for a mark. This may be specified directly, via a\nfield, a signal or any other text-generating value. To guarantee valid stroke join\nnames, use `strokeJoinLabel`. For example:\n\n    strokeCapValue CButt\n\nFor further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStrokeMiterLimit",
        "comment": " The miter limit at which to bevel a line join for a mark. This may be specified\ndirectly, via a field, a signal or any other number-generating value. For further\ndetails see the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStrokeOpacity",
        "comment": " The stroke opacity of a mark in the range [0 1]. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maStrokeWidth",
        "comment": " The stroke width of a mark in pixels. This may be specified directly, via a\nfield, a signal or any other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maSymbol",
        "comment": " A symbol shape that describes a symbol mark. For preset shapes, use\n[symbolValue](#symbolValue). For correct sizing of custom shape paths, define\ncoordinates within a square ranging from -1 to 1 along both the x and y dimensions.\nSymbol definitions may be specified directly, via a field, a signal or any other\ntext-generating value. For example, to generate a preset shape:\n\n    maShape [ symbolValue SymTriangleLeft ]\n\nor a custom shape with an SVG path:\n\n    maShape [ symbolValue (symPath \"M-1,-1H1V1H-1Z\") ]\n\nFor further details see the\n[Vega symbol documentation](https://vega.github.io/vega/docs/marks/symbol/).\n\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maTension",
        "comment": " The interpolation tension in the range [0, 1] of a linear mark. Applies only\nto cardinal and catmull-rom interpolators. This may be specified directly, via a\nfield, a signal or any other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maText",
        "comment": " The text to display in a text mark. This may be specified directly,\nvia a field, a signal or any other string-generating value. For further details\nsee the [Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maTheta",
        "comment": " Polar coordinate angle in radians, relative to the origin determined by the\nx and y properties of a text mark. This may be specified directly, via a field,\na signal or any other number-generating value. For further details see the\n[Vega text mark documentation](https://vega.github.io/vega/docs/marks/text/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maTooltip",
        "comment": " The tooltip text to show upon mouse hover over a mark. This may be specified\ndirectly, via a field, a signal or any other text-generating value. For further\ndetails see the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maUrl",
        "comment": " The URL of an image file to be displayed as an image mark. This may be specified\ndirectly, via a field, a signal or any other text-generating value. For further\ndetails see the [Vega image mark documentation](https://vega.github.io/vega/docs/marks/image/).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maWidth",
        "comment": " The width of a mark in pixels. This may be specified directly, via a field,\na signal or any other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maX",
        "comment": " The primary x-coordinate of a mark in pixels. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maX2",
        "comment": " The secondary x-coordinate of a mark in pixels. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maXC",
        "comment": " The centre x-coordinate of a mark in pixels. This is an alternative to `maX`\nor `maX2`, not an addition. It may be specified directly, via a field, a signal\nor any other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maY",
        "comment": " The primary y-coordinate of a mark in pixels. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maY2",
        "comment": " The secondary y-coordinate of a mark in pixels. This may be specified directly,\nvia a field, a signal or any other number-generating value. For further details\nsee the [Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maYC",
        "comment": " The centre y-coordinate of a mark in pixels. This is an alternative to `maY`\nor `maY2`, not an addition. It may be specified directly, via a field, a signal\nor any other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "maZIndex",
        "comment": " An integer z-index indicating the layering order of sibling mark items. The\ndefault value is 0. Higher values (1) will cause marks to be drawn on top of those\nwith lower z-index values. Setting the z-index as an encoding property only affects\nordering among sibling mark items; it will not change the layering relative to other\nmark definitions. The z-index may be specified directly, via a field, a signal or\nany other number-generating value. For further details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#encode).\n",
        "type": "List Vega.Value -> Vega.MarkProperty"
      },
      {
        "name": "mark",
        "comment": " Create a single mark definition. Marks form the visible components of a visualization.\nFor available mark types see [Mark](#mark). Each mark specification can include\na list of mark properties (second parameter) that customise the appearance of the\nmark and relate its appearance to data streams or signals. Commonly multiple marks\nare combined with the composition operator (`<<`), for example:\n\n      mk =\n          marks\n              << mark Rect\n                  [ mFrom [ srData (str \"myData\") ]\n                  , mEncode\n                      [ enEnter\n                          [ maX [ vScale \"xScale\", vField (field \"age\") ]\n                          , maWidth [ vNum 17 ]\n                          , maY [ vScale \"yScale\", vField (field \"value\") ]\n                          , maY2 [ vScale \"yScale\", vNum 0 ]\n                          ]\n                      ]\n                  ]\n              << mark Area\n                  [ mFrom [ srData (str \"myOtherData\") ]\n                  , mEncode\n                      [ enEnter\n                          [ maX [ vScale \"xScale\", vField (field \"age\") ]\n                          , maY [ vScale \"yScale\", vField (field \"anotherValue\") ]\n                          , maY2 [ vScale \"yScale\", vNum 0 ]\n                          , maFill [ vStr \"#b3d9e6\" ]\n                          ]\n                      ]\n                  ]\n\n",
        "type": "Vega.Mark -> List Vega.TopMarkProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "markInterpolationValue",
        "comment": " A convenience function for generating a value representing a given mark\ninterpolation type. This can be used instead of specifying an interpolation type\nas a literal string to avoid problems of mistyping the interpolation name.\n\n    signals\n       << signal \"interp\" [ siValue (markInterpolationValue Linear) ]\n\n",
        "type": "Vega.MarkInterpolation -> Vega.Value"
      },
      {
        "name": "marks",
        "comment": " Create the marks used in the visualization. Multiple mark specifications are\ncommonly combined using the functional composition operator (`<<`). For example,\n\n      mk =\n          marks\n              << mark Line\n                  [ mFrom [ srData (str \"myData\") ]\n                  , mEncode\n                      [ enEnter\n                          [ maX [ vScale \"xScale\", vField (field \"distance\") ]\n                          , maY [ vScale \"yScale\", vField (field \"energy\") ]\n                          , maStroke [ black ]\n                          ]\n                      ]\n                  ]\n              << mark Symbol\n                  [ mFrom [ srData (str \"myData\") ]\n                  , mEncode\n                      [ enEnter\n                          [ maX [ vScale \"xScale\", vField (field \"distance\") ]\n                          , maY [ vScale \"yScale\", vField (field \"energy\") ]\n                          , maFill [ white ]\n                          , maStroke [ black ]\n                          ]\n                      ]\n                  ]\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "nInterval",
        "comment": " Specify a desired 'nice' temporal interval between labelled tick points. For\nfull details see the [Vega scale documentation](https://vega.github.io/vega/docs/scales/).\n",
        "type": "Vega.TimeUnit -> Int -> Vega.ScaleNice"
      },
      {
        "name": "nTickCount",
        "comment": " Specify a desired tick count for a human-friendly 'nice' scale range. For full\ndetails see the [Vega scale documentation](https://vega.github.io/vega/docs/scales/).\n",
        "type": "Int -> Vega.ScaleNice"
      },
      {
        "name": "num",
        "comment": " A numeric literal used for functions that can accept a literal or signal.\n",
        "type": "Float -> Vega.Num"
      },
      {
        "name": "numExpr",
        "comment": " An expression that will be evaluated as a numeric value.\n",
        "type": "Vega.Expr -> Vega.Num"
      },
      {
        "name": "numList",
        "comment": " A list of potentially mixed numeric types. This can be useful when, for example,\na domain is specified as being bounded by 0 and some signal:\n\n    scDomain (doNums (numList [ num 0, numSignal \"mySignal\" ] ) )\n\n",
        "type": "List Vega.Num -> Vega.Num"
      },
      {
        "name": "numNull",
        "comment": " Represents an absence of a numeric value.\n",
        "type": "Vega.Num"
      },
      {
        "name": "numSignal",
        "comment": " A signal that will provide a numeric value.\n",
        "type": "String -> Vega.Num"
      },
      {
        "name": "numSignals",
        "comment": " A list of signals that will provide numeric values.\n",
        "type": "List String -> Vega.Num"
      },
      {
        "name": "nums",
        "comment": " A list of numeric literals used for functions that can accept literals or signal.\nFor lists that contain a mixture of numeric literals and signals use\n[numList])(#numList) instead.\n",
        "type": "List Float -> Vega.Num"
      },
      {
        "name": "on",
        "comment": " Adds list of triggers to the given data table.\nFor details see the [Vega trigger documentation](https://vega.github.io/vega/docs/triggers).\n",
        "type": "List Vega.Trigger -> Vega.DataTable -> Vega.DataTable"
      },
      {
        "name": "operationSignal",
        "comment": " Indicates an aggregation operation is to be determined by a named signal. The\nsignal should generate the name of a valid operation (e.g. `average`). For details see the\n[Vega aggregate documentation](https://vega.github.io/vega/docs/transforms/aggregate/#ops)\n",
        "type": "String -> Vega.Operation"
      },
      {
        "name": "orderSignal",
        "comment": " Indicates a sort order determined by a named signal for comparison operations.\nFor details see the [Vega type comparison documentation](https://vega.github.io/vega/docs/types/#Compare).\n",
        "type": "String -> Vega.Order"
      },
      {
        "name": "orientationSignal",
        "comment": " Indicates an orientation for marks, legends and link paths is determined by a named signal.\nFor details see the [Vega type comparison documentation](https://vega.github.io/vega/docs/types/#Compare).\n",
        "type": "String -> Vega.Orientation"
      },
      {
        "name": "orientationValue",
        "comment": " A convenience function for generating a value representing a given mark\norientation type. This can be used instead of specifying an orientation type as\na literal string to avoid problems of mistyping its name.\n\n     maOrient [ orientationValue Horizontal ]\n\n",
        "type": "Vega.Orientation -> Vega.Value"
      },
      {
        "name": "overlapStrategySignal",
        "comment": " Indicates an axis overlap strategy is determined by a named signal.\nFor valid signal values see the\n[Vega axes documentation](https://vega.github.io/vega/docs/axes)\n",
        "type": "String -> Vega.OverlapStrategy"
      },
      {
        "name": "paAs",
        "comment": " The names to give the output fields of a packing transform. The default is\n[\"x\", \"y\", \"r\", \"depth\", \"children\"], where x and y are the layout coordinates,\nr is the node radius, depth is the tree depth, and children is the count of a\nnode’s children in the tree. For more details, see the\n[Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack/)\n",
        "type": "String -> String -> String -> String -> String -> Vega.PackProperty"
      },
      {
        "name": "paField",
        "comment": " The data field corresponding to a numeric value for the node in a packing\ntransform. The sum of values for a node and all its descendants is available on\nthe node object as the value property. If radius is null, this field determines\nthe node size. For details, see the\n[Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack/)\n",
        "type": "Vega.Field -> Vega.PackProperty"
      },
      {
        "name": "paPadding",
        "comment": " The approximate padding to include between packed circles. For details, see\nthe [Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack/)\n",
        "type": "Vega.Num -> Vega.PackProperty"
      },
      {
        "name": "paRadius",
        "comment": " Specify an explicit node radius to use in a packing transform. If `Nothing` (the\ndefault), the radius of each leaf circle is derived from the field value. For details, see\nthe [Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack/)\n",
        "type": "Maybe.Maybe Vega.Field -> Vega.PackProperty"
      },
      {
        "name": "paSize",
        "comment": " The size of a packing layout, provided as a two-element list in [width, height]\norder (or a signal that generates such a list). For details, see the\n[Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack/)\n",
        "type": "Vega.Num -> Vega.PackProperty"
      },
      {
        "name": "paSort",
        "comment": " Specify how sorting of sibling nodes is supported in a packing transform.\nThe inputs to subject to sorting are tree node objects, not input data objects.\n\n    transform\n        [ trPack\n            [ paField (field \"size\")\n            , paSort [ ( field \"value\", Ascend ) ]\n            ]\n        ]\n\nFor details, see the\n[Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack/)\n\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.PackProperty"
      },
      {
        "name": "padding",
        "comment": " Set the padding around the visualization in pixel units. The way padding is\ninterpreted will depend on the `autosize` properties. See the\n[Vega specification documentation](https://vega.github.io/vega/docs/specification/)\nfor details.\n",
        "type": "Float -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "paddings",
        "comment": " Set the padding around the visualization in pixel units in _left_, _top_,\n_right_, _bottom_ order. The way padding is interpreted will depend on the\n`autosize` properties. See the\n[Vega specification documentation](https://vega.github.io/vega/docs/specification/)\nfor details.\n",
        "type": "Float -> Float -> Float -> Float -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "parse",
        "comment": " Indicates the parsing rules when processing some data text. The parameter is\na list of tuples where each corresponds to a field name paired with its desired\ndata type. This is only necessary if there is some ambiguity that could prevent\ncorrect type inference, such as time text:\n\n    dataSource\n        [ data \"timeData\"\n            [ daUrl \"data/timeSeries.json\"\n            , daFormat [ parse [ ( \"timestamp\", foDate \"%d/%m/%y %H:%M\" ) ] ]\n            ]\n        ]\n\n",
        "type": "List ( String, Vega.DataType ) -> Vega.FormatProperty"
      },
      {
        "name": "piAs",
        "comment": " The output fields for the computed start and end angles for each arc in a pie\ntransform. For details see the\n[Vega pie transform documentation](https://vega.github.io/vega/docs/transforms/pie/)\n",
        "type": "String -> String -> Vega.PieProperty"
      },
      {
        "name": "piEndAngle",
        "comment": " The end angle in radians in a pie chart transform. The default is 2 PI\nindicating the final slice ends 'north'. For details see the\n[Vega pie transform documentation](https://vega.github.io/vega/docs/transforms/pie/)\n",
        "type": "Vega.Num -> Vega.PieProperty"
      },
      {
        "name": "piField",
        "comment": " The field to encode with angular spans in a pie chart transform. For details\nsee the [Vega pie transform documentation](https://vega.github.io/vega/docs/transforms/pie/)\n",
        "type": "Vega.Field -> Vega.PieProperty"
      },
      {
        "name": "piGroupBy",
        "comment": " Specify the fields to group by when performing a pivot transform. If not specified,\na single group containing all data objects will be used. For details see the\n[Vega pivot transform documentation](https://vega.github.io/vega/docs/transforms/pivot/)\n",
        "type": "List Vega.Field -> Vega.PivotProperty"
      },
      {
        "name": "piLimit",
        "comment": " Specify the maximum number of fields to generate when performing a pivot transform\nor 0 for no limit. For details see the\n[Vega pivot transform documentation](https://vega.github.io/vega/docs/transforms/pivot/)\n",
        "type": "Vega.Num -> Vega.PivotProperty"
      },
      {
        "name": "piOp",
        "comment": " Specify the aggregation operation to use by when performing a pivot transform.\nIf not specified, fields will be aggregated by their sum. For details see the\n[Vega pivot transform documentation](https://vega.github.io/vega/docs/transforms/pivot/)\n",
        "type": "Vega.Operation -> Vega.PivotProperty"
      },
      {
        "name": "piSort",
        "comment": " Indicates whether or not pie slices should be stored in angular size order.\nFor details see the\n[Vega pie transform documentation](https://vega.github.io/vega/docs/transforms/pie/)\n",
        "type": "Vega.Boo -> Vega.PieProperty"
      },
      {
        "name": "piStartAngle",
        "comment": " The starting angle in radians in a pie chart transform. The default is 0\nindicating that the first slice starts 'north'. For details see the\n[Vega pie transform documentation](https://vega.github.io/vega/docs/transforms/pie/)\n",
        "type": "Vega.Num -> Vega.PieProperty"
      },
      {
        "name": "prCenter",
        "comment": " Specify a projection’s centre as a two-element list of longitude and latitude\nin degrees. The default value is [0, 0].\n\n    pr =\n        projections\n            << projection \"myProjection\"\n                [ prType Mercator\n                , prCenter (nums [ 40, -20 ])\n                ]\n\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prClipAngle",
        "comment": " Specify a projection’s clipping circle radius to the specified angle in degrees.\nA value of zero indicates antimeridian cutting should be applied rather than\nsmall-circle clipping. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prClipExtent",
        "comment": " Specify a projection’s viewport clip extent to the specified bounds in pixels.\nThe extent bounds should be specified as a list of four numbers in [x0, y0, x1, y1]\norder where x0 is the left-side of the viewport, y0 is the top, x1 is the right\nand y1 is the bottom. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prCoefficient",
        "comment": " Specify a Hammer map projection's coefficient (defaults to 2). For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prCustom",
        "comment": " Specify a custom map projection. Custom names need to be registered with the\nVega runtime. For details, see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#register)\n",
        "type": "Vega.Str -> Vega.Projection"
      },
      {
        "name": "prDistance",
        "comment": " Specify a Satellite map projection's distance value. Values are expressed as a\nproportion of the Earth's radius (defaults to 2). For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prExtent",
        "comment": " Specify the display region into which the projection should be automatically fit.\nUsed in conjunction with [prFit](#prFit). The region bounds should be specified\nas a list of four numbers in [x0, y0, x1, y1] order where x0 is the left-side,\ny0 is the top, x1 is the right and y1 is the bottom. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prFit",
        "comment": " Specify the GeoJSON data to which a projection should attempt to automatically\nfit by setting its translate and scale values.\n\n    ds =\n        dataSource [ data \"mapData\" [ daUrl \"myGeoJson.json\" ] ]\n\n    pr =\n        projections\n            << projection \"myProjection\"\n                [ prType Orthographic\n                , prSize (numSignal \"[width,height]\")\n                , prFit (feName \"mapData\")\n                ]\n\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n\n",
        "type": "Vega.Feature -> Vega.ProjectionProperty"
      },
      {
        "name": "prFraction",
        "comment": " Specify a Bottomley map projection's fraction parameter (defaults to 0.5).\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prLobes",
        "comment": " Specify the number of lobes in radial map projections such as the Berghaus Star.\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prParallel",
        "comment": " Specify a the parallel used for map projections such as the Armadillo (defaults\nto 20 degrees N). For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prPointRadius",
        "comment": " Specify the default radius (in pixels) to use when drawing projected GeoJSON\nPoint and MultiPoint geometries. The default value is 4.5. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prPrecision",
        "comment": " Specify a threshold for the projection’s adaptive resampling in pixels. This\ncorresponds to the Douglas–Peucker distance. If precision is not specified, the\nprojection’s current resampling precision which defaults to √0.5 ≅ 0.70710 is used.\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prRadius",
        "comment": " Specify the radius for the Gingery map projection. Defaults to 30 degrees.\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prRatio",
        "comment": " Specify a Hill map projection's ratio allowing it to vary continuously between\nMaurer 73 (0) and Eckert IV projections (infinity). Defaults to 1. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prRotate",
        "comment": " Specify a projection’s three-axis rotation angle. This should be a two- or\nthree-element list of numbers [lambda, phi, gamma] specifying the rotation angles\nin degrees about each spherical axis. (These correspond to yaw, pitch and roll.).\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prScale",
        "comment": " Specify a projection’s the projection’s scale factor to the specified value.\nThe default scale is projection-specific. The scale factor corresponds linearly\nto the distance between projected points; however, scale factor values are not\nequivalent across projections. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prSize",
        "comment": " Specify the width and height of the display region into which the projection\nshould be automatically fit. Used in conjunction with [prFit](#prFit) this is equivalent\nto calling [prExtent](#prExtent) with the top-left position set to (0,0). The region\nsize should be specified as a list of two numbers in [width, height] order (or\na signal that generates such a list). For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prSpacing",
        "comment": " Specify the spacing for a Lagrange conformal map projection (defaults to 0.5).\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prTilt",
        "comment": " Specify the tilt angle for a Satellite map projection (defaults to 0 degrees).\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prTranslate",
        "comment": " Specify a translation offset to the specified two-element list [tx, ty]. If\nnot specified as a two-element list, returns the current translation offset which\ndefaults to [480, 250]. The translation offset determines the pixel coordinates\nof the projection’s centre. The default translation offset places (0°,0°) at the\ncentre of a 960×500 area. For details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#properties)\n",
        "type": "Vega.Num -> Vega.ProjectionProperty"
      },
      {
        "name": "prType",
        "comment": " Specify the type of global map projection to use in a projection transformation.\n\n    pr =\n        projections\n            << projection \"myProj\" [ prType Orthographic ]\n\nIf the projection type is to be generated from a signal, use `projectionSignal`\nand specify the label of the signal to use.\n\n    << projection \"myProj\" [ prType (projectionSignal \"mySignal\") ]\n\nFor details see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections/#types)\n\n",
        "type": "Vega.Projection -> Vega.ProjectionProperty"
      },
      {
        "name": "projection",
        "comment": " Create a single map projection for transforming geo data onto a plane.\n\n    pr =\n        projections\n            << projection \"myProjection\"\n                [ prType AlbersUsa\n                , prScale (num 1100)\n                , prTranslate (numSignals [ \"width / 2\", \"height / 2\" ])\n                ]\n\n",
        "type": "String -> List Vega.ProjectionProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "projectionSignal",
        "comment": " Specify a global map projection type is to be determined by a signal. For\ndetails of valid projection values see the\n[Vega map projection documentation](https://vega.github.io/vega/docs/projections).\n",
        "type": "String -> Vega.Projection"
      },
      {
        "name": "projectionValue",
        "comment": " A convenience function for generating a value representing a given projection\ntype. Useful when generating signals representing projection types.\n\n    standardProjections : Value\n    standardProjections =\n        List.map projectionValue\n            [ Albers\n            , AzimuthalEqualArea\n            , AzimuthalEquidistant\n            , ConicConformal\n            , ConicEqualArea\n            , Equirectangular\n            , Mercator\n            , Orthographic\n            ]\n            |> vValues\n\n    si =\n        signals\n            << signal \"pType\"\n                [ siValue (projectionValue Mercator)\n                , siBind (iSelect [ inOptions standardProjections ])\n                ]\n\n",
        "type": "Vega.Projection -> Vega.Value"
      },
      {
        "name": "projections",
        "comment": " Create the projections used to map geographic data onto a plane.\n\n    pr =\n        projections\n            << projection \"myProj\" [ prType Orthographic ]\n            << projection \"myProj2\" [ prType Albers, prRotate (nums [ -20, 15 ]) ]\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "ptAs",
        "comment": " Specify the output field names for the output of a partition layout transform.\nThe parameters correspond to the (default name) fields `x0`, `y0`, `x1`, `y1`,\n`depth` and `children`. For details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n",
        "type": "String -> String -> String -> String -> String -> String -> Vega.PartitionProperty"
      },
      {
        "name": "ptField",
        "comment": " Specify the data field corresponding to a numeric value for a partition node.\nThe sum of values for a node and all its descendants is available on the node object\nas the `value` property. This field determines the size of a node. For details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n",
        "type": "Vega.Field -> Vega.PartitionProperty"
      },
      {
        "name": "ptPadding",
        "comment": " Specify the padding between adjacent nodes for a partition layout transform.\nFor details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n",
        "type": "Vega.Num -> Vega.PartitionProperty"
      },
      {
        "name": "ptRound",
        "comment": " Specify whether or not node layout values should be rounded in a partition transform.\nThe default is false. For details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n",
        "type": "Vega.Boo -> Vega.PartitionProperty"
      },
      {
        "name": "ptSize",
        "comment": " Specify the size of a partition layout as two-element list corresponding to\n[width, height] (or a signal that generates such a list). For details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n",
        "type": "Vega.Num -> Vega.PartitionProperty"
      },
      {
        "name": "ptSort",
        "comment": " Specify how sorting of sibling nodes is performed during a partition layout\ntransform. For details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.PartitionProperty"
      },
      {
        "name": "raCustomDefault",
        "comment": " Provide a custom range default scheme. This can be use when a new named default\nhas been created as part of a config setting is required. For details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "type": "String -> Vega.ScaleRange"
      },
      {
        "name": "raData",
        "comment": " A scale range specified as a data reference object. This is used for specifying\nordinal scale ranges as a series of distinct field values.\n\n    scale \"myScale\"\n        [ scType ScOrdinal\n        , scDomain (doData [ daDataset \"clusters\", daField (field \"id\") ])\n        , scRange (raData [ daDataset \"clusters\", daField (field \"name\") ])\n        ]\n\nFor details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n\n",
        "type": "List Vega.DataReference -> Vega.ScaleRange"
      },
      {
        "name": "raNums",
        "comment": " A scale range specified as a list of numbers. For details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "type": "List Float -> Vega.ScaleRange"
      },
      {
        "name": "raScheme",
        "comment": " A scale range specified as a list of color schemes. The first parameter is\nthe name of the colour scheme to use, the second any customising properties.\nFor details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "type": "Vega.Str -> List Vega.ColorSchemeProperty -> Vega.ScaleRange"
      },
      {
        "name": "raSignal",
        "comment": " A signal name used to generate a scale range. For details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "type": "String -> Vega.ScaleRange"
      },
      {
        "name": "raStep",
        "comment": " The step size for a band scale range. For details see the\n[Vega band scale documentation](https://vega.github.io/vega/docs/scales/).\n",
        "type": "Vega.Value -> Vega.ScaleRange"
      },
      {
        "name": "raStrs",
        "comment": " A scale range specified as a list of strings. For details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "type": "List String -> Vega.ScaleRange"
      },
      {
        "name": "raValues",
        "comment": " A scale range specified as a list of values. For details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "type": "List Vega.Value -> Vega.ScaleRange"
      },
      {
        "name": "rgb",
        "comment": " RGB color interpolation. The parameter is a gamma value to control the\nbrightness of the color trajectory.\n",
        "type": "Float -> Vega.CInterpolate"
      },
      {
        "name": "scAlign",
        "comment": " Specify the alignment of elements within each step of a band scale, as a\nfraction of the step size. Should be in the range [0,1]. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scBase",
        "comment": " Specify the base of the logorithm used in a logarithmic scale. For more details\nsee the [Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scClamp",
        "comment": " Specify whether output values should be clamped to when using a quantitative\nscale range (default false). If clamping is disabled and the scale is passed a\nvalue outside the domain, the scale may return a value outside the range through\nextrapolation. If clamping is enabled, the output value of the scale is always\nwithin the scale’s range. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Boo -> Vega.ScaleProperty"
      },
      {
        "name": "scCustom",
        "comment": " Specify a custom named scale. For details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#types)\n",
        "type": "String -> Vega.Scale"
      },
      {
        "name": "scDomain",
        "comment": " Specify the domain of input data values for a scale. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.ScaleDomain -> Vega.ScaleProperty"
      },
      {
        "name": "scDomainImplicit",
        "comment": " Specify whether or not ordinal domains should be implicitly extended with new\nvalues. If false, a scale will return `undefined` for values not included in the\ndomain; if true, new values will be appended to the domain and an updated range\nvalue will be returned. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Boo -> Vega.ScaleProperty"
      },
      {
        "name": "scDomainMax",
        "comment": " Specify the maximum value of a scale domain, overriding a `scDomain` setting.\nThis is only intended for use with scales having continuous domains. For more details\nsee the [Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scDomainMid",
        "comment": " Insert a single mid-point value into a two-element scale domain. The mid-point\nvalue must lie between the domain minimum and maximum values. This can be useful\nfor setting a midpoint for diverging color scales. It is only intended for use\nwith scales having continuous, piecewise domains. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scDomainMin",
        "comment": " Specify the minimum value of a scale domain, overriding a `scDomain` setting.\nThis is only intended for use with scales having continuous domains. For more details\nsee the [Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scDomainRaw",
        "comment": " Specify a list value that directly overrides the domain of a scale. This is\nuseful for supporting interactions such as panning or zooming a scale. The scale\nmay be initially determined using a data-driven domain, then modified in response\nto user input by using this rawDomain function.\n\n    scales\n        << scale \"xDetail\"\n            [ scType ScTime\n            , scRange RaWidth\n            , scDomain (doData [ daDataset \"sp500\", daField (field \"date\") ])\n            , scDomainRaw (vSignal \"detailDomain\")\n            ]\n\nFor more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n\n",
        "type": "Vega.Value -> Vega.ScaleProperty"
      },
      {
        "name": "scExponent",
        "comment": " Specify the exponent to be used in power scale. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scInterpolate",
        "comment": " Specify the interpolation method for a quantitative scale. For more details\nsee the [Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.CInterpolate -> Vega.ScaleProperty"
      },
      {
        "name": "scNice",
        "comment": " Extend the range of a scale domain so it starts and ends on 'nice' round\nvalues. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.ScaleNice -> Vega.ScaleProperty"
      },
      {
        "name": "scPadding",
        "comment": " Expand a scale domain to accommodate the specified number of pixels on each\nend of a quantitative scale range or the padding between bands in a band scale.\nFor more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scPaddingInner",
        "comment": " Expand a scale domain to accommodate the specified number of pixels\nbetween inner bands in a band scale. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scPaddingOuter",
        "comment": " Expand a scale domain to accommodate the specified number of pixels\noutside the outer bands in a band scale. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scRange",
        "comment": " Specify the range of a scale representing the set of visual values. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.ScaleRange -> Vega.ScaleProperty"
      },
      {
        "name": "scRangeStep",
        "comment": " Specify the step size for band and point scales. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Num -> Vega.ScaleProperty"
      },
      {
        "name": "scReverse",
        "comment": " Reverse the order of a scale range. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Boo -> Vega.ScaleProperty"
      },
      {
        "name": "scRound",
        "comment": " Specify whether to round numeric output values to integers. Helpful for\nsnapping to the pixel grid. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Boo -> Vega.ScaleProperty"
      },
      {
        "name": "scType",
        "comment": " Specify the type of a named scale. For more details see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Scale -> Vega.ScaleProperty"
      },
      {
        "name": "scZero",
        "comment": " Specify whether or not a scale domain should include zero. The default is\ntrue for linear, sqrt and power scales and false for all others. For more details\nsee the [Vega scale documentation](https://vega.github.io/vega/docs/scales/#properties)\n",
        "type": "Vega.Boo -> Vega.ScaleProperty"
      },
      {
        "name": "scale",
        "comment": " Create a single scale used to map data values to visual properties.\n\n    scale \"xScale\"\n        [ scType ScLinear\n        , scDomain (doData [ daDataset \"myData\", daField (field \"myField\") ])\n        , scRange RaWidth\n        ]\n\n",
        "type": "String -> List Vega.ScaleProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "scaleNiceSignal",
        "comment": " Specify that the type of 'nice' scale generation is to be determined by a signal\nwith the given name. For valid values of the signal see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/).\n",
        "type": "String -> Vega.ScaleNice"
      },
      {
        "name": "scaleRangeSignal",
        "comment": " Specify that a default scaling (`width`, `category`, `heatmap` etc.) is to be\ndetermined by a signal with the given name. For valid values of the signal see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#range).\n",
        "type": "String -> Vega.ScaleRange"
      },
      {
        "name": "scaleSignal",
        "comment": " Specify a type of scale transformation is to be determined by a signal. For\nvalid values of the signal, see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#types).\n",
        "type": "String -> Vega.Scale"
      },
      {
        "name": "scales",
        "comment": " Create the scales used to map data values to visual properties.\n\n    sc =\n        scales\n            << scale \"xScale\"\n                [ scType ScLinear\n                , scDomain (doData [ daDataset \"myData\", daField (field \"x\") ])\n                , scRange RaWidth\n                ]\n            << scale \"yScale\"\n                [ scType ScLinear\n                , scDomain (doData [ daDataset \"myData\", daField (field \"y\") ])\n                , scRange RaHeight\n                ]\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "siBind",
        "comment": " Bind a signal to an external input element such as a slider, selection list\nor radio button group. For details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "Vega.Bind -> Vega.SignalProperty"
      },
      {
        "name": "siDescription",
        "comment": " Specify a text description of a signal, useful for inline documentation.\nFor details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "String -> Vega.SignalProperty"
      },
      {
        "name": "siName",
        "comment": " A unique name to be given to a signal. Signal names should be contain only\nalphanumeric characters (or “$”, or “_”) and may not start with a digit. Reserved\nkeywords that may not be used as signal names are \"datum\", \"event\", \"item\", and\n\"parent\". For details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "String -> Vega.SignalProperty"
      },
      {
        "name": "siOn",
        "comment": " Specify event stream handlers for updating a signal value in response to\ninput events. For details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "List (List Vega.EventHandler) -> Vega.SignalProperty"
      },
      {
        "name": "siPushOuter",
        "comment": " Specify that a signal updates should target a signal in an enclosing scope.\nUsed when creating nested signals in a group mark. For details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "Vega.SignalProperty"
      },
      {
        "name": "siReact",
        "comment": " Specify whether a signal update expression should be automatically re-evaluated\nwhen any upstream signal dependencies update. If false, the update expression will\nonly be run upon initialization. For details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "Vega.Boo -> Vega.SignalProperty"
      },
      {
        "name": "siUpdate",
        "comment": " Specify an update expression for a signal which may include other signals,\nin which case the signal will automatically update in response to upstream signal\nchanges, so long as its react property is not false. For details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "String -> Vega.SignalProperty"
      },
      {
        "name": "siValue",
        "comment": " Specify the initial value of a signal. For details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals).\n",
        "type": "Vega.Value -> Vega.SignalProperty"
      },
      {
        "name": "sideSignal",
        "comment": " Specify that an axis position is to be determined by a signal with the given\nname. For valid values of the signal see the\n[Vega axes documentation](https://vega.github.io/vega/docs/axes/#orientation).\n",
        "type": "String -> Vega.Side"
      },
      {
        "name": "signal",
        "comment": " Create a single signal used to add a dynamic component to a visualization.\nFor further details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals)\n\n    signal \"mySignal\"\n        [ siValue (vNum 20)\n        , siBind (iRange [ inMin 5, inMax 50, inStep 1 ])\n        ]\n\n",
        "type": "String -> List Vega.SignalProperty -> List Vega.Spec -> List Vega.Spec"
      },
      {
        "name": "signals",
        "comment": " Create the signals used to add dynamism to the visualization.\nFor further details see the\n[Vega signal documentation](https://vega.github.io/vega/docs/signals)\n\n    si =\n        signals\n            << signal \"chartSize\" [ siValue (vNum 120) ]\n            << signal \"chartPad\" [ siValue (vNum 15) ]\n            << signal \"chartStep\" [ siUpdate \"chartSize + chartPad\" ]\n            << signal \"width\" [ siUpdate \"chartStep * 4\" ]\n\n",
        "type": "List Vega.Spec -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "soByField",
        "comment": " The field to be used when sorting.\n",
        "type": "Vega.Str -> Vega.SortProperty"
      },
      {
        "name": "soOp",
        "comment": " A sorting operation.\n",
        "type": "Vega.Operation -> Vega.SortProperty"
      },
      {
        "name": "sortPropertySignal",
        "comment": " Specify that a sorting order is to be determined by a signal with the given\nname. The value of the signal should be either `ascending` or `descending`.\nFor details see the\n[Vega sort documentation](https://vega.github.io/vega/docs/scales/#sort).\n",
        "type": "String -> Vega.SortProperty"
      },
      {
        "name": "spiralSignal",
        "comment": " Specify that a spiral type for wordcloud allocation is to be determined by a\nsignal with the given name. The value of the signal should be either `archimedean`\nor `rectangular`.\n",
        "type": "String -> Vega.Spiral"
      },
      {
        "name": "srData",
        "comment": " Name of the source for a set of marks. For details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#from)\n",
        "type": "Vega.Str -> Vega.Source"
      },
      {
        "name": "srFacet",
        "comment": " Create a facet directive for a set of marks. The first parameter is the name\nof the source data set from which the facet partitions are to be generated. The\nsecond parameter is the name to be given to the generated facet source. Marks\ndefined with the faceted `group` mark can reference this data source name to\nvisualize the local data partition.\n\n    mark Group\n        [ mFrom [ srFacet (str \"table\") \"facet\" [ faGroupBy [ field \"category\" ] ] ]\n        , mEncode [ enEnter [ maY [ vScale \"yScale\", vField (field \"category\") ] ] ]\n        , mGroup [ nestedMk [] ]\n        ]\n\n    nestedMk =\n        marks\n            << mark Rect\n                [ mName \"bars\"\n                , mFrom [ srData (str \"facet\") ]\n                , mEncode\n                    [ enEnter\n                        [ maY [ vScale \"pos\", vField (field \"position\") ]\n                        , maHeight [ vScale \"pos\", vBand (num 1) ]\n                        , maX [ vScale \"xScale\", vField (field \"value\") ]\n                        , maX2 [ vScale \"xScale\", vBand (num 0) ]\n                        , maFill [ vScale \"cScale\", vField (field \"position\") ]\n                        ]\n                    ]\n                ]\n\nFor details see the\n[Vega mark documentation](https://vega.github.io/vega/docs/marks/#from)\n\n",
        "type": "Vega.Str -> String -> List Vega.Facet -> Vega.Source"
      },
      {
        "name": "stAs",
        "comment": " Specify the names of the output fields for the computed start and end stack\nvalues of a stack transform. For details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack/)\n",
        "type": "String -> String -> Vega.StackProperty"
      },
      {
        "name": "stField",
        "comment": " Specify the data field that determines the stack heights in a stack transform.\nFor details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack/)\n",
        "type": "Vega.Field -> Vega.StackProperty"
      },
      {
        "name": "stGroupBy",
        "comment": " Specify a grouping of fields with which to partition data into separate stacks\nin a stack transform. For details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack/)\n",
        "type": "List Vega.Field -> Vega.StackProperty"
      },
      {
        "name": "stOffset",
        "comment": " Specify the baseline offset used in a stack transform. For details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack/)\n",
        "type": "Vega.StackOffset -> Vega.StackProperty"
      },
      {
        "name": "stSort",
        "comment": " Specify the criteria for sorting values in a stack transform.\n\n    transform\n        [ trStack\n            [ stGroupBy [ field \"x\" ]\n            , stSort [ ( field \"c\", Ascend ) ]\n            , stField (field \"y\")\n            ]\n        ]\n\nFor details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack/)\n\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.StackProperty"
      },
      {
        "name": "stackOffsetSignal",
        "comment": " Specify a named signal to drive the type of offsetting to apply when\nperforming a stack transform. For details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack)\n",
        "type": "String -> Vega.StackOffset"
      },
      {
        "name": "str",
        "comment": " A string literal used for functions that can accept a string or an expression,\nfield or signal that generates a string.\n",
        "type": "String -> Vega.Str"
      },
      {
        "name": "strExpr",
        "comment": " An expression that will be evaluated as a string value.\n",
        "type": "Vega.Expr -> Vega.Str"
      },
      {
        "name": "strNull",
        "comment": " Represents an absence of a string value.\n",
        "type": "Vega.Str"
      },
      {
        "name": "strSignal",
        "comment": " A signal that will provide a string value.\n",
        "type": "String -> Vega.Str"
      },
      {
        "name": "strSignals",
        "comment": " A list of signals that will provide string values.\n",
        "type": "List String -> Vega.Str"
      },
      {
        "name": "strokeCapSignal",
        "comment": " Specify a type of stroke cap with a given signal. Valid values generated by\nthe signal are the strings `butt`, `round` and `square`.\n",
        "type": "String -> Vega.StrokeCap"
      },
      {
        "name": "strokeCapValue",
        "comment": " A convenience function for generating a value representing a given\nstroke cap type.\n\n    signal \"strokeCap\" [ siValue (strokeCapValue CRound) ]\n\n",
        "type": "Vega.StrokeCap -> Vega.Value"
      },
      {
        "name": "strokeJoinSignal",
        "comment": " Specify a type of stroke join with a given signal. Valid values generated by\nthe signal are the strings `miter`, `round` and `bevel`.\n",
        "type": "String -> Vega.StrokeJoin"
      },
      {
        "name": "strokeJoinValue",
        "comment": " A convenience function for generating a text string representing a given\nstroke join type. This can be used instead of specifying an stroke join type\nas a literal string to avoid problems of mistyping its name.\n\n    signal \"strokeJoin\" [ siValue (strokeJoinValue JBevel) ]\n\n",
        "type": "Vega.StrokeJoin -> Vega.Value"
      },
      {
        "name": "strs",
        "comment": " A list of string literals used for functions that can accept literals or signal.\n",
        "type": "List String -> Vega.Str"
      },
      {
        "name": "symPath",
        "comment": " Specify a custom symbol shape as an\n[SVG path description](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths).\n",
        "type": "String -> Vega.Symbol"
      },
      {
        "name": "symbolSignal",
        "comment": " Specify a type of symbol from a signal with the given name. Valid values\ngenerated by the signal are the strings `circle`, `square`, `cross` etc.\n",
        "type": "String -> Vega.Symbol"
      },
      {
        "name": "symbolValue",
        "comment": " A convenience function for generating a value representing a given symbol type.\n\n    maShape [ symbolValue SymTriangleDown ]\n\n",
        "type": "Vega.Symbol -> Vega.Value"
      },
      {
        "name": "teAs",
        "comment": " Specify the output field names within which to write the results of a tree\nlayout transform. The parameters represent the names to replace the defaults in\nthe following order: `x`, `y`, `depth` and `children`. For details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n",
        "type": "String -> String -> String -> String -> Vega.TreeProperty"
      },
      {
        "name": "teField",
        "comment": " Specify the data corresponding to a numeric value to be associated with nodes\nin a tree transform. For details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n",
        "type": "Vega.Field -> Vega.TreeProperty"
      },
      {
        "name": "teMethod",
        "comment": " Specify layout method used in a tree transform. For details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n",
        "type": "Vega.TreeMethod -> Vega.TreeProperty"
      },
      {
        "name": "teNodeSize",
        "comment": " Specify the size of each node in a tree layout as a two-element [width,height]\nlist (or a signal that generates such a list). For details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n",
        "type": "Vega.Num -> Vega.TreeProperty"
      },
      {
        "name": "teSize",
        "comment": " Specify the size of of a tree layout as a two-element [width,height] list\n(or a signal that generates such a list). For details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n",
        "type": "Vega.Num -> Vega.TreeProperty"
      },
      {
        "name": "teSort",
        "comment": " Specify how sorting of sibling nodes is performed as part of a tree layout\ntransform. For details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.TreeProperty"
      },
      {
        "name": "textDirectionSignal",
        "comment": " Specify a text direction rendering with a given signal. Valid values generated\nby the signal are the strings `ltr` and `rtl` .\n",
        "type": "String -> Vega.TextDirection"
      },
      {
        "name": "textDirectionValue",
        "comment": " Create a text direction value. This can be used with [maDir](#maDir).\n",
        "type": "Vega.TextDirection -> Vega.Value"
      },
      {
        "name": "tgInsert",
        "comment": " Specify an expression that evaluates to data objects to insert as triggers.\nA trigger enables dynamic updates to a visualization. Insert operations are only\napplicable to data sets, not marks. For details see the\n[Vega trigger documentation](https://vega.github.io/vega/docs/triggers/)\n",
        "type": "String -> Vega.TriggerProperty"
      },
      {
        "name": "tgModifyValues",
        "comment": " Specify a data or mark modification trigger. The first parameter is an\nexpression that evaluates to data objects to modify and the second parameter an\nexpression that evaluates to an object of name-value pairs, indicating the field\nvalues that should be updated. For example:\n\n    mark Symbol\n        [ mFrom [ srData (str \"countries\") ]\n        , mOn\n            [ trigger \"myDragSignal\"\n                [ tgModifyValues \"dragged\" \"{fx: x(), fy: y()}\" ]\n            ]\n\nwould set the `fx` and `fy` properties on mark items referenced by `myDragSignal`\nto the current mouse pointer position.\n\nModify operations are applicable to both datasets and marks. For details see the\n[Vega trigger documentation](https://vega.github.io/vega/docs/triggers/)\n\n",
        "type": "String -> String -> Vega.TriggerProperty"
      },
      {
        "name": "tgRemove",
        "comment": " Specify an expression that evaluates to data objects to remove.\nA trigger enables dynamic updates to a visualization. Remove operations are only\napplicable to data sets, not marks. For details see the\n[Vega trigger documentation](https://vega.github.io/vega/docs/triggers/)\n",
        "type": "String -> Vega.TriggerProperty"
      },
      {
        "name": "tgRemoveAll",
        "comment": " Remove all data objects. A trigger enables dynamic updates to a visualization.\nFor details see the\n[Vega trigger documentation](https://vega.github.io/vega/docs/triggers/)\n",
        "type": "Vega.TriggerProperty"
      },
      {
        "name": "tgToggle",
        "comment": " Specify an expression that evaluates to data objects to toggle. Toggled\nobjects are inserted or removed depending on whether they are already in the\ndata set. Toggle operations are only applicable to data sets, not marks. For\ndetails see the\n[Vega trigger documentation](https://vega.github.io/vega/docs/triggers/)\n",
        "type": "String -> Vega.TriggerProperty"
      },
      {
        "name": "tiAnchor",
        "comment": " Specify the anchor positioning of a title. Used for aligning title text. For\ndetails see the [Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Anchor -> Vega.TitleProperty"
      },
      {
        "name": "tiAngle",
        "comment": " Specify the angle in degrees of a title. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Num -> Vega.TitleProperty"
      },
      {
        "name": "tiBaseline",
        "comment": " Specify the vertical title text baseline. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.VAlign -> Vega.TitleProperty"
      },
      {
        "name": "tiColor",
        "comment": " Specify the color of a title. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Str -> Vega.TitleProperty"
      },
      {
        "name": "tiEncode",
        "comment": " Specify optional mark encodings for custom title styling. This is a standard\nencoding for text marks and may contain `enEnter`, `enUpdate`, `enExit` and\n`enHover` specifications. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "List Vega.EncodingProperty -> Vega.TitleProperty"
      },
      {
        "name": "tiFont",
        "comment": " Specify the font name of a title. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Str -> Vega.TitleProperty"
      },
      {
        "name": "tiFontSize",
        "comment": " Specify the font size of a title. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Num -> Vega.TitleProperty"
      },
      {
        "name": "tiFontWeight",
        "comment": " Specify the font weight of a title (can be a number such as `vnum 300` or text\nsuch as `vStr \"bold\"`). For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Value -> Vega.TitleProperty"
      },
      {
        "name": "tiFrame",
        "comment": " Specify the reference frame for the anchor position of a title. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.TitleFrame -> Vega.TitleProperty"
      },
      {
        "name": "tiInteractive",
        "comment": " Specify whether or not a title's properties should respond to input events\nsuch as mouse hover. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Boo -> Vega.TitleProperty"
      },
      {
        "name": "tiLimit",
        "comment": " Specify the maximim allowed length of a title in pixels. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Num -> Vega.TitleProperty"
      },
      {
        "name": "tiName",
        "comment": " Specify a mark name to apply to a title text mark. This name can be used to\nrefer to the title mark with an\n[event stream definition](https://vega.github.io/vega/docs/event-streams/). For\ndetails see the [Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "String -> Vega.TitleProperty"
      },
      {
        "name": "tiOffset",
        "comment": " Specify the orthogonal offset in pixels by which to displace the title from\nits position along the edge of the chart. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Num -> Vega.TitleProperty"
      },
      {
        "name": "tiOrient",
        "comment": " Specify the positioning of a title relative to the chart. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Side -> Vega.TitleProperty"
      },
      {
        "name": "tiStyle",
        "comment": " Specify a mark style property to apply to the title text mark. If not\nspecified the default style of `group-title` is used. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Str -> Vega.TitleProperty"
      },
      {
        "name": "tiZIndex",
        "comment": " Specify a z-index indicating the layering of the title group relative to\nother axis, mark and legend groups. For details see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/).\n",
        "type": "Vega.Num -> Vega.TitleProperty"
      },
      {
        "name": "timeUnitSignal",
        "comment": " Specify a time unit with a given signal. For valid values generated by\nthe signal (`year`, `hour`, `second` etc), see the\n[Vega scale documentation](https://vega.github.io/vega/docs/scales/#quantitative).\n",
        "type": "String -> Vega.TimeUnit"
      },
      {
        "name": "title",
        "comment": " Specify the top-level title to be displayed as part of a visualization.\nThe first paramter is the text of the title to display, the second any optional\nproperties for customising the title's appearance. For details, see the\n[Vega title documentation](https://vega.github.io/vega/docs/title/)\n",
        "type": "Vega.Str -> List Vega.TitleProperty -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "titleFrameSignal",
        "comment": " Specify a title anchor positioning rule with a given signal. Valid values\ngenerated by the signal should be either `bounds` or `group`.\n",
        "type": "String -> Vega.TitleFrame"
      },
      {
        "name": "tmAs",
        "comment": " Specify the output field names for the output of a treemap layout transform.\nThe parameters correspond to the (default name) fields `x0`, `y0`, `x1`, `y1`,\n`depth` and `children`. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "String -> String -> String -> String -> String -> String -> Vega.TreemapProperty"
      },
      {
        "name": "tmField",
        "comment": " Specify the data field corresponding to a numeric value for a treemap node.\nThe sum of values for a node and all its descendants is available on the node object\nas the `value` property. This field determines the size of a node. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Field -> Vega.TreemapProperty"
      },
      {
        "name": "tmMethod",
        "comment": " Specify the layout method to use in a treemap transform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.TreemapMethod -> Vega.TreemapProperty"
      },
      {
        "name": "tmPadding",
        "comment": " Specify the inner and outer padding values for a treemap layout transform. For details see\nthe [Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmPaddingBottom",
        "comment": " Specify the padding between the bottom edge of a node and its children in a treemap\nlayout transform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmPaddingInner",
        "comment": " Specify the inner padding values for a treemap layout transform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmPaddingLeft",
        "comment": " Specify the padding between the left edge of a node and its children in a treemap\nlayout transform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmPaddingOuter",
        "comment": " Specify the outer padding values for a treemap layout transform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmPaddingRight",
        "comment": " Specify the padding between the right edge of a node and its children in a treemap\nlayout transform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmPaddingTop",
        "comment": " Specify the padding between the top edge of a node and its children in a treemap\nlayout transform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmRatio",
        "comment": " Specify the target aspect ratio for the `Squarify` or `Resquarify` treemap layout\ntrqnsformations. The default is the golden ratio, φ = (1 + sqrt(5)) / 2. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmRound",
        "comment": " Specify whether or not node layout values should be rounded in a treemap transform.\nThe default is false. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Boo -> Vega.TreemapProperty"
      },
      {
        "name": "tmSize",
        "comment": " Specify the size of a treemap layout as two-element list (or signal) corresponding\nto [width, height]. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "Vega.Num -> Vega.TreemapProperty"
      },
      {
        "name": "tmSort",
        "comment": " Specify how sorting of sibling nodes is performed during a treemap layout\ntransform. For details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.TreemapProperty"
      },
      {
        "name": "toVega",
        "comment": " Convert a list of Vega specifications into a single JSON object that may be\npassed to Vega for graphics generation. Recommended practice for top-level\nproperties that have more than a simple parameter is to create as a series of\ncompactly named functions (e.g. `ds` for the data source, `sc` for scales, `si`\nfor signals, `ax` for axes, `mk` for marks etc.) and then pass them as a list to\nthe function `toVega`. For example,\n\n    helloWorld : Spec\n    helloWorld =\n        let\n            table =\n                dataFromColumns \"table\" []\n                    << dataColumn \"label\" (vStrs [ \"Hello\", \"from\", \"elm-vega\" ])\n                    << dataColumn \"x\" (vNums [ 1, 2, 3 ])\n\n            ds =\n                dataSource [ table [] ]\n\n            sc =\n                scales\n                    << scale \"xScale\"\n                        [ scDomain (doData [ daDataset \"table\", daField (field \"x\") ])\n                        , scRange RaWidth\n                        ]\n\n            mk =\n                marks\n                    << mark Text\n                        [ mFrom [ srData (str \"table\") ]\n                        , mEncode\n                            [ enEnter\n                                [ maX [ vScale \"xScale\", vField (field \"x\") ]\n                                , maText [ vField (field \"label\") ]\n                                ]\n                            ]\n                        ]\n        in\n        toVega\n            [ width 100, ds, sc [], mk [] ]\n\n",
        "type": "List ( Vega.VProperty, Vega.Spec ) -> Vega.Spec"
      },
      {
        "name": "topojsonFeature",
        "comment": " Indicates a topoJSON feature format. The first parameter should be the name\nof the object set to extract. Typically used when specifying a data URL.\n",
        "type": "String -> Vega.FormatProperty"
      },
      {
        "name": "topojsonMesh",
        "comment": " Indicates a topoJSON mesh format. The first parameter should be the name\nof the object set to extract. Unlike the `topojsonFeature`, the corresponding\ngeo data are returned as a single, unified mesh instance, not as individual\nGeoJSON features. Typically used when specifying a data URL.\n",
        "type": "String -> Vega.FormatProperty"
      },
      {
        "name": "trAggregate",
        "comment": " Specify an aggregation transform to group and summarize an input data stream\nto produce a derived output stream. Aggregate transforms can be used to compute\ncounts, sums, averages and other descriptive statistics over groups of data objects.\nFor details see the\n[Vega aggregation documentation](https://vega.github.io/vega/docs/transforms/aggregate/).\n",
        "type": "List Vega.AggregateProperty -> Vega.Transform"
      },
      {
        "name": "trBin",
        "comment": " Perform a binning transform that discretises numeric values into a set of bins.\nThe first parameter is the field to bin, the second a two-element numeric list\nrepresenting the min/max extent of the bins. Optional binning properties can be\nprovided in the final parameter. Commonly used to create frequency histograms by\ncombining with [trAggregate](#trAggregate) to do the counting of field values in\neach bin.\n\n    transform\n        [ trBin (field \"examScore\") (nums [ 0, 100 ]) []\n        , trAggregate\n            [ agKey (field \"bin0\")\n            , agGroupBy [ field \"bin0\", field \"bin1\" ]\n            , agOps [ Count ]\n            , agAs [ \"count\" ]\n            ]\n        ]\n\nFor details see the\n[Vega bin transform documentation](https://vega.github.io/vega/docs/transforms/bin/).\n\n",
        "type": "Vega.Field -> Vega.Num -> List Vega.BinProperty -> Vega.Transform"
      },
      {
        "name": "trCollect",
        "comment": " Perform a collect transform that collects all the objects in a data stream\nwithin a single list, allowing sorting by data field values. For details see the\n[Vega collect transform documentation](https://vega.github.io/vega/docs/transforms/collect/).\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.Transform"
      },
      {
        "name": "trContour",
        "comment": " Perform a contour transform that generates a set of contour (iso) lines at a set\nof discrete levels. Commonly used to visualize density estimates for 2D point data.\n\nThe first two parameters are the width and height over which to compute the contours.\nThe third a list of optional contour properties. The transform generates a new\nstream of GeoJSON data as output which may be visualized using either the\n`trGeoShape` or `trGeoPath` transforms.\n\n    transform\n        [ trContour (numSignal \"width\")\n            (numSignal \"height\")\n            [ cnX (fExpr \"scale('xScale', datum.Horsepower)\")\n            , cnY (fExpr \"scale('yScale', datum.Miles_per_Gallon)\")\n            , cnCount (numSignal \"count\")\n            ]\n        ]\n\nFor details see the\n[Vega contour transform documentation](https://vega.github.io/vega/docs/transforms/contour/).\n\n",
        "type": "Vega.Num -> Vega.Num -> List Vega.ContourProperty -> Vega.Transform"
      },
      {
        "name": "trCountPattern",
        "comment": " Perform a count pattern transform that counts the number of occurrences of a\ntext pattern, as defined by a regular expression. This transform will iterate\nthrough each data object and count all unique pattern matches found within the\ndesignated text field.\n\nThe first parameter is the field containing the text to count, the second a list\nof optional counting properties. The transform generates two fields named `text`\nand `count` unless renamed via `cpAs`.\n\n    transform\n        [ trCountPattern (field \"data\")\n            [ cpCase Uppercase\n            , cpPattern (str \"[\\\\w']{3,}\")\n            , cpStopwords (str \"(i|me|my|myself)\")\n            ]\n        ]\n\nFor details see the\n[Vega count pattern transform documentation](https://vega.github.io/vega/docs/transforms/countpattern/).\n\n",
        "type": "Vega.Field -> List Vega.CountPatternProperty -> Vega.Transform"
      },
      {
        "name": "trCross",
        "comment": " Perform a cross transform that computes the cross-product of a data stream\nwith itself. For details see the\n[Vega filter transform documentation](https://vega.github.io/vega/docs/transforms/filter/).\n",
        "type": "List Vega.CrossProperty -> Vega.Transform"
      },
      {
        "name": "trCrossFilter",
        "comment": " Perform a crossfilter transform which maintains a filter mask for multiple\ndimensional queries, using a set of sorted indices. The parameter is a list of\n(field,range) pairs indicating which fields to filter and the numeric range of\nvalues in the form of a `num` that resolves to a [min (inclusive), max (exclusive)]\npair. For details see the\n[Vega crossfilter transform documentation](https://vega.github.io/vega/docs/transforms/crossfilter/).\n",
        "type": "List ( Vega.Field, Vega.Num ) -> Vega.Transform"
      },
      {
        "name": "trCrossFilterAsSignal",
        "comment": " Perform a crossfilter transform which maintains a filter mask for multiple\ndimensional queries, using a set of sorted indices. This version can be used in\nconjunction with [trResolvefilter](#trResolveFilter) to enable fast interactive\nquerying over large data sets. The parameter is a list of (field,range) pairs indicating\nwhich fields to filter and the numeric range of values in the form of a `num` that\nresolves to a [min (inclusive), max (exclusive)] pair. The final parameter is the\nname of a new signal with which to bind the results of the filter (which can then\nbe referenced by [trResolveFilter](#trResolveFilter)). For details see the\n[Vega crossfilter transform documentation](https://vega.github.io/vega/docs/transforms/crossfilter/).\n",
        "type": "List ( Vega.Field, Vega.Num ) -> String -> Vega.Transform"
      },
      {
        "name": "trDensity",
        "comment": " Compute ta new data stream of uniformly-spaced samples drawn from a one-dimensional\nprobability density function (pdf) or cumulative distribution function (cdf). This\ntransform is useful for representing probability distributions and generating\ncontinuous distributions from discrete samples using kernel density estimation.\nFor details see the\n[Vega density transform documentation](https://vega.github.io/vega/docs/transforms/density/).\n",
        "type": "Vega.Distribution -> List Vega.DensityProperty -> Vega.Transform"
      },
      {
        "name": "trExtent",
        "comment": " Compute the minimum and maximum values for a data field, producing a two-element\n[min, max] list. This transform does not change the input data stream. For details see the\n[Vega extent transform documentation](https://vega.github.io/vega/docs/transforms/extent/).\n",
        "type": "Vega.Field -> Vega.Transform"
      },
      {
        "name": "trExtentAsSignal",
        "comment": " Compute the minimum and maximum values for a given data field and bind it to a\nsignal with the given name. This transform does not change the input data stream but\nthe signal can be used, for example, as a parameter for a bin transform. For details\nsee the\n[Vega extent transform documentation](https://vega.github.io/vega/docs/transforms/extent/)\n",
        "type": "Vega.Field -> String -> Vega.Transform"
      },
      {
        "name": "trFilter",
        "comment": " Perform a filter transform that removes objects from a data stream based on\nthe given filter expression. For details see the\n[Vega filter transform documentation](https://vega.github.io/vega/docs/transforms/filter/).\n",
        "type": "Vega.Expr -> Vega.Transform"
      },
      {
        "name": "trFlatten",
        "comment": " Perform a flattening transform that maps list-valued fields to a set of\nindividual data objects, one per list entry. This version generates the output\nfields with names corresponding to the list field used. To customise the names\nof these fields use [trFlattenAs](#trFlattenAs). For details see the\n[Vega fold transform documentation](https://vega.github.io/vega/docs/transforms/fold/).\n",
        "type": "List Vega.Field -> Vega.Transform"
      },
      {
        "name": "trFlattenAs",
        "comment": " Perform a flattening transform that maps list-valued fields to a set of\nindividual data objects, one per list entry. This version names the output fields\naccording to the names provided in the second parameter.\nFor details see the\n[Vega fold flatten documentation](https://vega.github.io/vega/docs/transforms/flatten/).\n",
        "type": "List Vega.Field -> List String -> Vega.Transform"
      },
      {
        "name": "trFold",
        "comment": " Perform a fold transform that collapses (or “folds”) one or more data fields\ninto two properties: a _key_ containing the original data field name and a _value_\ncontaining the data value. This version generates the two output fields with names\n`key` and `value`. To customise the names of these fields use [trFoldAs](#trFoldAs).\nFor details see the\n[Vega fold transform documentation](https://vega.github.io/vega/docs/transforms/fold/).\n",
        "type": "List Vega.Field -> Vega.Transform"
      },
      {
        "name": "trFoldAs",
        "comment": " Perform a fold transform that collapses (or “folds”) one or more data fields\ninto two properties: a _key_ containing the original data field name and a _value_\ncontaining the data value. This version names the key and value fields based on\nthe second and third parameters. For details see the\n[Vega fold transform documentation](https://vega.github.io/vega/docs/transforms/fold/).\n",
        "type": "List Vega.Field -> String -> String -> Vega.Transform"
      },
      {
        "name": "trForce",
        "comment": " Compute a force-directed layout. This layout transformation uses a model in\nwhich data objects act as charged particles (or nodes), optionally connected by\na set of edges (or links). A set of forces is used to drive a physics simulation\nthat determines the node positions.\nFor details see the\n[Vega force transform documentation](https://vega.github.io/vega/docs/transforms/force/).\n",
        "type": "List Vega.ForceSimulationProperty -> Vega.Transform"
      },
      {
        "name": "trFormula",
        "comment": " Extend a data object with new values according to the given\n[Vega expression](https://vega.github.io/vega/docs/expressions/). The second\nparameter is a new field name to give the result of the evaluated expression.\nThis version will reapply the formula if the data changes. To perform a one-off\nformula calculation use [trFormulaInitOnly](#trFormulaInitOnly).\n\n    dataSource\n        [ data \"world\"\n            [ daUrl \"https://vega.github.io/vega/data/world-110m.json\"\n            , daFormat [ topojsonFeature \"countries\" ]\n            ]\n            |> transform\n                [ trFormula \"geoCentroid('myProj', datum)\" \"myCentroid\" ]\n        ]\n\nFor details see the\n[Vega formula transform documentation](https://vega.github.io/vega/docs/transforms/formula).\n\n",
        "type": "String -> String -> Vega.Transform"
      },
      {
        "name": "trFormulaInitOnly",
        "comment": " Extend a data object with new values according to the given\n[Vega expression](https://vega.github.io/vega/docs/expressions/). The second\nparameter is a new field name to give the result of the evaluated expression.\nThis version will apply the formula only once even if the data changes.\n\nFor details see the\n[Vega formula transform documentation](https://vega.github.io/vega/docs/transforms/formula).\n\n",
        "type": "String -> String -> Vega.Transform"
      },
      {
        "name": "trGeoJson",
        "comment": " Perform a geoJSON transform that consolidates geographic data into a single\nfeature collection. This can be captured as a signal that will represent the\nconsolidated feature collection. For details see the\n[Vega geoJSON documentation](https://vega.github.io/vega/docs/transforms/geojson/).\n",
        "type": "List Vega.GeoJsonProperty -> Vega.Transform"
      },
      {
        "name": "trGeoPath",
        "comment": " Perform a geopath transform that maps GeoJSON features to SVG path strings\naccording to a provided cartographic projection. It is intended for use with the\npath mark type. This transform is similar in functionality to the geoshape transform,\nbut immediately generates SVG path strings, rather than producing a shape instance\nthat delays projection until the rendering stage. The geoshape transform may have\nbetter performance for the case of canvas-rendered dynamic maps.\n\n    mark Shape\n        [ mFrom [ srData (str \"countries\") ]\n        , mEncode [ enUpdate [ maFill [vStr \"blue\" ] ] ]\n        , mTransform [ trGeoPath \"myProjection\" [] ]\n        ]\n\nFor details see the\n[Vega geopath documentation](https://vega.github.io/vega/docs/transforms/geopath/).\n\n",
        "type": "String -> List Vega.GeoPathProperty -> Vega.Transform"
      },
      {
        "name": "trGeoPoint",
        "comment": " Perform a geoPoint transform that projects a longitude, latitude pair to\n(x,y) coordinates according to the given map projection. The first parameter is\nthe name of the map projection to use, the second and third the fields containing\nthe longitude and latitude values respectively. This version generates\ntwo new fields with the name `x` and `y` holding the projected coordinates.\n\n     transform\n         [ trGeoPoint \"myProj\" (field \"longitude\") (field \"latitude\") ]\n\nFor details see the\n[Vega geoPoint documentation](https://vega.github.io/vega/docs/transforms/geopoint/).\n\n",
        "type": "String -> Vega.Field -> Vega.Field -> Vega.Transform"
      },
      {
        "name": "trGeoPointAs",
        "comment": " Perform a geoPoint transform that projects a longitude, latitude pair to\n(x,y) coordinates according to the given map projection. The first parameter is\nthe name of the map projection to use, the second and third the fields containing\nthe longitude and latitude values respectively. This version generates\ntwo new fields holding the projected coordinates with the names given by the last\ntwo parameters.\n\n    transform\n        [ trGeoPointAs \"myProj\" (field \"longitude\") (field \"latitude\") \"lng\" \"lat\" ]\n\nFor details see the\n[Vega geoPoint documentation](https://vega.github.io/vega/docs/transforms/geopoint/).\n\n",
        "type": "String -> Vega.Field -> Vega.Field -> String -> String -> Vega.Transform"
      },
      {
        "name": "trGeoShape",
        "comment": " Perform a geoShape transform generating a renderer instance that maps GeoJSON\nfeatures to a shape instance that issues drawing commands. It is intended for use\nsolely with the shape mark type. This transform is similar in functionality to the\ngeopath transform, but rather than generate intermediate SVG path strings, this\ntransform produces a shape instance that directly generates drawing commands during\nrendering. This transform can result in improved performance when using canvas\nrendering for dynamic maps.\n\n    mark Shape\n        [ mFrom [ srData (str \"countries\") ]\n        , mEncode [ enUpdate [ maFill [vStr \"blue\" ] ] ]\n        , mTransform [ trGeoShape \"myProjection\" [] ]\n        ]\n\nFor details see the\n[Vega geoshape documentation](https://vega.github.io/vega/docs/transforms/geoshape/).\n\n",
        "type": "String -> List Vega.GeoPathProperty -> Vega.Transform"
      },
      {
        "name": "trGraticule",
        "comment": " Perform a graticule transform that generates a reference grid for cartographic\nmaps. A graticule is a uniform grid of meridians and parallels. The default graticule\nhas meridians and parallels every 10° between ±80° latitude; for the polar regions,\nthere are meridians every 90°.\n\nThis transform generates a new data stream containing a single GeoJSON data object\nfor the graticule, which can subsequently be drawn using the geopath or geoshape\ntransform. For details see the\n[Vega graticule transform documentation](https://vega.github.io/vega/docs/transforms/graticule/).\n\n",
        "type": "List Vega.GraticuleProperty -> Vega.Transform"
      },
      {
        "name": "trIdentifier",
        "comment": " Extend a data object with a globally unique key value. Identifier values are\nassigned using an internal counter. This counter is shared across all instances\nof this transform within a single Vega view, including different data sources,\nbut not across different Vega views.\n\n    transform [ trIdentifier \"id\" ]\n\nFor details see the\n[Vega identifier transform documentation](https://vega.github.io/vega/docs/transforms/identifier/).\n\n",
        "type": "String -> Vega.Transform"
      },
      {
        "name": "trImpute",
        "comment": " Perform an impute transform which generates new values for missing data.\nThe first parameter is the data field for which missing values should be imputed.\nThe second parameter a key field that uniquely identifies the data objects within\na group and so allows missing values to be identified. The third parameter is a\nlist of optional properties for customising the imputation.\n\nFor details see the\n[Vega impute transform documentation](https://vega.github.io/vega/docs/transforms/impute/).\n\n",
        "type": "Vega.Field -> Vega.Field -> List Vega.ImputeProperty -> Vega.Transform"
      },
      {
        "name": "trJoinAggregate",
        "comment": " Specify an join aggregation transform to group and summarize an input data stream\nin a similar way to [trAggregate](#trAggregate) but which is then joined back to\nthe input stream. This can be helpful for creating derived values that combine both\nraw data and aggregate calculations, such as percentages of group totals. For details see the\n[Vega join aggregation documentation](https://vega.github.io/vega/docs/transforms/joinaggregate/).\n",
        "type": "List Vega.JoinAggregateProperty -> Vega.Transform"
      },
      {
        "name": "trLinkPath",
        "comment": " Perform a linkpath transform used to route a visual link between two nodes.\nThe most common use case is to draw edges in a tree or network layout. By default\nlinks are simply straight lines between source and target nodes; however, with\nadditional shape and orientation information, a variety of link paths can be\nexpressed. This transform writes one property to each datum, providing an SVG path\nstring for the link path. For details see the\n[Vega link path transform documentation](https://vega.github.io/vega/docs/transforms/linkpath/).\n",
        "type": "List Vega.LinkPathProperty -> Vega.Transform"
      },
      {
        "name": "trLookup",
        "comment": " Perform a lookup transform that extends a primary data stream by looking up\nvalues on a secondary data stream. The first parameter is the name of the secondary\ndata stream upon which to perform the lookup. The second parameter is the key field\nin that secondary stream. The third is the set of key fields from the primary data\nstream, each of which are then searched for in a single key field of\nthe secondary data stream. Optional customisation can be provided as a list of\nproperties in the final parameter. For details see the\n[Vega lookup transform documentation](https://vega.github.io/vega/docs/transforms/lookup/).\n",
        "type": "String -> Vega.Field -> List Vega.Field -> List Vega.LookupProperty -> Vega.Transform"
      },
      {
        "name": "trNest",
        "comment": " Perform a nesting transform that generates a tree data structure from input\ndata objects by dividing children into groups based on distinct field values. This\ncan provide input to tree layout methods such as [trTree](#trTree), [trTreemap](#trTreemap),\n[trPack](#trPack) and [trPartition](#trPartition). For details see the\n[Vega nest transform documentation](https://vega.github.io/vega/docs/transforms/nest/).\n",
        "type": "List Vega.Field -> Vega.Boo -> Vega.Transform"
      },
      {
        "name": "trPack",
        "comment": " Perform a pack transform on some data to computes an enclosure diagram that\nuses containment (nesting) to represent a hierarchy. The size of the leaf circles\nencodes a quantitative dimension of the data. The enclosing circles show the\napproximate cumulative size of each subtree, but due to wasted space there is some\ndistortion; only the leaf nodes can be compared accurately.\n\n    transform\n        [ trPack\n            [ paField (field \"size\")\n            , paSort [ ( field \"value\", Ascend ) ]\n            , paSize (numSignals [ \"width\", \"height\" ])\n            ]\n        ]\n\nFor details see the\n[Vega pack transform documentation](https://vega.github.io/vega/docs/transforms/pack/).\n\n",
        "type": "List Vega.PackProperty -> Vega.Transform"
      },
      {
        "name": "trPartition",
        "comment": " Perform a partition transform that computes the layout for an adjacency diagram:\na space-filling variant of a node-link tree diagram. Rather than drawing a link\nbetween parent and child in the hierarchy, nodes are drawn as solid areas (either\narcs or rectangles), and their placement relative to other nodes reveals their\nposition in the hierarchy. The size of the nodes encodes a quantitative dimension\nthat might be difficult to convey in a node-link diagram.\n\n    transform\n        [ trPartition\n            [ ptField (field \"size\")\n            , ptSort [ ( field \"value\", Ascend ) ]\n            , ptSize (numSignals [ \"2 * PI\", \"width / 2\" ])\n            , ptAs \"a0\" \"r0\" \"a1\" \"r1\" \"depth\" \"children\"\n            ]\n        ]\n\nFor details see the\n[Vega partition transform documentation](https://vega.github.io/vega/docs/transforms/partition/).\n\n",
        "type": "List Vega.PartitionProperty -> Vega.Transform"
      },
      {
        "name": "trPie",
        "comment": " Perform a pie transform that calculates the angular extents of arc segments\nlaid out in a circle. The most common use case is to create pie charts and donut\ncharts. This transform writes two properties to each datum, indicating the starting\nand ending angles (in radians) of an arc. For details see the\n[Vega pie transform documentation](https://vega.github.io/vega/docs/transforms/pie/).\n",
        "type": "List Vega.PieProperty -> Vega.Transform"
      },
      {
        "name": "trPivot",
        "comment": " Perform a pivot transform that maps unique values from a field to new aggregated\nfields in the output stream. The first parameter is the field to pivot on (the one\nthat will provide new field names). The second is the field containing values to\naggregate in order to populate new values. The third parameter allows the transform\nto be customised. For details see the\n[Vega pivot transform documentation](https://vega.github.io/vega/docs/transforms/pivot/).\n",
        "type": "Vega.Field -> Vega.Field -> List Vega.PivotProperty -> Vega.Transform"
      },
      {
        "name": "trProject",
        "comment": " Perform a relational algebra projection transform. This results in a new stream\nof derived data objects that include one or more fields from the input stream.\nThe parameter is a list of field-name pairs where the fields are those fields to\nbe copied over in the projection and the names are the new names to give the projected\nfields. For details see the\n[Vega project transform documentation](https://vega.github.io/vega/docs/transforms/project/).\n",
        "type": "List ( Vega.Field, String ) -> Vega.Transform"
      },
      {
        "name": "trResolveFilter",
        "comment": " Perform a resolvefilter transform that uses the filter mask generated by a\ncrossfilter transform to efficiently generate filtered data streams. The first\nprarameter is the signal created by [trCrossFilterAsSignal](#trCrossFilterAsSignal)\nand the second a bit mask indicating which fields in the crossfilter should be\nignored. Each bit corresponds to a field and query in the crossfilter transform’s\nfields and query lists. If the corresponding bit is on, that field and query will\nbe ignored when resolving the filter. All other queries must pass the filter for\na tuple to be included down stream.\n\n    transform  [ trResolveFilter \"myFilter\" 4 ]\n\nA single crossfilter instance can be used to support cross-filtering over multiple\ncharts; the filtered data streams for each individual chart are generated by using\none resolvefilter transform per chart. For details see the\n[Vega crossfilter transform documentation](https://vega.github.io/vega/docs/transforms/crossfilter/).\n\n",
        "type": "String -> Vega.Num -> Vega.Transform"
      },
      {
        "name": "trSample",
        "comment": " Generate a random sample from a data stream to generate a smaller stream. The\nparameter determines the maximum number of data items to sample. For details see the\n[Vega sample transform documentation](https://vega.github.io/vega/docs/transforms/sample/).\n",
        "type": "Vega.Num -> Vega.Transform"
      },
      {
        "name": "trSequence",
        "comment": " Generate a data stream of numbers between a start (first parameter) and end\n(second parameter) inclusive in increments specified by the third parameter. If\nthe end value is less than the start value, the third parameter should be negative.\n\nThis can be used to feed other transforms to generate data, for example to create\nrandom (x,y) coordinates:\n\n    dataSource\n        [ data \"randomData\" []\n            |> transform\n                [ trSequence (num 1) (num 1000) (num 1)\n                , trFormula \"random()\" \"x\"\n                , trFormula \"random()\" \"y\"\n                ]\n        ]\n\nFor details see the\n[Vega sequence transform documentation](https://vega.github.io/vega/docs/transforms/sequence/).\n\n",
        "type": "Vega.Num -> Vega.Num -> Vega.Num -> Vega.Transform"
      },
      {
        "name": "trStack",
        "comment": " Perform a stack transform that computes a layout by stacking groups of values.\nThe most common use case is to create stacked graphs, including stacked bar charts\nand stream graphs. This transform writes two properties to each datum, indicating\nthe starting and ending stack values. For details see the\n[Vega stack transform documentation](https://vega.github.io/vega/docs/transforms/stack/).\n",
        "type": "List Vega.StackProperty -> Vega.Transform"
      },
      {
        "name": "trStratify",
        "comment": " Perform a stratify transform that generates a hierarchical (tree) data structure\nfrom input data objects, based on key fields that match an id for each node (first\nparameter) and their parent's key (second parameter) nodes. Internally, this transform\ngenerates a set of tree node objects that can then be processed by tree layout methods\nsuch as tree, treemap, pack, and partition. For details see the\n[Vega stratify transform documentation](https://vega.github.io/vega/docs/transforms/stratify/).\n",
        "type": "Vega.Field -> Vega.Field -> Vega.Transform"
      },
      {
        "name": "trTree",
        "comment": " Perform a tree transform that computes a node-link diagram layout for hierarchical\ndata. It supports both cluster layouts (for example to create dendrograms) and tidy\nlayouts.\n\n    transform\n        [ trTree\n            [ teMethod Cluster\n            , teSize (numSignals [ \"height\", \"width-100\" ])\n            , teAs \"y\" \"x\" \"depth\" \"children\"\n            ]\n\nFor details see the\n[Vega tree transform documentation](https://vega.github.io/vega/docs/transforms/tree/).\n\n",
        "type": "List Vega.TreeProperty -> Vega.Transform"
      },
      {
        "name": "trTreeLinks",
        "comment": " Perform a treelinks transform that generates a new stream of data objects\nrepresenting links between nodes in a tree. This transform must occur downstream\nof a tree-generating transform such as [trNest](#trNest) or [trStratify](#trStratify).\nThe generated link objects will have `source` and `target` fields that reference\ninput data objects corresponding to parent (source) and child (target) nodes.\n\n    transform [ trLinkPath [ lpOrient Horizontal, lpShape LinkCurve ] ]\n\nFor details see the\n[Vega tree links transform documentation](https://vega.github.io/vega/docs/transforms/treelinks/).\n\n",
        "type": "Vega.Transform"
      },
      {
        "name": "trTreemap",
        "comment": " Perform a treemap transform recursively that subdivides an area into rectangles\nwith areas proportional to each node’s associated value.\n\n    transform\n        [ trTreemap\n            [ tmField (field \"size\")\n            , tmSort [ ( field \"value\", Ascend ) ]\n            , tmMethod Squarify\n            , tmSize (numSignals [ \"width\", \"height\" ])\n            ]\n        ]\n\nFor details see the\n[Vega treemap transform documentation](https://vega.github.io/vega/docs/transforms/treemap/).\n\n",
        "type": "List Vega.TreemapProperty -> Vega.Transform"
      },
      {
        "name": "trVoronoi",
        "comment": " Perform a voronoi transform that computes a voronoi diagram for a set of input\npoints and returns the computed cell paths. The Voronoi cells can then be used to\nidentify the nearest point for a given value. For example, a Voronoi diagram can\nbe used to automatically select the data point closest to the mouse cursor.\n\n    transform [ trVoronoi (field \"x\") (field \"y\") [] ]\n\nFor details see the\n[Vega voronoi transform documentation](https://vega.github.io/vega/docs/transforms/voronoi/).\n\n",
        "type": "Vega.Field -> Vega.Field -> List Vega.VoronoiProperty -> Vega.Transform"
      },
      {
        "name": "trWindow",
        "comment": " A window transform that performs calculations over sorted groups of data objects.\nThese calculations include ranking, lead/lag analysis and aggregates such as running\nsums and averages. Calculated values are written back to the input data stream.\n\n    transform\n        [ trWindow [ wnOperation RowNumber \"rank\" ]\n            [ wnSort [ ( field \"myField\", Descend ) ] ]\n        ]\n\nFor details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/).\n\n",
        "type": "List Vega.WindowOperation -> List Vega.WindowProperty -> Vega.Transform"
      },
      {
        "name": "trWordcloud",
        "comment": " A window transform that performs calculations over sorted groups of data objects.\nThese calculations include ranking, lead/lag analysis and aggregates such as running\nsums and averages. Calculated values are written back to the input data stream.\n\n    mark Text\n        [ mTransform\n            [ trWordcloud\n                [ wcSize (nums [ 800, 400 ])\n                , wcText (field \"text\")\n                , wcRotate (numExpr (exField \"datum.angle\"))\n                , wcFontSize (numExpr (exField \"datum.count\"))\n                , wcFontWeight (strExpr (exField \"datum.weight\"))\n                , wcFontSizeRange (nums [ 12, 56 ])\n                ]\n            ]\n        ]\n\nFor details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/).\n\n",
        "type": "List Vega.WordcloudProperty -> Vega.Transform"
      },
      {
        "name": "transform",
        "comment": " Applies the given ordered list of transforms to the given data stream. Transform\nexamples include filtering, creating new data fields from expressions and creating\nnew data fields suitable for a range of visualization and layout types. For details\nsee the [Vega transform documentation](https://vega.github.io/vega/docs/transforms).\n\n    dataSource\n        [ data \"pop\" [ daUrl \"data/population.json\" ]\n        , data \"popYear\" [ daSource \"pop\" ]\n            |> transform [ trFilter (expr \"datum.year == year\") ]\n        , data \"ageGroups\" [ daSource \"pop\" ]\n            |> transform [ trAggregate [ agGroupBy [ field \"age\" ] ] ]\n        ]\n\n",
        "type": "List Vega.Transform -> Vega.DataTable -> Vega.DataTable"
      },
      {
        "name": "transparent",
        "comment": " Convenience function for specifying a transparent setting for marks that can\nbe colored (e.g. with [maFill](#maFill))\n",
        "type": "Vega.Value"
      },
      {
        "name": "treeMethodSignal",
        "comment": " Indicates a tree layout method type is to be determined by a named signal.\nThe signal should generate either `tidy` or `cluster`.\n",
        "type": "String -> Vega.TreeMethod"
      },
      {
        "name": "treemapMethodSignal",
        "comment": " Indicates a treemap layout method type is to be determined by a named signal.\nThe signal should generate the one of `squarify`, `resquarify`, `binary`, `dice`,\n`slice` or `slicedice`.\n",
        "type": "String -> Vega.TreemapMethod"
      },
      {
        "name": "trigger",
        "comment": " Creates a trigger that may be applied to a data table or mark.\nThe first parameter is the name of the trigger and the second\na list of trigger actions.\n",
        "type": "String -> List Vega.TriggerProperty -> Vega.Trigger"
      },
      {
        "name": "true",
        "comment": " A true value used for functions that can accept a Boolean literal or a\nreference to something that generates a Boolean value (e.g. a signal).\n",
        "type": "Vega.Boo"
      },
      {
        "name": "vAlignSignal",
        "comment": " Indicates the vertical alignment of some text based on the value of the\ngiven signal.\n",
        "type": "String -> Vega.VAlign"
      },
      {
        "name": "vAlphabetic",
        "comment": " Convenience function for indicating an alphabetic vertical alignment.\n",
        "type": "Vega.Value"
      },
      {
        "name": "vBand",
        "comment": " A value representing a band number or fraction of a band number. Band scales\nare used when aggregating data into discrete categories such as in a frequency histogram.\n",
        "type": "Vega.Num -> Vega.Value"
      },
      {
        "name": "vBoos",
        "comment": " A list of Boolean values.\n",
        "type": "List Bool -> Vega.Value"
      },
      {
        "name": "vBottom",
        "comment": " Convenience function for indicating a bottom vertical alignment.\n",
        "type": "Vega.Value"
      },
      {
        "name": "vColor",
        "comment": " A value representing a color.\n",
        "type": "Vega.ColorValue -> Vega.Value"
      },
      {
        "name": "vExponent",
        "comment": " A value representing an exponential value modifier.\n",
        "type": "Vega.Value -> Vega.Value"
      },
      {
        "name": "vFalse",
        "comment": " A 'false' value.\n",
        "type": "Vega.Value"
      },
      {
        "name": "vField",
        "comment": " A value representing a field either by its name or indirectly via a signal,\nparent etc.\n",
        "type": "Vega.Field -> Vega.Value"
      },
      {
        "name": "vMiddle",
        "comment": " Convenience function for indicating a middle vertical alignment.\n",
        "type": "Vega.Value"
      },
      {
        "name": "vMultiply",
        "comment": " A value representing a multiplication value modifier.\n",
        "type": "Vega.Value -> Vega.Value"
      },
      {
        "name": "vNull",
        "comment": " A representation of a null value\n",
        "type": "Vega.Value"
      },
      {
        "name": "vNum",
        "comment": " A numeric value.\n",
        "type": "Float -> Vega.Value"
      },
      {
        "name": "vNums",
        "comment": " A value representing a list of numbers.\n",
        "type": "List Float -> Vega.Value"
      },
      {
        "name": "vObject",
        "comment": " Represents an object containing a list of values.\n",
        "type": "List Vega.Value -> Vega.Value"
      },
      {
        "name": "vOffset",
        "comment": " A value representing an additive value modifier.\n",
        "type": "Vega.Value -> Vega.Value"
      },
      {
        "name": "vRound",
        "comment": " A value representing a rounding value modifier. Rounding is applied after\nall other modifiers.\n",
        "type": "Vega.Boo -> Vega.Value"
      },
      {
        "name": "vScale",
        "comment": " A value representing the name of a scale.\n",
        "type": "String -> Vega.Value"
      },
      {
        "name": "vScaleField",
        "comment": " A value representing a scale field used to dynamically look up a scale name.\n",
        "type": "Vega.Field -> Vega.Value"
      },
      {
        "name": "vSignal",
        "comment": " Specify the name of a generic signal.\n",
        "type": "String -> Vega.Value"
      },
      {
        "name": "vStr",
        "comment": " A string value. Used for providing parameters that can be of any value type.\n",
        "type": "String -> Vega.Value"
      },
      {
        "name": "vStrs",
        "comment": " A list of string values. Used for providing parameters that can be of any value type.\n",
        "type": "List String -> Vega.Value"
      },
      {
        "name": "vTop",
        "comment": " Convenience function for indicating a top vertical alignment.\n",
        "type": "Vega.Value"
      },
      {
        "name": "vTrue",
        "comment": " A 'true' value.\n",
        "type": "Vega.Value"
      },
      {
        "name": "vValues",
        "comment": " Represents an a list of values. This can be used for nesting collections of\nvalues.\n",
        "type": "List Vega.Value -> Vega.Value"
      },
      {
        "name": "voAs",
        "comment": " Specify the name of the output field of a voronoi transform. If not specified,\nthe default is `path`. For details see the\n[Vega voronoi transform documentation](https://vega.github.io/vega/docs/transforms/voronoi/).\n",
        "type": "String -> Vega.VoronoiProperty"
      },
      {
        "name": "voExtent",
        "comment": " Specify the extent of the voronoi cells in a voronoi transform. The two parameters\nshould each evaluate to a list of two numbers representing the coordinates of the\ntop-left and bottom-right of the extent respectively. For details see the\n[Vega voronoi transform documentation](https://vega.github.io/vega/docs/transforms/voronoi/).\n",
        "type": "Vega.Num -> Vega.Num -> Vega.VoronoiProperty"
      },
      {
        "name": "voSize",
        "comment": " Specify extent of the voronoi cells in a voronoi transform. The single parameter\nshould evaluate to a list of two numbers representing the bottom-right of the extent.\nThe top-left is assumed to be [0,0]. For details see the\n[Vega voronoi transform documentation](https://vega.github.io/vega/docs/transforms/voronoi/).\n",
        "type": "Vega.Num -> Vega.VoronoiProperty"
      },
      {
        "name": "wOperationSignal",
        "comment": " Indicates a window operation is to be determined by a named signal. The\nsignal should generate the name of a valid operation (e.g. `dense_rank`).\nFor names of valid window operations see the\n[Vega window operation documentation](https://vega.github.io/vega/docs/transforms/window/#ops)\n",
        "type": "String -> Vega.WOperation"
      },
      {
        "name": "wcAs",
        "comment": " Specify the output fields created by a word cloud transform. The parameters\nmap to the following default values: `x`, `y`, `font`, `fontSize`, `fontStyle`,\n`fontWeight` and `angle`. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "String -> String -> String -> String -> String -> String -> String -> Vega.WordcloudProperty"
      },
      {
        "name": "wcFont",
        "comment": " Specify the font family to use for a word in a wordcloud. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Str -> Vega.WordcloudProperty"
      },
      {
        "name": "wcFontSize",
        "comment": " Specify the font size to use for a word in a wordcloud. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Num -> Vega.WordcloudProperty"
      },
      {
        "name": "wcFontSizeRange",
        "comment": " Specify the font size range to use for words in a wordcloud. The parameter should\nresolve to a two-element list [min,max]. The size of words in a wordcloud will be\nscaled to lie in the given range according to the square root scale. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Num -> Vega.WordcloudProperty"
      },
      {
        "name": "wcFontStyle",
        "comment": " Specify the font style to use for words in a wordcloud. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Str -> Vega.WordcloudProperty"
      },
      {
        "name": "wcFontWeight",
        "comment": " Specify the font weights to use for words in a wordcloud. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Str -> Vega.WordcloudProperty"
      },
      {
        "name": "wcPadding",
        "comment": " Specify the padding, in pixels, to be placed around words in a wordcloud. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Num -> Vega.WordcloudProperty"
      },
      {
        "name": "wcRotate",
        "comment": " Specify the angle in degrees of words in a wordcloud layout. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Num -> Vega.WordcloudProperty"
      },
      {
        "name": "wcSize",
        "comment": " Specify size of layout created by a wordcloud transform. The parameter should\nresolve to a two-element list [width, height] in pixels. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Num -> Vega.WordcloudProperty"
      },
      {
        "name": "wcSpiral",
        "comment": " Specify spiral layout method for a wordcloud transform. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Spiral -> Vega.WordcloudProperty"
      },
      {
        "name": "wcText",
        "comment": " Specify data field with the input word text for a wordcloud transform. For details see the\n[Vega wordcloud transform documentation](https://vega.github.io/vega/docs/transforms/wordcloud/).\n",
        "type": "Vega.Field -> Vega.WordcloudProperty"
      },
      {
        "name": "white",
        "comment": " Convenience function for specifying a white color setting for marks that can\nbe colored (e.g. with [maStroke](#maStroke))\n",
        "type": "Vega.Value"
      },
      {
        "name": "width",
        "comment": " Override the default width of the visualization. If not specified the width\nwill be calculated based on the content of the visualization.\n",
        "type": "Float -> ( Vega.VProperty, Vega.Spec )"
      },
      {
        "name": "wnAggOperation",
        "comment": " Specify an aggregate operation to be applied during a window transformation.\nThis version is suitable for operations without parameters (e.g. `RowNumber`) and\nthat are not applied to a specific field.\n\nThe parameters are the operation to apply, the input field (or `Nothing` if no input\nfield) and the name to give to the field which will contain the results of the calculation.\n\nThe example below calculates the average over an unbounded window:\n\n    transform\n        [ trWindow [ wnAggOperation Mean (Just (field \"IMDB_Rating\")) \"avScore\" ]\n            [ wnFrame numNull ]\n        ]\n\nFor details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n\n",
        "type": "Vega.Operation -> Maybe.Maybe Vega.Field -> String -> Vega.WindowOperation"
      },
      {
        "name": "wnFrame",
        "comment": " Specify a two-element list indicating how the sliding window should proceed\nduring a window transform. The list entries should either be a number indicating\nthe offset from the current data object, or `NumNull` to indicate unbounded rows\npreceding or following the current data object. For details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n",
        "type": "Vega.Num -> Vega.WindowProperty"
      },
      {
        "name": "wnGroupBy",
        "comment": " Specify the data fields by which to partition data objects into separate windows\nduring a window transform. If not specified, a single group containing all data\nobjects will be used. For details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n",
        "type": "List Vega.Field -> Vega.WindowProperty"
      },
      {
        "name": "wnIgnorePeers",
        "comment": " Specify whether or not a sliding frame in a window transform should ignore\npeer values. For details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n",
        "type": "Vega.Boo -> Vega.WindowProperty"
      },
      {
        "name": "wnOperation",
        "comment": " Specify a window-specific operation to be applied during a window transformation.\nThis version is suitable for operations without parameters (e.g. `RowNumber`) and\nthat are not applied to a specific field.\n\nThe parameters are the operation to apply and the name to give to the field which\nwill contain the results of the calculation.\n\n    transform\n        [ trWindow [ wnOperation Rank \"order\" ]\n            [ wnSort [ ( field \"Gross\", Descend ) ] ]\n        ]\n\nFor details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n\n",
        "type": "Vega.WOperation -> String -> Vega.WindowOperation"
      },
      {
        "name": "wnOperationOn",
        "comment": " Specify a window-specific operation to be applied during a window transformation.\nThis version is suitable for operations that have a parameter (e.g. `Lag` or `Lead`)\nand/or operations that require a specific field as input (e.g. `LastValue`).\nThe parameters are in order: the type of operation, a possible operation parameter,\nthe field to apply it to and its output field name.\n\n    transform\n        [ trWindow\n            [ wnOperationOn Lag\n                (Just (num 5))\n                (Just (field \"temperature\"))\n                \"oldTemp\"\n            ]\n            []\n        ]\n\nFor details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n\n",
        "type": "Vega.WOperation -> Maybe.Maybe Vega.Num -> Maybe.Maybe Vega.Field -> String -> Vega.WindowOperation"
      },
      {
        "name": "wnSort",
        "comment": " Specify how sorting data objects is applied within a window transform.\n\n    transform\n        [ trWindow [ wnOperation RowNumber \"order\" ]\n          [ wnSort [ ( field \"score\", Ascend ) ] ]\n        ]\n\nIf two objects are equal in terms of sorting field datum by they are considered\n'peers'. If no sorting comparator is specified, data objects are processed in the\norder they are observed with no peers. For details see the\n[Vega window transform documentation](https://vega.github.io/vega/docs/transforms/window/)\n\n",
        "type": "List ( Vega.Field, Vega.Order ) -> Vega.WindowProperty"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]